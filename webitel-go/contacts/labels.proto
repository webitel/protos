syntax = "proto3";
package webitel.contacts;
option go_package = "webitel.go/api/contacts;contacts";

import "contacts/fields.proto";

// import "google/api/visibility.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// // A Contact's associated Tag.
// // Output purpose only.
// message Label {

//   option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
//     // PUT /contacts/{source.id}/labels/{id}
//     example: "{\"etag\":\"1679792219687\",\"tag\":\"VIP\"}"
//   };

//   // Metadata about the Label.
//   FieldMetadata metadata = 1;
//   // REQUIRED. Hashtag value;
//   // NOTE: Keep in mind, hashtags are not case-sensitive,
//   // but adding capital letters does make them easier to read:
//   // #MakeAWish vs. #makeawish.
//   string tag = 5;
// }

// A Contact's associated Tag.
// Output purpose only.
message Label {

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    // GET /contacts/{source.id}/labels/{id}
    // example: "{\"etag\":\"1679792219687\",\"tag\":\"VIP\"}"
  };

  // [META]: --------------------------------------

  // The unique ID of the association. Never changes.
  string id = 1;

  // Version of the latest update. Numeric sequence.
  int32 ver = 2;

  // Unique ID of the latest version of the update.
  // This ID changes after any update to the underlying value(s).
  string etag = 3;

  // // The Contact source associated with.
  // webitel.contacts.Lookup contact = 4;

  // The user who created this Field.
  int64 created_at = 5;

  // Timestamp(milli) of the Field creation.
  webitel.contacts.Lookup created_by = 6;
  
  // Timestamp(milli) of the last Field update.
  // Take part in Etag generation.
  int64 updated_at = 7;
  
  // The user who performed last Update.
  webitel.contacts.Lookup updated_by = 8;

  // [VALUE]: --------------------------------------

  // REQUIRED. Tag value;
  // NOTE: Keep in mind, hashtags are not case-sensitive,
  // but adding capital letters does make them easier to read:
  // #MakeAWish vs. #makeawish.
  string label = 11;
}

// A Contact's associated Tag.
// Output purpose only.
message InputLabel {

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    // PUT /contacts/{source.id}/labels/{id}
    // example: "{\"ver\":\"1679792219687\",\"tag\":\"VIP\"}"
    json_schema: {
      required: ["tag"]
    }
  };
  
  // [META]: --------------------------------------

  // Unique ID of the latest version of an existing resorce.
  string etag = 1
  [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    field_configuration: {
      path_param_name: "etag"
    }
  }];
  
  // [VALUE]: --------------------------------------
    
  // REQUIRED. Hashtag value;
  // NOTE: Keep in mind, hashtags are not case-sensitive,
  // but adding capital letters does make them easier to read:
  // #MakeAWish vs. #makeawish.
  string label = 11;
}

// LabelList dataset.
// NOTE: Edge represents connection between two nodes.
// So this ContactLabels.data are always subordinate to some contact.id.
message LabelList {

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    // GET /contacts/{source.id}/labels
    // example: "{\"data\":[{\"etag\":\"1679792219687\",\"tag\":\"VIP\"},{\"etag\":\"j3w8Naf8ag7v\",\"tag\":\"#hashTag\"}],\"page\":1,\"next\":true}"
  };

  // Label(s) dataset page.
  repeated Label data = 1;
  // Page number of partial result.
  int32 page = 2;
  // Indicates that this is a partial result.
  // More data available upon query: ?size=${data.len}&page=${page++}
  bool next = 3;
}

// Labels service catalog.
service Labels {

  // ------------------ [WITH] Domain ------------------- //

  // Search for Contacts engaged Label(s).
  rpc GetLabels(GetLabelsRequest) returns (LabelTags) {
    option (google.api.http) = {
      get: "/contacts/labels"
    };
  }

  // ------------------ [WITH] Contact ------------------- //

  // Locate the Contact's associated Label(s).
  rpc ListLabels(ListLabelsRequest) returns (LabelList) {
    option (google.api.http) = {
      get: "/contacts/{contact_id}/labels"
    };
  }

  // Associate NEW Labels to the Contact.
  rpc MergeLabels(MergeLabelsRequest) returns (LabelList) {
    option (google.api.http) = {
      post: "/contacts/{contact_id}/labels"
      // response_body: "data" // NOTE: {error} -vs- [data]; HOWTO: handle such results ...
      body: "input"
    };
  }
  // Reset Labels to fit the specified final set.
  rpc ResetLabels(ResetLabelsRequest) returns (LabelList) {
    option (google.api.http) = {
      put: "/contacts/{contact_id}/labels"
      // response_body: "data"
      body: "input"
    };
  }
  // Remove Contact Labels associations.
  rpc DeleteLabels(DeleteLabelsRequest) returns (LabelList) {
    option (google.api.http) = {
      delete: "/contacts/{contact_id}/labels"
      // response_body: "data"
    };
  }
}

// LabelInfo about the Label's tag
message LabelInfo {
  // Label tag.
  string label = 1;
  // Count of sources.
  //int32 count = 2;
  // Sources of Contacts assigned.
  //repeated string sources = 3;
}

// LabelTags dataset list of label's info.
message LabelTags {
  // Labels info dataset
  repeated LabelInfo labels = 1;
  // Contact sources dataset
  repeated Lookup sources = 2;
  // Page number of partial result.
  int32 page = 3;
  // Next page available ?
  bool next = 4;
}

message GetLabelsRequest {

  // ----- Result Options ----- //

  // Page number of result dataset records. offset = ((page-1)*size)
  int32 page = 2;
  
  // Size count of records on result page. limit = (size+1)
  int32 size = 1;

  // Search term: label.
  // `?` - matches any one character
  // `*` - matches 0 or more characters
  string q = 5;
  
  // // Sort the result according to fields.
  // repeated string sort = 3;
  
  // // Fields to be retrieved into result.
  // repeated string fields = 4;

  // ----- Search Options ----- //

}

message ListLabelsRequest {

  // ----- Result Options ----- //

  // Page number of result dataset records. offset = ((page-1)*size)
  int32 page = 2;
  
  // Size count of records on result page. limit = (size+1)
  int32 size = 1;

  // Search term: label tag.
  // `?` - matches any one character
  // `*` - matches 0 or more characters
  string q = 6;

  // Sort the result according to fields.
  repeated string sort = 3;
  
  // Fields to be retrieved into result.
  repeated string fields = 4;

  // ----- Search Options ----- //

  // Link contact ID.
  string contact_id = 5;

  // Record(s) with unique ID or ETag.
  repeated string id = 7;
}


message LocateLabelRequest {

  // ----- Result Options ----- //

  // Fields to be retrieved into result.
  repeated string fields = 1;

  // ----- Locate Options ----- //

  // Link contact ID.
  string contact_id = 2;
  
  // Lookup contact = 2;

  // Unique identifier of the contact label.
  string etag = 3;
}

// message CreateLabelsRequest {

//   // ----- Reference Options ----- //

//   // Link contact ID.
//   string contact_id = 1;
  
//   // Lookup contact = 1;

//   // Fixed set of label(s) to be linked with the contact.
//   // Label(s) that conflicts with already linked will be updated.
//   repeated InputLabel data = 2
//   [
//     (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
//       example: "[{\"tag\":\"NEW\"},{\"tag\":\"VIP\"}]"
//       unique_items: true
//       min_items: 1
//     }
//   ];

//   // ----- Result Options ----- //

//   // Fields to be retrieved into result.
//   repeated string fields = 3;

// }

message MergeLabelsRequest {

  // ----- Result Options ----- //

  // Fields to be retrieved into result.
  repeated string fields = 1;

  // ----- Reference Options ----- //

  // Link contact ID.
  string contact_id = 2;
  
  // Lookup contact = 2;

  // Fixed set of label(s) to be linked with the contact.
  // Label(s) that conflicts with already linked will be updated.
  repeated InputLabel input = 3
  [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      // example: "[\"NEW\",\"VIP\"]"
      // pattern: "^\\w+$"
      unique_items: true
      min_items: 1
    }
  ];

}

// message UpdateLabelsRequest {

//   // ----- Filter Options ----- //

//   // Link contact ID.
//   string contact_id = 1;
  
//   // Lookup contact = 1;

//   // ----- Update Options ----- //

//   // Final set of labels(s) to be linked with the contact.
//   // Label(s) that are already linked with the contact
//   // but not given in here will be removed.
//   repeated InputLabel data = 2
//   [
//     (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
//       example: "[{\"id\":\"351354\",\"ver\":\"1679792219687\",\"tag\":\"VIP\"},{\"tag\":\"pending\"}]"
//       unique_items: true
//       min_items: 1
//     }
//   ];

//   // ----- Result Options ----- //

//   // Fields to be retrieved into result.
//   repeated string fields = 3;
// }

message ResetLabelsRequest {

  // ----- Result Options ----- //

  // Fields to be retrieved into result.
  repeated string fields = 1;

  // ----- Locate Options ----- //

  // Link contact ID.
  string contact_id = 2;
  
  // Lookup contact = 2;

  // ----- Update Options ----- //

  // Final set of labels(s) to be linked with the contact.
  // Label(s) that are already linked with the contact
  // but not given in here will be removed.
  repeated InputLabel input = 3
  [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      // example: "[\"VIP\",\"pending\"]"
      // pattern: "^\\w+$"
      unique_items: true
      // min_items: 1
    }
  ];

}

message DeleteLabelsRequest {

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["etag"]
    }
  };

  // ----- Result Options ----- //

  // Fields to be retrieved into result.
  repeated string fields = 1;

  // ----- Filter Options ----- //

  // Link contact ID.
  string contact_id = 2;
  
  // Lookup contact = 2;

  // ----- Delete Options ----- //

  // Set of unique label(s).etag identifiers.
  repeated string etag = 3
  [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      field_configuration: {
        path_param_name: "etag"
      }
      pattern: "^(\\w+)(,\\w+)*$"
      unique_items: true
      min_items: 1
      // format: "int64"
      // pattern: "^[1-9](\\d){0,19}$"
      // field_configuration: {
      //   path_param_name: "id_or_tag"
      // }
    }
  ];

}