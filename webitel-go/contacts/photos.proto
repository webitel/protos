syntax = "proto3";
package webitel.contacts;
option go_package = "webitel.go/api/contacts;contacts";

import "contacts/fields.proto";
import "contacts/upload.proto";
import "google/protobuf/wrappers.proto";

import "google/api/visibility.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// A contact's photo.
// A picture shown next to the contact's name
// to help others recognize the contact.
message Photo {
  
  // option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
  //   // GET /contacts/{source.id}/photos/{id}
  //   example: "{\"id\":\"6\",\"ver\":\"2\",\"etag\":\"FqaTCDLbhpaoUreL\",\"created_at\":\"1680268507698\",\"created_by\":{\"id\":\"34\",\"name\":\"John Doe\"},\"updated_at\":\"1680516785357\",\"updated_by\":{\"name\":\"Ja Lee (deleted)\"},\"key\":\"var_complex\",\"value\":{\"inner_var\":null,\"value_arr\":[\"string\",[null],false,1]}}"
  // };
  
  // [META]: --------------------------------------

  // The unique ID of the association. Never changes.
  string id = 1;
  
  // Version of the latest update. Numeric sequence.
  int32 ver = 2;

  // Unique ID of the latest version of the update.
  // This ID changes after any update to the underlying value(s).
  string etag = 3;

  // // The Contact source associated with.
  // webitel.contacts.Lookup contact = 4;

  // The user who created this Field.
  int64 created_at = 5;

  // Timestamp(milli) of the Field creation.
  webitel.contacts.Lookup created_by = 6;
  
  // Timestamp(milli) of the last Field update.
  // Take part in Etag generation.
  int64 updated_at = 7;
  
  // The user who performed last Update.
  webitel.contacts.Lookup updated_by = 8;

  // [VALUE]: --------------------------------------

  // True if the photo is a default photo; false if the photo is a user-provided photo.
  bool primary = 11;
  
  // File unique ID within 'storage' service
  int64 photo_id = 12;
  
  // The URL of the photo.
  // You can change the desired size by appending
  // a query parameter sz={size} at the end of the url,
  // where {size} is the size in pixels.
  // Example: https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50
  string photo_url = 13;

}

// Input of the photo.
message InputPhoto {

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    // PUT /contacts/{source.id}/photos/{etag}
    // example: "{\"ver\":\"1679792219687\",\"primary\":true,\"file_url\":\"https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg\"}"
    json_schema: {
      required: ["file_url"]
    }
  };

  // [META]: --------------------------------------

  // Unique ID of the latest version of an existing association.
  string etag = 1
  [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    field_configuration: {
      path_param_name: "etag"
    }
  }];

  // [VALUE]: --------------------------------------

  // True if the photo is a default photo; false if the photo is a user-provided photo.
  bool primary = 11;
  
  // File unique ID within 'storage' service
  int64 photo_id = 12;
  
  // The URL of the photo.
  // You can change the desired size by appending
  // a query parameter sz={size} at the end of the url,
  // where {size} is the size in pixels.
  // Example: https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50
  string photo_url = 13;
}


// Photos service catalog.
service Photos {

  // Upload an image or photo
  rpc UploadPhoto(stream UploadMediaRequest) returns (stream UploadMediaResponse)
  {
    // option (google.api.http) = {
    //   post: "/contacts/photos"
    // };
    // // https://swagger.io/docs/specification/2-0/file-upload/
    // option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    //   // POST /contacts/photos
    //   // example: "{\"ver\":\"1679792219687\",\"primary\":true,\"file_url\":\"https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg\"}"
    //   // tags: ["Photos"]
    //   consumes: "multipart/form-data"
    // };
  }

  // Locate the contact's photo link.
  rpc LocatePhoto(LocatePhotoRequest) returns (Photo) {
    option (google.api.http) = {
      get: "/contacts/{contact_id}/photos/{id}"
    };
  }

  // Search the contact's photo(s)
  rpc SearchPhotos(SearchPhotosRequest) returns (PhotoList)
  {
    option (google.api.http) = {
      get: "/contacts/{contact_id}/photos"
    };
  }
  // Link photo(s) with the contact
  rpc CreatePhotos(CreatePhotosRequest) returns (PhotoList)
  {
    option (google.api.http) = {
      post: "/contacts/{contact_id}/photos"
      body: "input"
    };
  }
  // Reset the contact's photos to fit given data set. 
  rpc UpdatePhotos(UpdatePhotosRequest) returns (PhotoList)
  {
    option (google.api.http) = {
      put: "/contacts/{contact_id}/photos"
      body: "input"
    };
  }
  // Update the contact's photo link details
  rpc UpdatePhoto(UpdatePhotoRequest) returns (Photo)
  {
    option (google.api.http) = {
      put: "/contacts/{contact_id}/photos/{input.etag}"
      body: "input"
      additional_bindings: {
        patch: "/contacts/{contact_id}/photos/{input.etag}"
        body: "input"
      }
    };
  }
  // Remove the contact's photo link(s)
  rpc DeletePhotos(DeletePhotosRequest) returns (PhotoList)
  {
    option (google.api.http) = {
      delete: "/contacts/{contact_id}/photos"
      // response_body: "data"
    };
  }
  // Remove the contact's photo
  rpc DeletePhoto(DeletePhotoRequest) returns (Photo)
  {
    option (google.api.http) = {
      delete: "/contacts/{contact_id}/photos/{etag}"
    };
  }
}



// Photo dataset.
message PhotoList {

  // option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
  //   example: ""
  // };

  // Photo dataset page.
  repeated Photo data = 1;
  // The page number of the partial result.
  int32 page = 2;
  // Indicates that this is a partial result.
  // More data available upon query: ?size=${data.len}&page=${page++}
  bool next = 3;
}

// Locate single Link by unique IDentifier.
message LocatePhotoRequest {

  // ------- Result Options ------

  // Fields to be retrieved into result.
  repeated string fields = 1;

  // ------- Locate Options ------ //
  
  // Link contact ID.
  string contact_id = 2;
  
  // Link unique ID.
  string id = 3
  [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    // format: "int64"
    // pattern: "^[1-9](\\d){0,19}$"
    required: ["id"]
  }];

}


message SearchPhotosRequest {
  
  // ------- Search Options ------
  
  // Page number of result dataset records. offset = (page*size)
  int32 page = 2;
  
  // Size count of records on result page. limit = (size++)
  int32 size = 1;

  // Search term: email address.
  // `?` - matches any one character
  // `*` - matches 0 or more characters
  string q = 6;
  
  // Sort the result according to fields.
  repeated string sort = 3;

  // Fields to be retrieved into result.
  repeated string fields = 4;

  // ------- Record's Filters ------
  
  // The Contact ID linked with.
  string contact_id = 5;

  // Link(s) with unique ID only.
  repeated string id = 7;

  // Default photos only.
  google.protobuf.BoolValue primary = 8;

}

message CreatePhotosRequest {

  // ------- Result Options -------

  // Fields to be retrieved into result of changes.
  repeated string fields = 1;

  // ------- Create Options -------

  // Link contact ID.
  string contact_id = 2;

  // Fixed set of photo(s) to be linked with the contact.
  // Photo(s) that conflicts(file_id) with already linked will be updated.
  repeated InputPhoto input = 3
  [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    example: "[{\"photo_id\":\"3587\"},{\"primary\":true,\"photo_url\":\"https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg\"}]"
  }];

}

message UpdatePhotosRequest {

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["input"]
    }
  };

  // --------- Result Options -------- //

  // Fields to be retrieved into result of changes.
  repeated string fields = 1;

  // ------- Reference Options ------- //

  // Link contact ID.
  string contact_id = 2;

  // --------- Update Options -------- //

  // Final set of photo(s) to be linked with the contact.
  // Photo(s) that are already linked with the contact
  // but not given in here will be removed.
  repeated InputPhoto input = 3
  [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    example: "[{\"id\":\"351354\",\"ver\":\"1679792219687\",\"photo_id\":\"3587\"},{\"primary\":true,\"photo_url\":\"https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg\"}]"
    min_items: 1
    unique_items: true
  }];

}

message UpdatePhotoRequest {

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["input"]
    }
  };

  // --------- PATCH Options -------- //

  // JSON PATCH fields mask.
  // List of JPath fields specified in body(input).
  repeated string x_json_mask = 1
  [(google.api.field_visibility) = {
    restriction: "PREVIEW"
  },
  (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    read_only: true
    pattern: "^$"
  }];

  // --------- Result Options -------- //

  // Fields to be retrieved into result of changes.
  repeated string fields = 2;

  // ------- Reference Options ------- //

  // Link contact ID.
  string contact_id = 3;

  // --------- Update Options -------- //

  // NEW Update of the email address link.
  InputPhoto input = 4;

}

message DeletePhotosRequest {
  
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["etag"]
    }
  };

  // --------- Result Options -------- //

  // Fields to be retrieved into result of changes.
  repeated string fields = 1;

  // ------- Reference Options ------- //

  // Link(s) contact ID.
  string contact_id = 2;

  // --------- Delete Options -------- //

  // Set of linked ID(s) to be removed.
  repeated string etag = 3
  [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    // format: "int64"
    min_items: 1
    unique_items: true
    // pattern: "^[1-9](\\d){0,19}$"
    // field_configuration: {
    //   path_param_name: "id_or_number"
    // }
  }];

}

message DeletePhotoRequest {
  
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["etag"]
    }
  };

  // --------- Result Options -------- //

  // Fields to be retrieved into result of changes.
  repeated string fields = 1;

  // ------- Reference Options ------- //

  // Link contact ID.
  string contact_id = 2;

  // Unique link ID to be removed.
  string etag = 3
  [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    // format: "int64"
    // pattern: "^[1-9](\\d){0,19}$"
    // field_configuration: {
    //   path_param_name: "id"
    // }
  }];

  

}