syntax="proto3";

package api;

option go_package = "webitel.go/api;api";

// option go_package = "webitel.go/auth/proto;oauth";

// OAuth 2.0 Access Token Response compatible
message AccessToken {
    // REQUIRED. The access token issued by the authorization server.
    string access_token = 1 [ json_name = "access_token" ];
    // REQUIRED. The type of the token issued. Value is case insensitive.
    string token_type = 2 [ json_name = "token_type" ];
    // RECOMMENDED. The lifetime in seconds of the access token.
    int32 expires_in = 3 [ json_name = "expires_in" ];
    // OPTIONAL. The refresh token, which can be used to obtain
    // new access tokens using the same authorization grant.
    string refresh_token = 4 [ json_name = "refresh_token" ];
    // OPTIONAL, if identical to the scope requested by the client;
    // otherwise, REQUIRED. The scope of the access token.
    // repeated string scope = 5 [ json_name = "scope" ];
    // REQUIRED if the "state" parameter was present in the client
    // authorization request. The exact value received from the client.
    string state = 5 [ json_name = "state" ];
}

// OAuth 2.0 authorization service 
service OAuth2 {

    // The authorization endpoint is used to interact with the resource
    // owner and obtain an authorization grant.
    rpc Authorize(AuthorizationRequest) returns (AuthorizationResponse) {
        // option (google.api.http) = {
        //     get: "/oauth/authorize"
        //     additional_bindings {
        //         post: "/oauth/authorize"
        //         body: "*"
        //     }
        // };
    }

    // The Token endpoint is used by the client to obtain an access token
    // by presenting its authorization grant or refresh token. The token
    // endpoint is used with every authorization grant except for the
    // implicit grant type (since an access token is issued directly).
    rpc Token(AccessTokenRequest) returns (AccessToken) {
        // option (google.api.http) = {
        //     post: "/oauth/token"
        //     body: "*"
        //     // additional_bindings {
        //     //     get: "/oauth/token"
        //     // }
        // };
    }
}

message ErrorResponse {
    string error = 1;
    string error_description = 2;
    string error_uri = 3;
    string state = 4;
    // ---------------------------------------------------------------------
    // HTTP/1.1 302 Found
    //  Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
    //  &state=xyz
}

enum AuthorizationType {
     CODE = 0;
     TOKEN = 1;
}

message AuthorizationRequest {
    // AuthorizationType response kind
    string response_type = 1;
    string client_id = 2;
    string redirect_uri = 3;
    repeated string scope = 4;
    string state = 5;
}

message AuthorizationCode {
    // REQUIRED. The authorization code generated by the
    // authorization server. The authorization code MUST expire
    // shortly after it is issued to mitigate the risk of leaks.
    // A maximum authorization code lifetime of 10 minutes is
    // RECOMMENDED. The client MUST NOT use the authorization code
    // more than once. If an authorization code is used more than
    // once, the authorization server MUST deny the request and SHOULD
    // revoke (when possible) all tokens previously issued based on
    // that authorization code. The authorization code is bound to
    // the client identifier and redirection URI.
    string code = 1;
    // REQUIRED if the "state" parameter was present in the client
    // authorization request. The exact value received from the client.
    string state = 2;
    // ---------------------------------------------------------------------
    // HTTP/1.1 302 Found
    //  Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
    //  &state=xyz
}

message AuthorizationResponse {
    oneof result {
        ErrorResponse error = 1;
        AuthorizationCode code = 2;
        AccessToken token = 3;
    }
}

message AccessTokenRequest {
    // REQUIRED
    string grant_type = 1 [ json_name = "grant_type" ];
    // ClientCredentials (grant_type=client_credentials)
    string client_id = 2 [ json_name = "client_id" ];
    string client_secret = 3 [ json_name = "client_secret" ];
    // OPTIONAL
    repeated string scope = 4 [ json_name = "scope" ];
    // AuthorizationCode (grant_type=authorization_code)
    string redirect_uri = 5 [ json_name = "redirect_uri" ];
    string code = 6 [ json_name = "code" ];
    // PasswordCredentials (grant_type=password)
    string domain = 7 [ json_name = "domain" ];
    string username = 8 [ json_name = "username" ];
    string password = 9 [ json_name = "password" ];
    // Refreshing (grant_type=refresh_token)
    string refresh_token = 10 [ json_name = "refresh_token" ];
    // :scope
    // // DomainCertificate (grant_type=certificate)
    // string certificate = 11 [ json_name = "certificate" ];
    // // :scope
    
}

// Authorization Grant
enum AuthorizationGrant {
    // Authorization Code
    authorization_code = 0;
    // Implicit
    implicit = 1;
    // Resource Owner Password Credentials
    password = 2;
    // Client Credentials
    client_credentials = 3;
    // Refresh
    refresh_token = 4;
    // // Domain Certificate
    // certificate = 5;
}