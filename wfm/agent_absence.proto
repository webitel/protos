syntax = "proto3";

package wfm;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "proto/webitel/option.proto";
import "lookup.proto";

option go_package = "github.com/webitel/protos/wfm;wfm";

service AgentAbsenceService {
  option (option.objclass) = "agent_absences";

  // Creates one-day-absence for one agent.
  rpc CreateAgentAbsence(CreateAgentAbsenceRequest) returns (CreateAgentAbsenceResponse) {
    option (option.access) = ACTION_CREATE;
    option (google.api.http) = {
      post: "/wfm/agents/{agent_id}/absences"
      body: "*"
    };
  }

  // Reads one absence per agent by its id.
  rpc ReadAgentAbsence(ReadAgentAbsenceRequest) returns (ReadAgentAbsenceResponse) {
    option (option.access) = ACTION_READ;
    option (google.api.http) = {get: "/wfm/agents/{agent_id}/absences/{id}"};
  }

  // Searches agent absences by filters.
  rpc SearchAgentAbsence(SearchAgentAbsenceRequest) returns (SearchAgentAbsenceResponse) {
    option (option.access) = ACTION_READ;
    option (google.api.http) = {get: "/wfm/agents/{agent_id}/absences"};
  }

  // Updates agent concrete absence by its id.
  rpc UpdateAgentAbsence(UpdateAgentAbsenceRequest) returns (UpdateAgentAbsenceResponse) {
    option (option.access) = ACTION_UPDATE;
    option (google.api.http) = {
      put: "/wfm/agents/{agent_id}/absences/{item.id}"
      body: "*"
    };
  }

  // Deletes agent concrete absence by its id.
  rpc DeleteAgentAbsence(DeleteAgentAbsenceRequest) returns (DeleteAgentAbsenceResponse) {
    option (option.access) = ACTION_DELETE;
    option (google.api.http) = {delete: "/wfm/agents/{agent_id}/absences/{id}"};
  }

  // Creates absences for multiple specified agents.
  rpc CreateAgentsAbsences(CreateAgentsAbsencesRequest) returns (CreateAgentsAbsencesResponse) {
    option (option.access) = ACTION_CREATE;
    option (google.api.http) = {
      post: "/wfm/agents/absences"
      body: "*"
    };
  }

  // Searches absences by filters.
  rpc SearchAgentsAbsences(SearchAgentsAbsencesRequest) returns (SearchAgentsAbsencesResponse) {
    option (option.access) = ACTION_READ;
    option (google.api.http) = {get: "/wfm/agents/absences"};
  }
}

message CreateAgentAbsenceRequest {
  int64 agent_id = 1;
  Absence item = 2 [(buf.validate.field).required = true];
}

message CreateAgentAbsenceResponse {
  Absence item = 1;
}

message ReadAgentAbsenceRequest {
  int64 id = 1;
  int64 agent_id = 2;
}

message ReadAgentAbsenceResponse {
  Absence item = 1;
}

message SearchAgentAbsenceRequest {
  int64 agent_id = 1;
  optional int32 page = 2;
  optional int32 size = 3;
  optional string sort = 4;
  repeated string fields = 5;
  repeated string filters = 6;
}

message SearchAgentAbsenceResponse {
  repeated Absence items = 1;
}

message UpdateAgentAbsenceRequest {
  int64 agent_id = 1;
  Absence item = 2;
}

message UpdateAgentAbsenceResponse {
  Absence item = 1;
}

message DeleteAgentAbsenceRequest {
  int64 id = 1;
  int64 agent_id = 2;
}

message DeleteAgentAbsenceResponse {
  int64 id = 1;
}

message CreateAgentsAbsencesRequest {
  message absentType {
    AbsenceType type_id = 1 [(buf.validate.field).enum = {defined_only: true, in: [1, 2, 3]}];
    int64 date_from = 2 [(buf.validate.field).int64.gt = 0];
    int64 date_to = 3 [(buf.validate.field).int64.gt = 0];

    option (buf.validate.message).cel = {
      id: "absent_at.filter",
      message: "date_to should be greater than date_from",
      expression: "this.date_to >= this.date_from"
    };
  }

  repeated absentType items = 1 [(buf.validate.field).repeated.min_items = 1];
  repeated int64 agent_ids = 2 [(buf.validate.field).repeated.min_items = 1];
}

message CreateAgentsAbsencesResponse {
  repeated AgentAbsences items = 1;
}

message SearchAgentsAbsencesRequest {
  optional string q = 1; // Searches by agent name.
  optional int32 page = 2;
  optional int32 size = 3;
  optional string sort = 4;
  repeated string fields = 5;
  repeated string filters = 6;
}

message SearchAgentsAbsencesResponse {
  repeated AgentAbsences items = 1;
  bool next = 2;
}

message AgentAbsences {
  LookupEntity agent = 1;
  repeated Absence absences = 2;
}

enum AbsenceType {
  ABSENCE_TYPE_UNSPECIFIED = 0;
  ABSENCE_TYPE_DAYOFF = 1;
  ABSENCE_TYPE_VACATION = 2;
  ABSENCE_TYPE_SICKDAY = 3;
}

message Absence {
  int64 id = 1;
  int64 domain_id = 2;
  int64 created_at = 3;
  LookupEntity created_by = 4;
  int64 updated_at = 5;
  LookupEntity updated_by = 6;

  AbsenceType type_id = 7 [(buf.validate.field).enum = {defined_only: true, in: [1, 2, 3]}];
  int64 absent_at = 8 [(buf.validate.field).int64.gt = 0];
}
