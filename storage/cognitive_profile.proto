syntax = "proto3";

option go_package = "github.com/webitel/protos/storage";

package storage;

import "engine/const.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

service CognitiveProfileService {
  rpc CreateCognitiveProfile (CreateCognitiveProfileRequest) returns (CognitiveProfile) {
    option (google.api.http) = {
      post: "/storage/cognitive_profiles"
      body: "*"
    };
  }

  rpc SearchCognitiveProfile(SearchCognitiveProfileRequest) returns (ListCognitiveProfile) {
    option (google.api.http) = {
      get: "/storage/cognitive_profiles"
    };
  }

  rpc ReadCognitiveProfile(ReadCognitiveProfileRequest) returns (CognitiveProfile) {
    option (google.api.http) = {
      get: "/storage/cognitive_profiles/{id}"
    };
  }

  rpc UpdateCognitiveProfile(UpdateCognitiveProfileRequest) returns (CognitiveProfile) {
    option (google.api.http) = {
      put: "/storage/cognitive_profiles/{id}"
      body: "*"
    };
  }

  rpc PatchCognitiveProfile(PatchCognitiveProfileRequest) returns (CognitiveProfile) {
    option (google.api.http) = {
      patch: "/storage/cognitive_profiles/{id}"
      body: "*"
    };
  }

  // Remove BackendProfile
  rpc DeleteCognitiveProfile(DeleteCognitiveProfileRequest) returns (CognitiveProfile) {
    option (google.api.http) = {
      delete: "/storage/cognitive_profiles/{id}"
    };
  }
}

enum ServiceType {
  STT = 0;
  TTS = 1;
}

enum ProviderType {
  Microsoft = 0;
}

message CognitiveProfile {
  int64 id = 1;
  int64 created_at = 2;
  engine.Lookup created_by = 3;
  int64 updated_at = 4;
  engine.Lookup updated_by = 5;

  ProviderType provider = 6;
  map<string,string> properties = 7;
  bool enabled = 8;
  string name = 9;
  string description = 10;
  ServiceType service = 11;
  bool default = 12;
}

message CreateCognitiveProfileRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "Create cognitive profile request body"
      description: "Create cognitive profile request body for TTS and TTS"
      required: ["name", "provider", "service", "properties"]
    }
  };
  ProviderType provider = 1;
  map<string,string> properties = 2;
  bool enabled = 3;
  string name = 4;
  string description = 5;
  ServiceType service = 6;
  bool default = 8;
}

message SearchCognitiveProfileRequest {
  int32 page = 1;
  int32 size = 2;
  string q = 3;

  string sort = 4;
  repeated string fields = 5;

  repeated int64 id = 6;
  repeated ServiceType service = 7;
}

message ListCognitiveProfile {
  bool next = 1;
  repeated CognitiveProfile items = 2;
}

message ReadCognitiveProfileRequest {
  int64 id = 1;
}

message UpdateCognitiveProfileRequest {
  int64 id = 1;

  ProviderType provider = 2;
  map<string,string> properties = 3;
  bool enabled = 4;
  string name = 5;
  string description = 6;
  ServiceType service = 7;
  bool default = 8;
}

message PatchCognitiveProfileRequest {
  int64 id = 1;

  ProviderType provider = 2;
  map<string,string> properties = 3;
  bool enabled = 4;
  string name = 5;
  string description = 6;
  ServiceType service = 7;
  bool default = 8;

  repeated string fields = 9;
}

message DeleteCognitiveProfileRequest {
  int64 id = 1;
}