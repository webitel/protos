syntax = "proto3";

package fs;

service Api {
    rpc Originate(OriginateRequest) returns (OriginateResponse) {}
    rpc Execute(ExecuteRequest) returns (ExecuteResponse) {}
    rpc SetVariables(SetVariablesRequest) returns (SetVariablesResponse) {}
    rpc Bridge(BridgeRequest) returns (BridgeResponse) {}
    rpc BridgeCall(BridgeCallRequest) returns (BridgeCallResponse) {}
    rpc StopPlayback(StopPlaybackRequest) returns (StopPlaybackResponse) {}
    rpc Hangup(HangupRequest) returns (HangupResponse) {}
    rpc HangupMatchingVars(HangupMatchingVarsReqeust) returns (HangupMatchingVarsResponse) {}
    rpc Queue(QueueRequest) returns (QueueResponse) {}
    rpc HangupMany(HangupManyRequest) returns (HangupManyResponse) {}
    rpc Hold(HoldRequest) returns (HoldResponse) {}
    rpc UnHold(UnHoldRequest) returns (UnHoldResponse) {}
    rpc SetProfileVar(SetProfileVarRequest) returns (SetProfileVarResponse) {}
    rpc ConfirmPush(ConfirmPushRequest) returns (ConfirmPushResponse) {}
    rpc Broadcast(BroadcastRequest) returns (BroadcastResponse) {}
    rpc SetEavesdropState(SetEavesdropStateRequest) returns (SetEavesdropStateResponse) {}
    rpc BlindTransfer(BlindTransferRequest) returns (BlindTransferResponse) {}
    rpc BreakPark(BreakParkRequest) returns (BreakParkResponse) {}
}

message BreakParkRequest {
    string id = 1;
    map<string,string> variables = 2;
}
message BreakParkResponse {
    bool ok = 1;
}

message BlindTransferRequest {
    string id = 1;
    string destination = 2;
    map<string,string> variables = 3;
    string dialplan = 4;
    string context = 5;
}

message BlindTransferResponse {
    ErrorExecute error = 1;
}

message SetEavesdropStateRequest {
    string id = 1;
    string state = 2;
}

message SetEavesdropStateResponse {
    ErrorExecute error = 1;
}

message BroadcastRequest {
    string id = 1;
    string args = 2;
    bool wait_for_answer = 3;
    string leg = 4;
}

message BroadcastResponse {
    string data = 1;
    ErrorExecute error = 2;
}

message ConfirmPushRequest {
    string id = 1;
}

message ConfirmPushResponse {
    ErrorExecute error = 1;
}

message SetProfileVarRequest {
    string id = 1;
    map<string,string> variables = 2;
}

message SetProfileVarResponse {

}

message StopPlaybackRequest {
    string id = 1;
}

message StopPlaybackResponse {

}

message BridgeCallRequest {
    string leg_a_id = 1;
    string leg_b_id = 2;
    map<string,string> variables = 3;
}

message BridgeCallResponse {
    string uuid = 1;
    ErrorExecute error = 2;
}

message HoldRequest {
    repeated string id = 1;
}

message HoldResponse {
    repeated string id = 1;
}

message UnHoldRequest {
    repeated string id = 1;
}

message UnHoldResponse {
    repeated string id = 1;
}

message HangupManyRequest {
    repeated string id = 1;
    string cause = 2;
}

message HangupManyResponse {
    repeated string id = 1;
}

message QueueRequest {
    string id = 1;
    map<string,string> variables = 2;
    string playback_file = 3;
    int32 playback_args = 4;
}

message QueueResponse {
    ErrorExecute error = 1;
}

message ErrorExecute {
    enum Type {
        ERROR = 0;
        USAGE = 1;
    }
    string message = 1;
    Type type = 2;
}

message ExecuteRequest {
    string command = 1;
    string args = 2;
}

message ExecuteResponse {
    string data = 1;
    ErrorExecute error = 2;
}

message HangupRequest {
    string uuid = 1;
    string cause = 2;
    bool reporting = 3;
    map<string, string> variables = 4;
}

message HangupResponse {
    ErrorExecute error = 1;
}

message OriginateRequest {
    enum Strategy {
        FAILOVER = 0;
        MULTIPLE = 1;
    }

    message Extension {
        string appName = 1;
        string args = 2;
    }

    map<string, string> variables = 1;
    repeated string endpoints = 2;
    Strategy strategy = 3;
    string destination = 4;
    int32 timeout = 5;
    string callerNumber = 6;
    string callerName = 7;
    string context = 8;
    string dialplan = 9;
    repeated Extension extensions = 10;
    string check_id = 11;
}

message OriginateResponse {
    string uuid = 1;
    ErrorExecute error = 2;
    int32 error_code = 3;
}

message BridgeRequest {
    string leg_a_id = 1;
    string leg_b_id = 2;
    string leg_b_reserve_id = 3;
}

message BridgeResponse {
    string uuid = 1;
    ErrorExecute error = 2;
}

message SetVariablesRequest {
    string uuid = 1;
    map<string, string> variables = 2;
}

message SetVariablesResponse {
    ErrorExecute error = 1;
}

message HangupMatchingVarsReqeust {
    string cause = 1;
    map<string, string> variables = 2;
}

message HangupMatchingVarsResponse {
    int32 count = 1;
}