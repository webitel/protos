syntax = "proto3";
package webitel.cases;

option go_package = "github.com/webitel/cases/api/cases;cases";

import "general.proto";
import "google/api/visibility.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";
import "proto/webitel/option.proto";  // Added import for option.proto

// Represents a source type for the source entity.
enum SourceType {
  // Unspecified source type.
  TYPE_UNSPECIFIED = 0;
  // Phone call source type.
  CALL = 1;
  // Chat source type.
  CHAT = 2;
  // Social media source type.
  SOCIAL_MEDIA = 3;
  // Email source type.
  EMAIL = 4;
  // API source type.
  API = 5;
  // Manual source type.
  MANUAL = 6;
}

// Represents a source entity in the contact system.
message Source {
  // Unique identifier of the source
  int64 id = 1;
  // Name of the source
  string name = 2;
  // Description of the source
  string description = 4;
  // Source type of the source
  SourceType type = 5;
  // CreatedAt timestamp of the source
  int64 created_at = 20;
  // UpdatedAt timestamp of the source
  int64 updated_at = 21;
  // CreatedBy user of the source
  general.Lookup created_by = 22;
  // UpdatedBy user of the source
  general.Lookup updated_by = 23;
}

// A list of sources.
message SourceList {
  // Page number of the partial result.
  int32 page = 1;
  // Have more records.
  bool next = 2;
  // List of sources.
  repeated Source items = 3;
}

// Request message for creating a new source.
message CreateSourceRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["name", "type"]
    }
  };

  InputSource input = 1;
  repeated string fields = 2;
}

message InputSource {
  // The name of the source.
  string name = 1;
  // The description of the source.
  string description = 2;
  // The source type of the source.
  SourceType type = 3;
}

// Request message for updating an existing source.
message UpdateSourceRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };

  int64 id = 1;
  InputSource input = 2;
  repeated string fields = 3;

  // ---- JSON PATCH fields mask ----
  // List of JPath fields specified in body(input).
  repeated string x_json_mask = 4
  [(google.api.field_visibility) = {
    restriction: "PREVIEW" // "INTERNAL"
  },
  (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    read_only: true
    pattern: "^$"
  }];
}

// Request message for deleting a source.
message DeleteSourceRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };

  // The unique ID of the source to delete.
  int64 id = 1;
}

// Request message for listing sources.
message ListSourceRequest {
  // Page number of result dataset records. offset = (page*size)
  int32 page = 1;
  // Size count of records on result page. limit = (size++)
  int32 size = 2;
  // Fields to be retrieved as a result.
  repeated string fields = 3;
  // Sort the result according to fields.
  string sort = 4;
  // Filter by unique IDs.
  repeated int64 id = 5;
  // Search query string for filtering by name. Supports:
  // - Wildcards (*) for substring matching
  // - Placeholder (?) for single character substitution
  // - Exact match for full names
  string q = 6;
  // Filter by source type.
  repeated SourceType type = 7;
}

// Request message for locating a source by ID.
message LocateSourceRequest {
  // The unique ID of the source to locate.
  int64 id = 1;
  // Fields to be retrieved into result.
  repeated string fields = 2;
}

// Response message for locating a source.
message LocateSourceResponse {
  // The located source.
  Source source = 1;
}

service Sources {
  option (option.objclass) = "dictionaries";  // Added class option for the service

  // RPC method to list or search sources.
  rpc ListSources(ListSourceRequest) returns (SourceList) {
    option (google.api.http) = {
      get: "/cases/sources"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Retrieve a list of sources or search sources"
    };
    option (option.access) = ACTION_READ;  // Added access option for read action
  }

  // RPC method to create a new source.
  rpc CreateSource(CreateSourceRequest) returns (Source) {
    option (google.api.http) = {
      post: "/cases/sources"
      body: "input"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new source"
    };
    option (option.access) = ACTION_CREATE;  // Added access option for create action
  }

  // RPC method to update an existing source.
  rpc UpdateSource(UpdateSourceRequest) returns (Source) {
    option (google.api.http) = {
      put: "/cases/sources/{id}"
      body: "input"
      additional_bindings {
        patch: "/cases/sources/{id}"
        body: "input"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update an existing source"
    };
    option (option.access) = ACTION_UPDATE;  // Added access option for update action
  }

  // RPC method to delete a source.
  rpc DeleteSource(DeleteSourceRequest) returns (Source) {
    option (google.api.http) = {
      delete: "/cases/sources/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a source"
    };
    option (option.access) = ACTION_DELETE;  // Added access option for delete action
  }

  // RPC method to locate a source by ID.
  rpc LocateSource(LocateSourceRequest) returns (LocateSourceResponse) {
    option (google.api.http) = {
      get: "/cases/sources/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Locate a source by ID"
    };
    option (option.access) = ACTION_READ;  // Added access option for read action
  }
}
