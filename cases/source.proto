syntax = "proto3";
package webitel.cases;

option go_package = "github.com/webitel/cases/api/cases;cases";

import "general.proto";
import "google/api/visibility.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";
import "proto/webitel/option.proto";  // Added import for option.proto

// Represents a source type for the source entity.
enum SourceType {
  // Unspecified source type.
  TYPE_UNSPECIFIED = 0;
  // Phone call source type.
  CALL = 1;
  // Chat source type.
  CHAT = 2;
  // Social media source type.
  SOCIAL_MEDIA = 3;
  // Email source type.
  EMAIL = 4;
  // API source type.
  API = 5;
  // Manual source type.
  MANUAL = 6;
}

// Represents a source entity in the contact system.
message Source {
  // Unique identifier of the source
  int64 id = 1;
  // Name of the source
  string name = 2;
  // Description of the source
  string description = 4;
  // Source type of the source
  SourceType type = 5;
  // CreatedAt timestamp of the source
  int64 created_at = 20;
  // UpdatedAt timestamp of the source
  int64 updated_at = 21;
  // CreatedBy user of the source
  general.Lookup created_by = 22;
  // UpdatedBy user of the source
  general.Lookup updated_by = 23;
}

// A list of sources.
message SourceList {
  // Page number of the partial result.
  int32 page = 1;
  // Have more records.
  bool next = 2;
  // List of sources.
  repeated Source items = 3;
}


// Request message for creating a new Source entity with full JSONSchema OpenAPI options
message CreateSourceRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      // Required properties for the root schema object
      required: ["input"]

      // High-level title and description for schema documentation
      title: "Create Source Request"
      description: "Request for creating a new source with all available OpenAPI options"

      // Example default JSON value (escaped string)
      default: "{\"input\": {\"name\": \"New Source\", \"type\": \"CALL\"}}"

      // Marks the object as modifiable
      read_only: false

      // Verbose usage example for docs generation
      example: "{\"input\": {\"name\": \"Inbound Calls\", \"description\": \"Handles incoming calls\", \"type\": \"CALL\"}, \"fields\": [\"name\", \"type\"]}"

      // Restrict how many properties can exist in the object
      max_properties: 3
      min_properties: 1

      // Regex pattern that the top-level object must match (basic catch-all here)
      pattern: ".*"
    }
    // External documentation reference for this schema
    external_docs: {
      url: "https://schema.webitel.com/source-config";
      description: "Data source configuration schema documentation";
    }
  };

  // Main input payload for the source being created
  InputSource input = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      // Human-friendly field description
      description: "The input data for the source"

      // Field must be included in the request
      required: ["input"]

      // JSON-style string example of the field's structure
      example: "{\"name\": \"Inbound\", \"description\": \"For inbound communication\", \"type\": \"CALL\"}"

      // Marked as an object format for documentation clarity
      format: "object"

      read_only: false
    }
  ];

  // Optional list of specific fields to return after creation
  repeated string fields = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Specific fields to include in response"
      example: "[\"name\", \"type\"]"

      // Validation constraints on array size and uniqueness
      min_items: 1
      max_items: 50
      unique_items: true

      read_only: false
    }
  ];
}

// Input structure representing a new Source entity
message InputSource {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      // Metadata for the nested schema object
      title: "Input Source"
      description: "The data structure representing a source"
      required: ["name", "type"]
      default: "{\"name\": \"Default Source\", \"type\": \"CALL\"}"
      read_only: false
      example: "{\"name\": \"Inbound\", \"description\": \"Inbound customer calls\", \"type\": \"CALL\"}"
      max_properties: 5
      min_properties: 2
    }
    external_docs: {
      url: "https://api.example.com/docs/source-types";
      description: "Supported source types documentation";
    }
  };

  // Display name for the source
  string name = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The name of the source"
      min_length: 2
      max_length: 100
      pattern: "^[a-zA-Z0-9_\\- ]+$" // Alphanumeric + underscores, dashes, spaces
      example: "\"Inbound Calls\""
      default: "\"New Source\""
      read_only: false
      format: "string"
    }
  ];

  // Optional short description for context
  string description = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "A short description of the source"
      example: "\"Handles incoming calls from customers\""
      default: "\"No description provided\""
      min_length: 0
      max_length: 500
      read_only: false
      format: "string"
    }
  ];

  // Type of the source; restrictable to a fixed set of allowed values
  SourceType type = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "The type of the source"
      example: "\"CALL\""
      default: "\"CALL\""
      read_only: false
      format: "string"
      enum: ["CALL", "EMAIL", "CHAT"] // Enum values for OpenAPI schema
    }
  ];
}


// Request message for updating an existing source.
message UpdateSourceRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };

  int64 id = 1;
  InputSource input = 2;
  repeated string fields = 3;

  // ---- JSON PATCH fields mask ----
  // List of JPath fields specified in body(input).
  repeated string x_json_mask = 4
  [(google.api.field_visibility) = {
    restriction: "PREVIEW" // "INTERNAL"
  },
  (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    read_only: true
    pattern: "^$"
  }];
}

// Request message for deleting a source.
message DeleteSourceRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };

  // The unique ID of the source to delete.
  int64 id = 1;
}

// Request message for listing sources.
message ListSourceRequest {
  // Page number of result dataset records. offset = (page*size)
  int32 page = 1;
  // Size count of records on result page. limit = (size++)
  int32 size = 2;
  // Fields to be retrieved as a result.
  repeated string fields = 3;
  // Sort the result according to fields.
  string sort = 4;
  // Filter by unique IDs.
  repeated int64 id = 5;
  // Search query string for filtering by name. Supports:
  // - Wildcards (*) for substring matching
  // - Placeholder (?) for single character substitution
  // - Exact match for full names
  string q = 6;
  // Filter by source type.
  repeated SourceType type = 7;
}

// Request message for locating a source by ID.
message LocateSourceRequest {
  // The unique ID of the source to locate.
  int64 id = 1;
  // Fields to be retrieved into result.
  repeated string fields = 2;
}

// Response message for locating a source.
message LocateSourceResponse {
  // The located source.
  Source source = 1;
}

service Sources {
  option (option.objclass) = "dictionaries";  // Added class option for the service

  // RPC method to list or search sources.
  rpc ListSources(ListSourceRequest) returns (SourceList) {
    option (google.api.http) = {
      get: "/cases/sources"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Retrieve a list of sources or search sources"
    };
    option (option.access) = ACTION_READ;  // Added access option for read action
  }

  // RPC method to create a new source.
  rpc CreateSource(CreateSourceRequest) returns (Source) {
    option (google.api.http) = {
      post: "/cases/sources"
      body: "input"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new source"
    };
    option (option.access) = ACTION_CREATE;  // Added access option for create action
  }

  // RPC method to update an existing source.
  rpc UpdateSource(UpdateSourceRequest) returns (Source) {
    option (google.api.http) = {
      put: "/cases/sources/{id}"
      body: "input"
      additional_bindings {
        patch: "/cases/sources/{id}"
        body: "input"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update an existing source"
    };
    option (option.access) = ACTION_UPDATE;  // Added access option for update action
  }

  // RPC method to delete a source.
  rpc DeleteSource(DeleteSourceRequest) returns (Source) {
    option (google.api.http) = {
      delete: "/cases/sources/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a source"
    };
    option (option.access) = ACTION_DELETE;  // Added access option for delete action
  }

  // RPC method to locate a source by ID.
  rpc LocateSource(LocateSourceRequest) returns (LocateSourceResponse) {
    option (google.api.http) = {
      get: "/cases/sources/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Locate a source by ID"
    };
    option (option.access) = ACTION_READ;  // Added access option for read action
  }
}
