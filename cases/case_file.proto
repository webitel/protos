syntax = "proto3";

package webitel.cases;
option go_package = "github.com/webitel/cases/api/cases;cases";

import "general.proto";
import "google/api/annotations.proto";
import "proto/webitel/option.proto";

message CaseFile {
  general.Lookup author = 6; // contact of the creator
  File file = 7;
}


message CaseFileList {
  int64 page = 1;
  bool next = 2;
  repeated CaseFile items = 3;
}

message File {
  int64 id = 1; // storage.file id
  general.Lookup created_by = 2;
  int64 created_at = 3; // unixmilli
  int64 size = 4;
  string mime = 5; // MIME type
  string name = 6;
}


service CaseFiles {
  option (option.objclass) = "cases";
  /*   With Case   */
  rpc ListFiles(ListFilesRequest) returns (CaseFileList) {
    option (option.access) = ACTION_READ;
    option (google.api.http) = {
      get: "/cases/{case_etag}/files"
    };
  }
}

message ListFilesRequest {
  int32 page = 1;
  int32 size = 2;
  string q = 3; // covered by filters?
  repeated string qin = 4;
  string sort = 5;
  repeated string fields = 6;
  string filter = 7;
  // simple filter query language [SFQL]
  // ( -> start of the filter or filter node
  // ) -> end of the filter or the filter node
  // last ( -> always start of the filter
  // [ -> start of the operator
  // ] -> end of the operator
  // operands - simple strings, first string should always be a valid field name, second should
  // operators:
  // [and] [or] -- only applied to the filter node, after them always should be a ( as filter or another filter node
  // [eq], [gte], [gt], [lte], [lt], [regex], [neq] -- only applied to the filter, value after them and to the ) symbol considered as string
  //...?size=10&page=1&filter=((file[eq]fghj)[and](name[eq]yehor))[or])
//  oneof filters {
//    FilterNode node = 7;
//    Filter filter = 8;
//  }
  string case_etag = 9;
}