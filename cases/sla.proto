syntax = "proto3";
package webitel.cases;

option go_package = "github.com/webitel/cases/api/cases;cases";

import "general.proto";
import "google/api/visibility.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "proto/webitel/option.proto";  // Added import

// ReactionTime message represents the reaction time in hours and minutes
message ReactionTime {
  int32 hours = 1;
  int32 minutes = 2;
}

// ResolutionTime message represents the resolution time in hours and minutes
message ResolutionTime {
  int32 hours = 1;
  int32 minutes = 2;
}

// SLA message represents an SLA entity with metadata
message SLA {
  // Unique identifier of the SLA
  int64 id = 1;
  // Name of the SLA - required
  string name = 2;
  // Description of the SLA - optional
  string description = 3;
  // Validity period for the SLA - optional
  int64 valid_from = 4;
  int64 valid_to = 5;
  // Calendar ID from the "Calendars" dictionary - required
  general.Lookup calendar = 6;
  // Reaction time - required
  ReactionTime reaction_time = 7;
  // Resolution time - required
  ResolutionTime resolution_time = 8;
  // CreatedAt timestamp of the SLA
  int64 created_at = 20;
  // UpdatedAt timestamp of the SLA
  int64 updated_at = 21;
  // CreatedBy user of the SLA
  general.Lookup created_by = 22;
  // UpdatedBy user of the SLA
  general.Lookup updated_by = 23;
}

// InputSLA message for inputting SLA data
message InputSLA {
  // Name of the SLA
  string name = 2;
  // Description of the SLA
  string description = 3;
  // Validity period for the SLA
  google.protobuf.Timestamp valid_from = 4;
  google.protobuf.Timestamp valid_to = 5;
  // Calendar ID from the "Calendars" dictionary
  int64 calendar_id = 6;
  // Reaction time
  ReactionTime reaction_time = 7;
  // Resolution time
  ResolutionTime resolution_time = 8;
}

// SLAList message contains a list of SLA items with pagination
message SLAList {
  int32 page = 1;
  bool next = 2;
  repeated SLA items = 3;
}

// CreateSLARequest message for creating a new SLA
message CreateSLARequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["name", "calendar_id", "reaction_time", "resolution_time"]
    }
  };
  // InputSLA message for creating a new SLA
  // Name of the SLA
  string name = 2;
  // Description of the SLA
  string description = 3;
  // Validity period for the SLA
  google.protobuf.Timestamp valid_from = 4;
  google.protobuf.Timestamp valid_to = 5;
  // Calendar ID from the "Calendars" dictionary
  int64 calendar_id = 6;
  // Reaction time
  ReactionTime reaction_time = 7;
  // Resolution time
  ResolutionTime resolution_time = 8;
}

// UpdateSLARequest message for updating an existing SLA
message UpdateSLARequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };

  int64 id = 1;
  InputSLA input = 2;

  // ---- JSON PATCH fields mask ----
  // List of JPath fields specified in body(input).
  repeated string x_json_mask = 4
  [(google.api.field_visibility) = {
    restriction: "PREVIEW" // "INTERNAL"
  },
  (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    read_only: true
    pattern: "^$"
  }];
}

// DeleteSLARequest message for deleting an existing SLA
message DeleteSLARequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["sla_id"]
    }
  };
  int64 id = 1;
  int64 sla_id = 2;
}

// ListSLARequest message for listing or searching SLAs
message ListSLARequest {
  // Page number of result dataset records. offset = (page*size)
  int32 page = 1;
  // Size count of records on result page. limit = (size++)
  int32 size = 2;
  // Fields to be retrieved as a result.
  repeated string fields = 3;
  // Sort the result according to fields.
  repeated string sort = 4;
  // Filter by unique IDs.
  repeated int64 id = 5;
  // Search query string for filtering by name. Supports:
  // - Wildcards (*) for substring matching
  // - Placeholder (?) for single character substitution
  // - Exact match for full names
  string q = 6;
}

// LocateSLARequest message for locating a specific SLA by ID
message LocateSLARequest {
  int64 id = 1;
  repeated string fields = 2;
}

// LocateSLAResponse message contains a single SLA entity
message LocateSLAResponse {
  SLA sla = 1;
}

// SLAs service definition with RPC methods for managing SLAs
service SLAs {
  option (option.objclass) = "dictionaries";  // Added option for the service

  // RPC method to list or search SLAs
  rpc ListSLAs(ListSLARequest) returns (SLAList) {
    option (google.api.http) = {
      get: "/cases/slas"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Retrieve a list of SLAs or search SLA conditions"
    };
    option (option.access) = ACTION_READ;  // Added option for method access
  }

  // RPC method to create a new SLA
  rpc CreateSLA(CreateSLARequest) returns (SLA) {
    option (google.api.http) = {
      post: "/cases/slas"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new SLA"
    };
    option (option.access) = ACTION_CREATE;  // Added option for method access
  }

  // RPC method to update an existing SLA
  rpc UpdateSLA(UpdateSLARequest) returns (SLA) {
    option (google.api.http) = {
      put: "/cases/slas/{id}"
      body: "input"
      additional_bindings {
        patch: "/cases/slas/{id}"
        body: "input"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update an existing SLA"
    };
    option (option.access) = ACTION_UPDATE;  // Added option for method access
  }

  // RPC method to delete an existing SLA
  rpc DeleteSLA(DeleteSLARequest) returns (SLA) {
    option (google.api.http) = {
      delete: "/cases/slas/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete an SLA"
    };
    option (option.access) = ACTION_DELETE;  // Added option for method access
  }

  // RPC method to locate a specific SLA by ID
  rpc LocateSLA(LocateSLARequest) returns (LocateSLAResponse) {
    option (google.api.http) = {
      get: "/cases/slas/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Locate an SLA by ID"
    };
    option (option.access) = ACTION_READ;  // Added option for method access
  }
}
