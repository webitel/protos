syntax = "proto3";
package webitel.cases;

option go_package = "github.com/webitel/cases/api/cases;cases";

import "general.proto";
import "service.proto";
import "google/api/visibility.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";
import "proto/webitel/option.proto";




// Catalog message represents the main catalog entity with metadata
message Catalog {
  // Unique identifier for the catalog
  int64 id = 1;
  // Name of the catalog
  string name = 2;
  // Description of the catalog (optional)
  string description = 3;
  // Prefix used for case identification (optional)
  string prefix = 4;
  // Code for external integrations (optional)
  string code = 5;
  // State of the catalog (true for active, false for inactive)
  bool state = 6;
  // SLA associated with the catalog
  general.Lookup sla = 7;
  // Status associated with the catalog
  general.Lookup status = 8;
  // Close reason associated with the catalog
  general.Lookup close_reason = 9;
 // Teams associated with the catalog
  repeated general.Lookup teams = 11;
  // Skills associated with the catalog
  repeated general.Lookup skills = 12;
  // Timestamp when the catalog was created
  int64 created_at = 15;
  // Timestamp when the catalog was last updated
  int64 updated_at = 16;
  // User who created the catalog
  general.Lookup created_by = 17;
  // User who last updated the catalog
  general.Lookup updated_by = 18;
  // Service associated with the catalog
  repeated Service service = 10;
  // flag showing whether the catalog was searched
  bool searched = 20;
}

// CatalogList message contains a list of catalogs with pagination
message CatalogList {
  // Page number for pagination
  int32 page = 1;
  // Indicates if there are more pages
  bool next = 2;
  // List of catalog items
  repeated Catalog items = 3;
}

// InputCatalog message contains the fields for creating or updating a catalog
message InputCatalog {
  // Name of the catalog (required)
  string name = 1;
  // Description of the catalog (optional)
  string description = 2;
  // Prefix for case identification (optional)
  string prefix = 3;
  // Code for external integrations (optional)
  string code = 4;
  // State of the catalog (true for active, false for inactive)
  bool state = 5;
  // SLA ID associated with the catalog
  general.Lookup sla = 6;
  // Status ID associated with the catalog
  general.Lookup status = 7;
  // Close reason ID associated with the catalog
  general.Lookup close_reason = 8;
  // List of team IDs associated with the catalog
  repeated general.Lookup teams = 10;
  // List of skill IDs associated with the catalog
  repeated general.Lookup skills = 11;
}

// CreateCatalogRequest message for creating a new catalog
message CreateCatalogRequest {
  // Name of the catalog (required)
  string name = 1;
  // Description of the catalog (optional)
  string description = 2;
  // Prefix for case identification (optional)
  string prefix = 3;
  // Code for external integrations (optional)
  string code = 4;
  // State of the catalog (true for active, false for inactive)
  bool state = 5;
  // SLA ID associated with the catalog
  general.Lookup sla = 6;
  // Status ID associated with the catalog
  general.Lookup status = 7;
  // Close reason ID associated with the catalog
  general.Lookup close_reason = 8;
  // List of team IDs associated with the catalog
  repeated general.Lookup teams = 10;
  // List of skill IDs associated with the catalog
  repeated general.Lookup skills = 11;
}

// UpdateCatalogRequest message for updating an existing catalog
message UpdateCatalogRequest {
  // ID of the catalog to be updated
  int64 id = 1;
  // Input data for updating the catalog
  InputCatalog input = 2;

  // ---- JSON PATCH fields mask ----
  repeated string x_json_mask = 3
  [(google.api.field_visibility) = {
    restriction: "PREVIEW"
  },
  (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    read_only: true
    pattern: "^$"
  }];
}

// DeleteCatalogRequest message for deleting a catalog
message DeleteCatalogRequest {
  // ID of the catalog to be deleted
  repeated int64 id = 1;
}
// ListCatalogRequest message for listing catalogs
message ListCatalogRequest {
  // Page number for pagination
  int32 page = 1;

  // Number of records per page
  int32 size = 2;

  // Fields to be retrieved as a result.
  // If the user passes "-" as the value for fields,
  // it will retrieve all available fields for each catalog.
  repeated string fields = 3;

  // Sorting options by fields
  repeated string sort = 4;

   // List of IDs to filter the catalogs
   repeated int64 id = 5;

  // Search query string for filtering by name. Supports:
  // - Wildcards (*) for substring matching
  // - Placeholder (?) for single character substitution
  // - Exact match for full names
  string query = 6;

  // Filter by state (true for active, false for inactive)
  bool state = 7;

  // Filter by the depth of the hierarchy to retrieve services.
  // The depth indicates how many ancestor levels of services
  // will be included for each catalog.
  // - A depth of 0 includes only the direct catalog.
  // - A depth of 1 includes the catalog and its immediate services.
  // - By default the depth is limited by 3,
  //   meaning all nested services and sub-services will be included.
  int64 depth = 8;

  // Fields to be retrieved as a result for [SUBSERVICES].
  // If the user passes "-" as the value for fields,
  // it will retrieve all available fields for each catalog subservices.
  repeated string sub_fields = 9;
}


// LocateCatalogRequest message for locating a specific catalog by ID
message LocateCatalogRequest {
  // ID of the catalog to be located
  int64 id = 1;

  // Fields to be retrieved as a result.
  // If the user passes "-" as the value for fields,
  // it will retrieve all available fields for each catalog.
  repeated string fields = 2;

  // Fields to be retrieved as a result for [SUBSERVICES].
  // If the user passes "-" as the value for fields,
  // it will retrieve all available fields for each catalog subservices.
  repeated string sub_fields = 3;
}

// LocateCatalogResponse message contains a single catalog entity
message LocateCatalogResponse {
  // The located catalog
  Catalog catalog = 1;
}

// Service definition for managing catalog entities
service Catalogs {
  option (option.objclass) = "dictionaries";
  // RPC method to list or search catalogs
  rpc ListCatalogs(ListCatalogRequest) returns (CatalogList) {
    option (option.access) = ACTION_READ;
    option (google.api.http) = {
      get: "/cases/catalogs"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Retrieve a list of catalogs or search catalogs"
    };
  }

  // RPC method to create a new catalog
  rpc CreateCatalog(CreateCatalogRequest) returns (Catalog) {
    option (option.access) = ACTION_CREATE;
    option (google.api.http) = {
      post: "/cases/catalogs",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new catalog"
    };
  }

  // RPC method to update an existing catalog
  rpc UpdateCatalog(UpdateCatalogRequest) returns (Catalog) {
    option (option.access) = ACTION_UPDATE;
    option (google.api.http) = {
      put: "/cases/catalogs/{id}",
      body: "input"
      additional_bindings {
        patch: "/cases/catalogs/{id}"
        body: "input"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update an existing catalog"
    };
  }

  // RPC method to delete a catalog
  rpc DeleteCatalog(DeleteCatalogRequest) returns (CatalogList) {
    option (option.access) = ACTION_DELETE;
    option (google.api.http) = {
      delete: "/cases/catalogs/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a catalog"
    };
  }

  // RPC method to locate a specific catalog by ID
  rpc LocateCatalog(LocateCatalogRequest) returns (LocateCatalogResponse) {
    option (option.access) = ACTION_READ;
    option (google.api.http) = {
      get: "/cases/catalogs/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Locate a catalog by ID"
    };
  }
}
