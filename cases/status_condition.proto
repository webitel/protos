syntax = "proto3";
package webitel.cases;

option go_package = "github.com/webitel/cases/api/cases;cases";

import "general.proto";
import "google/api/visibility.proto";
import "google/protobuf/wrappers.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "proto/webitel/option.proto";  // Added import for option.proto

// StatusCondition message represents a status entity with metadata
message StatusCondition {
  // Unique identifier of the status condition
  int64 id = 1;
  // Name of the status condition
  string name = 2;
  // Description of the status condition
  string description = 3;
  // Initial status condition
  bool initial = 4;
  // Final status condition
  bool final = 5;
  // Status ID of the status condition
  int64 status_id = 6;
  // CreatedAt timestamp of the status condition
  int64 created_at = 20;
  // UpdatedAt timestamp of the status condition
  int64 updated_at = 21;
  // CreatedBy user of the status condition
  general.Lookup created_by = 22;
  // UpdatedBy user of the status condition
  general.Lookup updated_by = 23;
}

// InputStatusCondition message for inputting status condition data
message InputStatusCondition {
  // Name of the status condition
  string name = 2;
  // Description of the status condition
  string description = 3;
  // Initial status condition
  google.protobuf.BoolValue initial = 4;
  // Final status condition
  google.protobuf.BoolValue final = 5;
}

// StatusConditionList message contains a list of StatusCondition items with pagination
message StatusConditionList {
  int32 page = 1;
  bool next = 2;
  repeated StatusCondition items = 3;
}

// CreateStatusConditionRequest message for creating a new status
message CreateStatusConditionRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["name", "lookup_id"]
    }
  };

  int64 status_id = 1;
  string name = 2;
  string description = 3;
}

// UpdateStatusConditionRequest message for updating an existing status
message UpdateStatusConditionRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };

  int64 status_id = 1;
  int64 id = 2;
  InputStatusCondition input = 3;

  // ---- JSON PATCH fields mask ----
  // List of JPath fields specified in body(input).
  repeated string x_json_mask = 4
  [(google.api.field_visibility) = {
    restriction: "PREVIEW" // "INTERNAL"
  },
  (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    read_only: true
    pattern: "^$"
  }];
}

// DeleteStatusConditionRequest message for deleting an existing status
message DeleteStatusConditionRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["status_id"]
    }
  };
  int64 id = 1;
  int64 status_id = 2;
}

// ListStatusConditionRequest message for listing or searching statuses
message ListStatusConditionRequest {
    // Page number of result dataset records. offset = (page*size)
  int32 page = 1;
  // Size count of records on result page. limit = (size++)
  int32 size = 2;
  // Fields to be retrieved as a result.
  repeated string fields = 3;
  // Sort the result according to fields.
  string sort = 4;
  // Filter by unique IDs.
  repeated int64 id = 5;
  // Search query string for filtering by name. Supports:
  // - Wildcards (*) for substring matching
  // - Placeholder (?) for single character substitution
  // - Exact match for full names
  string q = 6;
  // Filter by Status Id.
  int64 status_id = 7;
}

// LocateStatusConditionRequest message for locating a specific status by ID
message LocateStatusConditionRequest {
  // ID of the status condition to be located
  int64 id = 1;
  // ID of the status to be located
  int64 status_id = 2;
  // Fields to be retrieved as a result.
  repeated string fields = 3;
}

// LocateStatusConditionResponse message contains a single status entity
message LocateStatusConditionResponse {
  StatusCondition status = 1;
}

// StatusConditions service definition with RPC methods for managing statuses
service StatusConditions {
  option (option.objclass) = "dictionaries";  // Added class option for the service

  // RPC method to list or search statuses
  rpc ListStatusConditions(ListStatusConditionRequest) returns (StatusConditionList) {
    option (google.api.http) = {
      get: "/statuses/{status_id}/status"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Retrieve a list of statuses or search status conditions"
    };
    option (option.access) = ACTION_READ;  // Added access option for read action
  }

  // RPC method to create a new status condition
  rpc CreateStatusCondition(CreateStatusConditionRequest) returns (StatusCondition) {
    option (google.api.http) = {
      post: "/statuses/{status_id}/status"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new status condition"
    };
    option (option.access) = ACTION_CREATE;  // Added access option for create action
  }

  // RPC method to update an existing status condition
  rpc UpdateStatusCondition(UpdateStatusConditionRequest) returns (StatusCondition) {
    option (google.api.http) = {
      put: "/statuses/{status_id}/status/{id}"
      body: "input"
      additional_bindings {
        patch: "/statuses/{status_id}/status/{id}"
        body: "input"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update an existing status condition"
    };
    option (option.access) = ACTION_UPDATE;  // Added access option for update action
  }

  // RPC method to delete an existing status condition
  rpc DeleteStatusCondition(DeleteStatusConditionRequest) returns (StatusCondition) {
    option (google.api.http) = {
      delete: "/statuses/{status_id}/status/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a status condition"
    };
    option (option.access) = ACTION_DELETE;  // Added access option for delete action
  }

  // RPC method to locate a specific status condition by ID
  rpc LocateStatusCondition(LocateStatusConditionRequest) returns (LocateStatusConditionResponse) {
    option (google.api.http) = {
      get: "/statuses/{status_id}/status/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Locate a status condition by ID"
    };
    option (option.access) = ACTION_READ;  // Added access option for read action
  }
}
