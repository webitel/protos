syntax = "proto3";
package webitel.cases;

option go_package = "github.com/webitel/cases/api/cases;cases";

import "general.proto";
import "google/api/annotations.proto";
import "google/api/visibility.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// Status message represents a status entity with metadata
message Status {
    // Unique identifier of the close reason
    int64 id = 1;
    // Name of the close reason
    string name = 2;
    // Description of the close reason
    string description = 4;
    // CreatedAt timestamp of the close reason
    int64 created_at = 20;
    // UpdatedAt timestamp of the close reason
    int64 updated_at = 21;
    // CreatedBy user of the close reason
    general.Lookup created_by = 22;
    // UpdatedBy user of the close reason
    general.Lookup updated_by = 23;
}

// StatusList message contains a list of Status items with pagination
message StatusList {
  int32 page = 1;
  bool next = 2;
  repeated Status items = 3;
}

// CreateStatusRequest message for creating a new status
message CreateStatusRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["name"]
    }
  };

  string name = 1;
  string description = 3;
}

message InputStatus{
  string name = 1;
  string description = 2;
}
// UpdateStatusRequest message for updating an existing status
message UpdateStatusRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };

  int64 id = 1;
  InputStatus input = 2;

    // ---- JSON PATCH fields mask ----
  // List of JPath fields specified in body(input).
  repeated string x_json_mask = 3
  [(google.api.field_visibility) = {
    restriction: "PREVIEW" // "INTERNAL"
  },
  (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    read_only: true
    pattern: "^$"
  }];
}



// DeleteStatusRequest message for deleting an existing status
message DeleteStatusRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };

  int64 id = 1;
}

// ListStatusesRequest message for listing or searching statuses
message ListStatusRequest {
  // Page number of result dataset records. offset = (page*size)
  int32 page = 1;
  // Size count of records on result page. limit = (size++)
  int32 size = 2;
  // Fields to be retrieved as a result.
  repeated string fields = 3;
  // Sort the result according to fields.
  repeated string sort = 4;
  // Filter by unique IDs.
  repeated int64 id = 5;
  // Search query string for filtering by name. Supports:
  // - Wildcards (*) for substring matching
  // - Placeholder (?) for single character substitution
  // - Exact match for full names
  string q = 6;
}

// LocateStatusRequest message for locating a specific status by ID
message LocateStatusRequest {
  int64 id = 1;
  repeated string fields = 2;
}

// LocateStatusResponse message contains a single status entity
message LocateStatusResponse {
  Status status = 1;
}

// Statuses service definition with RPC methods for managing statuses
service Statuses {
  // RPC method to list or search statuses
  rpc ListStatuses(ListStatusRequest) returns (StatusList) {
    option (google.api.http) = {
      get: "/cases/statuses"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Retrieve a list of statuses or search statuses"
    };
  }

  // RPC method to create a new status
  rpc CreateStatus(CreateStatusRequest) returns (Status) {
    option (google.api.http) = {
      post: "/cases/statuses"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new status"
    };
  }

  // RPC method to update an existing status
  rpc UpdateStatus(UpdateStatusRequest) returns (Status) {
    option (google.api.http) = {
      put: "/cases/statuses/{id}"
      body: "input"
      additional_bindings {
        patch: "/cases/statuses/{id}"
        body: "input"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update an existing status"
    };
  }

  // RPC method to partially update an existing status


  // RPC method to delete an existing status
  rpc DeleteStatus(DeleteStatusRequest) returns (Status) {
    option (google.api.http) = {
      delete: "/cases/statuses/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a status"
    };
  }

  // RPC method to locate a specific status by ID
  rpc LocateStatus(LocateStatusRequest) returns (LocateStatusResponse) {
    option (google.api.http) = {
      get: "/cases/statuses/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Locate a status by ID"
    };
  }
}
