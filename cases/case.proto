syntax = "proto3"; // Specifies the syntax version of Protocol Buffers (proto3 is used here)

package webitel.cases; // Defines the package name for the proto file, ensuring proper namespacing in generated code.
option go_package = "github.com/webitel/cases/api/cases;cases"; // Specifies the Go package path for generated Go code.

// Import statements for dependencies used in the proto definitions.
import "general.proto";                  // General shared types and lookups.
import "service.proto";                  // Service-related definitions.
import "case_comment.proto";             // Case comment-related definitions.
import "related_case.proto";             // Related case structures.
import "case_file.proto";                // Case file attachments.
import "case_link.proto";                // Links attached to a case.
import "priority.proto";                // Priority attached to a case.
import "status_condition.proto";                // Priority attached to a case.
import "source.proto";                // Source attached to a case.
import "sla_condition.proto";            // SLA condition definitions.
import "google/api/visibility.proto";    // API visibility annotations.
import "google/api/annotations.proto";   // HTTP annotation support.
import "protoc-gen-openapiv2/options/annotations.proto"; // OpenAPI annotation support.
import "protoc-gen-openapiv2/options/openapiv2.proto";   // OpenAPI v2 options.
import "proto/webitel/option.proto";     // Custom Webitel option annotations.

// Service definition for managing cases.
service Cases {
  option (option.objclass) = "cases";  // Custom object class option for "cases".

  // RPC method for searching cases.
  rpc SearchCases(SearchCasesRequest) returns (CaseList) {
    option (option.access) = ACTION_READ; // Specifies read access level.
    option (google.api.http) = {
      get: "/cases"                     // Maps this RPC to an HTTP GET endpoint.
      additional_bindings {
        get: "/contacts/{contact_id}/cases"
      }
    };
  }

  // RPC method to retrieve a specific case by its etag identifier.
  rpc LocateCase(LocateCaseRequest) returns (Case) {
    option (option.access) = ACTION_READ;
    option (google.api.http) = {
      get: "/cases/{etag}"              // Maps this RPC to an HTTP GET endpoint with a path parameter.
    };
  }

  // RPC method for creating a new case.
  rpc CreateCase(CreateCaseRequest) returns (Case) {
    option (option.access) = ACTION_CREATE;
    option (google.api.http) = {
      post: "/cases"                    // Maps this RPC to an HTTP POST endpoint.
      body: "input"                     // Specifies that the request body contains the "input" field.
    };
  }

  // RPC method for updating an existing case.
  rpc UpdateCase(UpdateCaseRequest) returns (Case) {
    option (option.access) = ACTION_UPDATE;
    option (google.api.http) = {
      put: "/cases/{input.etag}"        // Maps this RPC to an HTTP PUT endpoint.
      body: "input"                     // Specifies that the request body contains the "input" field.
      additional_bindings {              // Additional binding for PATCH requests.
          patch: "/cases/{input.etag}"  // Maps this RPC to an HTTP PATCH endpoint.
          body: "input"
      }
    };
  }

  // RPC method for deleting an existing case by its etag.
  rpc DeleteCase(DeleteCaseRequest) returns (Case) {
    option (option.access) = ACTION_DELETE;
    option (google.api.http) = {
      delete: "/cases/{etag}"           // Maps this RPC to an HTTP DELETE endpoint.
    };
  }
}

// Request message for searching cases with optional filters, pagination, and sorting.
message SearchCasesRequest {
  int32 page = 1;                       // Page number for pagination.
  int32 size = 2;                       // Number of results per page.
  string q = 3;                         // Query string for searching cases.
  repeated string ids = 4;              // List of specific case IDs to retrieve.
  string sort = 5;                      // Sorting criteria (e.g., field:asc).
  repeated string fields = 6;           // List of fields to include in the response.
  repeated string filters = 7;      // Key-value pairs for additional filtering.
  string contact_id = 8;                // Contact ID for filtering cases.
}

// Request message for locating a specific case by its etag identifier.
message LocateCaseRequest {
  string etag = 1;                      // Unique etag identifier of the case.
  repeated string fields = 2;           // List of fields to include in the response.
}

// Input structure for creating a new case.
message InputCreateCase {
  string subject = 1;                   // Required subject of the case.
  string description = 2;               // Optional description of the case.
  string contact_info = 3;              // Optional contact information.
  general.Lookup assignee = 4;                   // Optional assignee ID.
  general.Lookup reporter = 5;                   // Required reporter ID (if empty, anonymous contact).
  general.Lookup impacted = 6;                   // Required impacted user ID (default: reporter).
  general.Lookup group = 7;                      // Optional group ID.
  general.Lookup status = 8;                     // Initial case status (default from lookup or UI).
  general.Lookup close_reason_group = 9;               // Optional close reason.
  general.Lookup priority = 10;                  // Optional priority level.
  general.Lookup source = 11;                    // Source of the case.
  general.Lookup service = 12;                   // Service ID (affects many other readonly fields).
  CreateCaseCloseInput close = 13;      // Optional close information.
  RateInfo rate = 14;                   // API-only rating information.

  repeated InputCaseLink links = 15;    // List of links attached to the case.
  repeated CreateCaseRelatedCaseInput related = 16; // List of related cases.
}

// Structure for close information when a case is closed.
message CreateCaseCloseInput {
    string close_result = 1;            // Comment or reason for closing the case.
    general.Lookup close_reason = 2;             // Close reason ID from lookup.
}

// Structure for related cases input when creating a case.
message CreateCaseRelatedCaseInput {
  string etag = 1;                      // Etag of the related case.
  RelationType relation_type = 3;       // Type of relation (e.g., duplicate, linked).
  string related_to = 4;                // Identifier of the related case.
}

// Request message for creating a case.
message CreateCaseRequest {
  InputCreateCase input = 1;            // Input data for creating the case.
  repeated string fields = 2;           // List of fields to include in the response.
}

// Request message for updating an existing case.
message UpdateCaseRequest {
  repeated string x_json_mask = 1;      // List of JSON fields to update.
  repeated string fields = 2;           // List of fields to include in the response.
  InputCase input = 3;                  // Input data with updated fields.
}

// Request message for deleting a case.
message DeleteCaseRequest {
  repeated string fields = 1;           // List of fields to include in the deleted case response.
  string etag = 2;                      // Unique etag identifier of the case.
}

// Response message containing a list of cases.
message CaseList {
  int64 page = 1;                       // Current page number.
  bool next = 2;                        // Flag indicating if there are more pages.
  repeated Case items = 3;              // List of cases.
}

// Message representing a case.
message Case {
  int64 id = 1;                         // Unique case ID.
  int32 ver = 2;                        // Version number of the case.
  string etag = 3;                      // Unique etag identifier.
  general.Lookup created_by = 4;        // Creator of the case.
  int64 created_at = 5;                 // Creation timestamp (in milliseconds since Unix epoch).
  general.Lookup updated_by = 6;        // Last updater of the case.
  int64 updated_at = 7;                 // Last update timestamp (in milliseconds since Unix epoch).

  string name = 8;                      // Name of the case (may serve as an ID in docs).
  string subject = 9;                   // Subject of the case.
  string description = 10;              // Detailed description of the case.
  string contact_info = 11;             // Contact information for the case.
  int64 planned_reaction_at = 12;       // Planned reaction time (in milliseconds).
  int64 planned_resolve_at = 13;        // Planned resolution time (in milliseconds).
  general.Lookup status = 14;           // Current status of the case.
  general.Lookup close_reason_group = 15; // Close reason group, immutable once set.

  general.Lookup author = 16;           // Author or reporter of the case.
  general.Lookup assignee = 17;         // Assignee responsible for resolving the case.
  general.Lookup reporter = 18;         // Reporter of the issue (null if anonymous).
  general.Lookup impacted = 19;         // Impacted contact (defaults to reporter if null).
  general.ExtendedLookup group = 20;            // Group associated with the case.

  Priority priority = 21;         // Priority level of the case.
  SourceTypeLookup source = 22;           // Source of the case.
  StatusCondition status_condition = 23; // Status condition from status lookup.

  CloseInfo close = 24;                 // Close information (if applicable).
  RateInfo rate = 25;                   // Rating information.
  TimingInfo timing = 26;               // SLA timing details.

  general.Lookup sla_condition = 27; // List of SLA conditions.
  general.Lookup service = 28;          // Service associated with the case.

  CaseCommentList comments = 29;        // List of comments on the case.
  RelatedCaseList related = 30;         // List of related cases.
  CaseLinkList links = 31;              // List of attached links.
  CaseFileList files = 32;              // List of attached files.

  general.Lookup sla = 33;              // SLA associated with the case.
}

// Message representing close information for a case.
message CloseInfo {
  string close_result = 1;              // Result or reason for closing the case.
  general.Lookup close_reason = 2;      // Lookup for the close reason.
}



message SourceTypeLookup {
  int64 id = 1;
  SourceType type = 2;
  string name = 3;
}

// Message representing rating information.
message RateInfo {
  int64 rating = 1;                     // Rating value.
  string rating_comment = 2;            // Optional comment for the rating.
}

// Message representing SLA timing information.
message TimingInfo {
  int64 resolved_at = 1;                // Actual resolution timestamp (in milliseconds).
  int64 reacted_at = 2;                 // Actual reaction timestamp (in milliseconds).
  int64 difference_in_reaction = 3;     // Difference between actual and planned reaction time.
  int64 difference_in_resolve = 4;      // Difference between actual and planned resolution time.
}


message InputCase {
  string etag = 1;
  string subject = 3; // create: required;
  string description = 4; // create: not required;
  string contact_info = 5; // create: not required;
  general.Lookup assignee = 6; // create: not required, default from service or set by UI;
  general.Lookup reporter = 7; // create: required (if empty recognize as anonymous contact);
  general.Lookup impacted = 8; // create: required, default is reporter or ui (if empty recognize as anonymous);
  general.Lookup group = 9; // create: not required, default from service or set by UI;
  general.Lookup status = 10; // create: not required, default initial value from status lookup or ui;
  general.Lookup close_reason = 11; // create: not required;
  general.Lookup priority = 12; // create: not required, default first value from priority lookup
  general.Lookup source = 13; // source of the case
  general.Lookup service = 14; // on this field base many other readonly fields on return
  CloseInfo close = 15; // create: not required; update: required only when case status goes to the final state
  RateInfo rate = 16; // only for API, not UI
  StatusCondition status_condition = 17;
}
