syntax = "proto3";
package cases;

import "cases_import.proto";

import "google/protobuf/wrappers.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";


// Represents a group in the contact system.
message AppealLookup {
  // The unique ID of the group. Never changes.
  string id = 1;

  // The name of the group.
  string name = 2;

  // The description of the group.
  string description = 4;

  // Timestamp(milli) of the group's creation.
  int64 created_at = 5;

  // Timestamp(milli) of the last group update.
  int64 updated_at = 6;

  // The user who created this group.
  Lookup created_by = 7;

  // The user who performed the last update.
  Lookup updated_by = 8;
}

// A list of groups.
message AppealLookupList {
  // Page number of the partial result.
  int32 page = 1;
  // Have more records.
  bool next = 2;
  // List of groups.
  repeated AppealLookup items = 3;
}

// Request message for creating a new group.
message CreateAppealLookupRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["name"]
    }
  };

  // The name of the group.
  string name = 1;

  // The description of the group.
  string description = 3;
}

// Request message for updating an existing group.
message UpdateAppealLookupRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };

  // The unique ID of the group to update.
  string id = 1;

  // The new name of the group.
  string name = 2;

  // The new description of the group.
  string description = 4;
}

// Request message for deleting a group.
message DeleteAppealLookupRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };

  // The unique ID of the group to delete.
  string id = 1;
}

// Request message for listing groups.
message ListAppealLookupsRequest {
  // Page number of result dataset records. offset = (page*size)
  int32 page = 1;

  // Size count of records on result page. limit = (size++)
  int32 size = 2;

  // Fields to be retrieved as a result.
  repeated string fields = 3;

  // Sort the result according to fields.
  repeated string sort = 4;

  // Filter by unique IDs.
  repeated string id = 5;

  // Search term: group name;
  // `?` - matches any one character
  // `*` - matches 0 or more characters
  string q = 6;

  // Filter by group name.
  string name = 7;
}

// Request message for locating a group by ID.
message LocateAppealLookupRequest {
  // The unique ID of the group to locate.
  string id = 1;

  // Fields to be retrieved into result.
  repeated string fields = 2;
}

// Response message for locating a group.
message LocateAppealLookupResponse {
  // The located group.
  AppealLookup group = 1;
}


service AppealLookups {

  rpc ListAppealLookups(ListAppealLookupsRequest) returns (AppealLookupList) {
    option (google.api.http) = {
      get: "/cases/appealLookups"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Retrieve a list of groups or search groups"
    };
  }

  rpc CreateAppealLookup(CreateAppealLookupRequest) returns (AppealLookup) {
    option (google.api.http) = {
      post: "/cases/appealLookups"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new group"
    };
  }

  rpc UpdateAppealLookup(UpdateAppealLookupRequest) returns (AppealLookup) {
    option (google.api.http) = {
      put: "/cases/appealLookups/{id}"
      body: "*"
      additional_bindings {
        patch: "/cases/appealLookups/{id}"
        body: "*"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update an existing group"
    };
  }

  rpc DeleteAppealLookup(DeleteAppealLookupRequest) returns (AppealLookup) {
    option (google.api.http) = {
      delete: "/cases/appealLookups/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a group"
    };
  }

  rpc LocateAppealLookup(LocateAppealLookupRequest) returns (LocateAppealLookupResponse) {
    option (google.api.http) = {
      get: "/cases/appealLookups/{id}"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Locate a group by ID"
    };
  }
}
