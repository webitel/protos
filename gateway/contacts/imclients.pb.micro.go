// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: gateway/contacts/imclients.proto

package contacts

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for IMClients service

func NewIMClientsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "IMClients.ListIMClients",
			Path:    []string{"/contacts/{contact_id}/imclients"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for IMClients service

type IMClientsService interface {
	// Search IM client links
	ListIMClients(ctx context.Context, in *ListIMClientsRequest, opts ...client.CallOption) (*IMClientList, error)
	// Link IM client(s) with the Contact (WARNING! Only for internal use, no authentication!)
	CreateIMClients(ctx context.Context, in *CreateIMClientsRequest, opts ...client.CallOption) (*EmptyResponse, error)
}

type iMClientsService struct {
	c    client.Client
	name string
}

func NewIMClientsService(name string, c client.Client) IMClientsService {
	return &iMClientsService{
		c:    c,
		name: name,
	}
}

func (c *iMClientsService) ListIMClients(ctx context.Context, in *ListIMClientsRequest, opts ...client.CallOption) (*IMClientList, error) {
	req := c.c.NewRequest(c.name, "IMClients.ListIMClients", in)
	out := new(IMClientList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMClientsService) CreateIMClients(ctx context.Context, in *CreateIMClientsRequest, opts ...client.CallOption) (*EmptyResponse, error) {
	req := c.c.NewRequest(c.name, "IMClients.CreateIMClients", in)
	out := new(EmptyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IMClients service

type IMClientsHandler interface {
	// Search IM client links
	ListIMClients(context.Context, *ListIMClientsRequest, *IMClientList) error
	// Link IM client(s) with the Contact (WARNING! Only for internal use, no authentication!)
	CreateIMClients(context.Context, *CreateIMClientsRequest, *EmptyResponse) error
}

func RegisterIMClientsHandler(s server.Server, hdlr IMClientsHandler, opts ...server.HandlerOption) error {
	type iMClients interface {
		ListIMClients(ctx context.Context, in *ListIMClientsRequest, out *IMClientList) error
		CreateIMClients(ctx context.Context, in *CreateIMClientsRequest, out *EmptyResponse) error
	}
	type IMClients struct {
		iMClients
	}
	h := &iMClientsHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IMClients.ListIMClients",
		Path:    []string{"/contacts/{contact_id}/imclients"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&IMClients{h}, opts...))
}

type iMClientsHandler struct {
	IMClientsHandler
}

func (h *iMClientsHandler) ListIMClients(ctx context.Context, in *ListIMClientsRequest, out *IMClientList) error {
	return h.IMClientsHandler.ListIMClients(ctx, in, out)
}

func (h *iMClientsHandler) CreateIMClients(ctx context.Context, in *CreateIMClientsRequest, out *EmptyResponse) error {
	return h.IMClientsHandler.CreateIMClients(ctx, in, out)
}
