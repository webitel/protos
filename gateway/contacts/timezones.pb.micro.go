// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: gateway/contacts/timezones.proto

package contacts

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Timezones service

func NewTimezonesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "Timezones.ListTimezones",
			Path:    []string{"/contacts/{contact_id}/timezones"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Timezones.MergeTimezones",
			Path:    []string{"/contacts/{contact_id}/timezones"},
			Method:  []string{"POST"},
			Body:    "input",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Timezones.ResetTimezones",
			Path:    []string{"/contacts/{contact_id}/timezones"},
			Method:  []string{"PUT"},
			Body:    "input",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Timezones.DeleteTimezones",
			Path:    []string{"/contacts/{contact_id}/timezones"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Timezones.LocateTimezone",
			Path:    []string{"/contacts/{contact_id}/timezones/{etag}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Timezones.UpdateTimezone",
			Path:    []string{"/contacts/{contact_id}/timezones/{input.etag}"},
			Method:  []string{"PUT"},
			Body:    "input",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Timezones.DeleteTimezone",
			Path:    []string{"/contacts/{contact_id}/timezones/{etag}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
	}
}

// Client API for Timezones service

type TimezonesService interface {
	// List of the Contact's timezone(s).
	ListTimezones(ctx context.Context, in *ListTimezonesRequest, opts ...client.CallOption) (*TimezoneList, error)
	// Associate more timezone(s) with the Contact.
	MergeTimezones(ctx context.Context, in *MergeTimezonesRequest, opts ...client.CallOption) (*TimezoneList, error)
	// Resets all timezones of the contact according to the input dataset.
	ResetTimezones(ctx context.Context, in *ResetTimezonesRequest, opts ...client.CallOption) (*TimezoneList, error)
	// Remove the Contact's timezone(s).
	DeleteTimezones(ctx context.Context, in *DeleteTimezonesRequest, opts ...client.CallOption) (*TimezoneList, error)
	// Locate the Contact's timezone association.
	LocateTimezone(ctx context.Context, in *LocateTimezoneRequest, opts ...client.CallOption) (*Timezone, error)
	// Update the Contact's timezone details.
	UpdateTimezone(ctx context.Context, in *UpdateTimezoneRequest, opts ...client.CallOption) (*TimezoneList, error)
	// Remove the Contact's timezone association.
	DeleteTimezone(ctx context.Context, in *DeleteTimezoneRequest, opts ...client.CallOption) (*Timezone, error)
}

type timezonesService struct {
	c    client.Client
	name string
}

func NewTimezonesService(name string, c client.Client) TimezonesService {
	return &timezonesService{
		c:    c,
		name: name,
	}
}

func (c *timezonesService) ListTimezones(ctx context.Context, in *ListTimezonesRequest, opts ...client.CallOption) (*TimezoneList, error) {
	req := c.c.NewRequest(c.name, "Timezones.ListTimezones", in)
	out := new(TimezoneList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timezonesService) MergeTimezones(ctx context.Context, in *MergeTimezonesRequest, opts ...client.CallOption) (*TimezoneList, error) {
	req := c.c.NewRequest(c.name, "Timezones.MergeTimezones", in)
	out := new(TimezoneList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timezonesService) ResetTimezones(ctx context.Context, in *ResetTimezonesRequest, opts ...client.CallOption) (*TimezoneList, error) {
	req := c.c.NewRequest(c.name, "Timezones.ResetTimezones", in)
	out := new(TimezoneList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timezonesService) DeleteTimezones(ctx context.Context, in *DeleteTimezonesRequest, opts ...client.CallOption) (*TimezoneList, error) {
	req := c.c.NewRequest(c.name, "Timezones.DeleteTimezones", in)
	out := new(TimezoneList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timezonesService) LocateTimezone(ctx context.Context, in *LocateTimezoneRequest, opts ...client.CallOption) (*Timezone, error) {
	req := c.c.NewRequest(c.name, "Timezones.LocateTimezone", in)
	out := new(Timezone)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timezonesService) UpdateTimezone(ctx context.Context, in *UpdateTimezoneRequest, opts ...client.CallOption) (*TimezoneList, error) {
	req := c.c.NewRequest(c.name, "Timezones.UpdateTimezone", in)
	out := new(TimezoneList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timezonesService) DeleteTimezone(ctx context.Context, in *DeleteTimezoneRequest, opts ...client.CallOption) (*Timezone, error) {
	req := c.c.NewRequest(c.name, "Timezones.DeleteTimezone", in)
	out := new(Timezone)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Timezones service

type TimezonesHandler interface {
	// List of the Contact's timezone(s).
	ListTimezones(context.Context, *ListTimezonesRequest, *TimezoneList) error
	// Associate more timezone(s) with the Contact.
	MergeTimezones(context.Context, *MergeTimezonesRequest, *TimezoneList) error
	// Resets all timezones of the contact according to the input dataset.
	ResetTimezones(context.Context, *ResetTimezonesRequest, *TimezoneList) error
	// Remove the Contact's timezone(s).
	DeleteTimezones(context.Context, *DeleteTimezonesRequest, *TimezoneList) error
	// Locate the Contact's timezone association.
	LocateTimezone(context.Context, *LocateTimezoneRequest, *Timezone) error
	// Update the Contact's timezone details.
	UpdateTimezone(context.Context, *UpdateTimezoneRequest, *TimezoneList) error
	// Remove the Contact's timezone association.
	DeleteTimezone(context.Context, *DeleteTimezoneRequest, *Timezone) error
}

func RegisterTimezonesHandler(s server.Server, hdlr TimezonesHandler, opts ...server.HandlerOption) error {
	type timezones interface {
		ListTimezones(ctx context.Context, in *ListTimezonesRequest, out *TimezoneList) error
		MergeTimezones(ctx context.Context, in *MergeTimezonesRequest, out *TimezoneList) error
		ResetTimezones(ctx context.Context, in *ResetTimezonesRequest, out *TimezoneList) error
		DeleteTimezones(ctx context.Context, in *DeleteTimezonesRequest, out *TimezoneList) error
		LocateTimezone(ctx context.Context, in *LocateTimezoneRequest, out *Timezone) error
		UpdateTimezone(ctx context.Context, in *UpdateTimezoneRequest, out *TimezoneList) error
		DeleteTimezone(ctx context.Context, in *DeleteTimezoneRequest, out *Timezone) error
	}
	type Timezones struct {
		timezones
	}
	h := &timezonesHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Timezones.ListTimezones",
		Path:    []string{"/contacts/{contact_id}/timezones"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Timezones.MergeTimezones",
		Path:    []string{"/contacts/{contact_id}/timezones"},
		Method:  []string{"POST"},
		Body:    "input",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Timezones.ResetTimezones",
		Path:    []string{"/contacts/{contact_id}/timezones"},
		Method:  []string{"PUT"},
		Body:    "input",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Timezones.DeleteTimezones",
		Path:    []string{"/contacts/{contact_id}/timezones"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Timezones.LocateTimezone",
		Path:    []string{"/contacts/{contact_id}/timezones/{etag}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Timezones.UpdateTimezone",
		Path:    []string{"/contacts/{contact_id}/timezones/{input.etag}"},
		Method:  []string{"PUT"},
		Body:    "input",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Timezones.DeleteTimezone",
		Path:    []string{"/contacts/{contact_id}/timezones/{etag}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&Timezones{h}, opts...))
}

type timezonesHandler struct {
	TimezonesHandler
}

func (h *timezonesHandler) ListTimezones(ctx context.Context, in *ListTimezonesRequest, out *TimezoneList) error {
	return h.TimezonesHandler.ListTimezones(ctx, in, out)
}

func (h *timezonesHandler) MergeTimezones(ctx context.Context, in *MergeTimezonesRequest, out *TimezoneList) error {
	return h.TimezonesHandler.MergeTimezones(ctx, in, out)
}

func (h *timezonesHandler) ResetTimezones(ctx context.Context, in *ResetTimezonesRequest, out *TimezoneList) error {
	return h.TimezonesHandler.ResetTimezones(ctx, in, out)
}

func (h *timezonesHandler) DeleteTimezones(ctx context.Context, in *DeleteTimezonesRequest, out *TimezoneList) error {
	return h.TimezonesHandler.DeleteTimezones(ctx, in, out)
}

func (h *timezonesHandler) LocateTimezone(ctx context.Context, in *LocateTimezoneRequest, out *Timezone) error {
	return h.TimezonesHandler.LocateTimezone(ctx, in, out)
}

func (h *timezonesHandler) UpdateTimezone(ctx context.Context, in *UpdateTimezoneRequest, out *TimezoneList) error {
	return h.TimezonesHandler.UpdateTimezone(ctx, in, out)
}

func (h *timezonesHandler) DeleteTimezone(ctx context.Context, in *DeleteTimezoneRequest, out *Timezone) error {
	return h.TimezonesHandler.DeleteTimezone(ctx, in, out)
}
