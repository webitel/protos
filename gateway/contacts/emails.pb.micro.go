// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: gateway/contacts/emails.proto

package contacts

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Emails service

func NewEmailsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "Emails.ListEmails",
			Path:    []string{"/contacts/{contact_id}/emails"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Emails.MergeEmails",
			Path:    []string{"/contacts/{contact_id}/emails"},
			Method:  []string{"POST"},
			Body:    "input",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Emails.ResetEmails",
			Path:    []string{"/contacts/{contact_id}/emails"},
			Method:  []string{"PUT"},
			Body:    "input",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Emails.DeleteEmails",
			Path:    []string{"/contacts/{contact_id}/emails"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Emails.LocateEmail",
			Path:    []string{"/contacts/{contact_id}/emails/{etag}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Emails.UpdateEmail",
			Path:    []string{"/contacts/{contact_id}/emails/{input.etag}"},
			Method:  []string{"PUT"},
			Body:    "input",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Emails.DeleteEmail",
			Path:    []string{"/contacts/{contact_id}/emails/{etag}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
	}
}

// Client API for Emails service

type EmailsService interface {
	// Locates email address(es) of the contact.
	ListEmails(ctx context.Context, in *ListEmailsRequest, opts ...client.CallOption) (*EmailList, error)
	// Update or append email address(es) of the contact.
	MergeEmails(ctx context.Context, in *MergeEmailsRequest, opts ...client.CallOption) (*EmailList, error)
	// Resets all emails of the contact according to the input dataset.
	ResetEmails(ctx context.Context, in *ResetEmailsRequest, opts ...client.CallOption) (*EmailList, error)
	// Remove email address(es) of the contact.
	DeleteEmails(ctx context.Context, in *DeleteEmailsRequest, opts ...client.CallOption) (*EmailList, error)
	// Locate the email address link.
	LocateEmail(ctx context.Context, in *LocateEmailRequest, opts ...client.CallOption) (*EmailAddress, error)
	// Update the contact's email address link details
	UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...client.CallOption) (*EmailList, error)
	// Remove the contact's email address link
	DeleteEmail(ctx context.Context, in *DeleteEmailRequest, opts ...client.CallOption) (*EmailAddress, error)
}

type emailsService struct {
	c    client.Client
	name string
}

func NewEmailsService(name string, c client.Client) EmailsService {
	return &emailsService{
		c:    c,
		name: name,
	}
}

func (c *emailsService) ListEmails(ctx context.Context, in *ListEmailsRequest, opts ...client.CallOption) (*EmailList, error) {
	req := c.c.NewRequest(c.name, "Emails.ListEmails", in)
	out := new(EmailList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailsService) MergeEmails(ctx context.Context, in *MergeEmailsRequest, opts ...client.CallOption) (*EmailList, error) {
	req := c.c.NewRequest(c.name, "Emails.MergeEmails", in)
	out := new(EmailList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailsService) ResetEmails(ctx context.Context, in *ResetEmailsRequest, opts ...client.CallOption) (*EmailList, error) {
	req := c.c.NewRequest(c.name, "Emails.ResetEmails", in)
	out := new(EmailList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailsService) DeleteEmails(ctx context.Context, in *DeleteEmailsRequest, opts ...client.CallOption) (*EmailList, error) {
	req := c.c.NewRequest(c.name, "Emails.DeleteEmails", in)
	out := new(EmailList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailsService) LocateEmail(ctx context.Context, in *LocateEmailRequest, opts ...client.CallOption) (*EmailAddress, error) {
	req := c.c.NewRequest(c.name, "Emails.LocateEmail", in)
	out := new(EmailAddress)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailsService) UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...client.CallOption) (*EmailList, error) {
	req := c.c.NewRequest(c.name, "Emails.UpdateEmail", in)
	out := new(EmailList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailsService) DeleteEmail(ctx context.Context, in *DeleteEmailRequest, opts ...client.CallOption) (*EmailAddress, error) {
	req := c.c.NewRequest(c.name, "Emails.DeleteEmail", in)
	out := new(EmailAddress)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Emails service

type EmailsHandler interface {
	// Locates email address(es) of the contact.
	ListEmails(context.Context, *ListEmailsRequest, *EmailList) error
	// Update or append email address(es) of the contact.
	MergeEmails(context.Context, *MergeEmailsRequest, *EmailList) error
	// Resets all emails of the contact according to the input dataset.
	ResetEmails(context.Context, *ResetEmailsRequest, *EmailList) error
	// Remove email address(es) of the contact.
	DeleteEmails(context.Context, *DeleteEmailsRequest, *EmailList) error
	// Locate the email address link.
	LocateEmail(context.Context, *LocateEmailRequest, *EmailAddress) error
	// Update the contact's email address link details
	UpdateEmail(context.Context, *UpdateEmailRequest, *EmailList) error
	// Remove the contact's email address link
	DeleteEmail(context.Context, *DeleteEmailRequest, *EmailAddress) error
}

func RegisterEmailsHandler(s server.Server, hdlr EmailsHandler, opts ...server.HandlerOption) error {
	type emails interface {
		ListEmails(ctx context.Context, in *ListEmailsRequest, out *EmailList) error
		MergeEmails(ctx context.Context, in *MergeEmailsRequest, out *EmailList) error
		ResetEmails(ctx context.Context, in *ResetEmailsRequest, out *EmailList) error
		DeleteEmails(ctx context.Context, in *DeleteEmailsRequest, out *EmailList) error
		LocateEmail(ctx context.Context, in *LocateEmailRequest, out *EmailAddress) error
		UpdateEmail(ctx context.Context, in *UpdateEmailRequest, out *EmailList) error
		DeleteEmail(ctx context.Context, in *DeleteEmailRequest, out *EmailAddress) error
	}
	type Emails struct {
		emails
	}
	h := &emailsHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Emails.ListEmails",
		Path:    []string{"/contacts/{contact_id}/emails"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Emails.MergeEmails",
		Path:    []string{"/contacts/{contact_id}/emails"},
		Method:  []string{"POST"},
		Body:    "input",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Emails.ResetEmails",
		Path:    []string{"/contacts/{contact_id}/emails"},
		Method:  []string{"PUT"},
		Body:    "input",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Emails.DeleteEmails",
		Path:    []string{"/contacts/{contact_id}/emails"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Emails.LocateEmail",
		Path:    []string{"/contacts/{contact_id}/emails/{etag}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Emails.UpdateEmail",
		Path:    []string{"/contacts/{contact_id}/emails/{input.etag}"},
		Method:  []string{"PUT"},
		Body:    "input",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Emails.DeleteEmail",
		Path:    []string{"/contacts/{contact_id}/emails/{etag}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&Emails{h}, opts...))
}

type emailsHandler struct {
	EmailsHandler
}

func (h *emailsHandler) ListEmails(ctx context.Context, in *ListEmailsRequest, out *EmailList) error {
	return h.EmailsHandler.ListEmails(ctx, in, out)
}

func (h *emailsHandler) MergeEmails(ctx context.Context, in *MergeEmailsRequest, out *EmailList) error {
	return h.EmailsHandler.MergeEmails(ctx, in, out)
}

func (h *emailsHandler) ResetEmails(ctx context.Context, in *ResetEmailsRequest, out *EmailList) error {
	return h.EmailsHandler.ResetEmails(ctx, in, out)
}

func (h *emailsHandler) DeleteEmails(ctx context.Context, in *DeleteEmailsRequest, out *EmailList) error {
	return h.EmailsHandler.DeleteEmails(ctx, in, out)
}

func (h *emailsHandler) LocateEmail(ctx context.Context, in *LocateEmailRequest, out *EmailAddress) error {
	return h.EmailsHandler.LocateEmail(ctx, in, out)
}

func (h *emailsHandler) UpdateEmail(ctx context.Context, in *UpdateEmailRequest, out *EmailList) error {
	return h.EmailsHandler.UpdateEmail(ctx, in, out)
}

func (h *emailsHandler) DeleteEmail(ctx context.Context, in *DeleteEmailRequest, out *EmailAddress) error {
	return h.EmailsHandler.DeleteEmail(ctx, in, out)
}
