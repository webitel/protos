// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.6
// source: gateway/contacts/imclients.proto

package contacts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IMClients_ListIMClients_FullMethodName   = "/webitel.contacts.IMClients/ListIMClients"
	IMClients_CreateIMClients_FullMethodName = "/webitel.contacts.IMClients/CreateIMClients"
)

// IMClientsClient is the client API for IMClients service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IMClientsClient interface {
	// Search IM client links
	ListIMClients(ctx context.Context, in *ListIMClientsRequest, opts ...grpc.CallOption) (*IMClientList, error)
	// Link IM client(s) with the Contact (WARNING! Only for internal use, no authentication!)
	CreateIMClients(ctx context.Context, in *CreateIMClientsRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type iMClientsClient struct {
	cc grpc.ClientConnInterface
}

func NewIMClientsClient(cc grpc.ClientConnInterface) IMClientsClient {
	return &iMClientsClient{cc}
}

func (c *iMClientsClient) ListIMClients(ctx context.Context, in *ListIMClientsRequest, opts ...grpc.CallOption) (*IMClientList, error) {
	out := new(IMClientList)
	err := c.cc.Invoke(ctx, IMClients_ListIMClients_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMClientsClient) CreateIMClients(ctx context.Context, in *CreateIMClientsRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, IMClients_CreateIMClients_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IMClientsServer is the server API for IMClients service.
// All implementations must embed UnimplementedIMClientsServer
// for forward compatibility
type IMClientsServer interface {
	// Search IM client links
	ListIMClients(context.Context, *ListIMClientsRequest) (*IMClientList, error)
	// Link IM client(s) with the Contact (WARNING! Only for internal use, no authentication!)
	CreateIMClients(context.Context, *CreateIMClientsRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedIMClientsServer()
}

// UnimplementedIMClientsServer must be embedded to have forward compatible implementations.
type UnimplementedIMClientsServer struct {
}

func (UnimplementedIMClientsServer) ListIMClients(context.Context, *ListIMClientsRequest) (*IMClientList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIMClients not implemented")
}
func (UnimplementedIMClientsServer) CreateIMClients(context.Context, *CreateIMClientsRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIMClients not implemented")
}
func (UnimplementedIMClientsServer) mustEmbedUnimplementedIMClientsServer() {}

// UnsafeIMClientsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IMClientsServer will
// result in compilation errors.
type UnsafeIMClientsServer interface {
	mustEmbedUnimplementedIMClientsServer()
}

func RegisterIMClientsServer(s grpc.ServiceRegistrar, srv IMClientsServer) {
	s.RegisterService(&IMClients_ServiceDesc, srv)
}

func _IMClients_ListIMClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIMClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMClientsServer).ListIMClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IMClients_ListIMClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMClientsServer).ListIMClients(ctx, req.(*ListIMClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IMClients_CreateIMClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIMClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMClientsServer).CreateIMClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IMClients_CreateIMClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMClientsServer).CreateIMClients(ctx, req.(*CreateIMClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IMClients_ServiceDesc is the grpc.ServiceDesc for IMClients service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IMClients_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.contacts.IMClients",
	HandlerType: (*IMClientsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIMClients",
			Handler:    _IMClients_ListIMClients_Handler,
		},
		{
			MethodName: "CreateIMClients",
			Handler:    _IMClients_CreateIMClients_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway/contacts/imclients.proto",
}
