syntax = "proto3";
package webitel.contacts;
option go_package = "webitel.go/api/contacts;contacts";

import "gateway/contacts/fields.proto";
import "gateway/contacts/labels.proto";
import "gateway/contacts/emails.proto";
import "gateway/contacts/photos.proto";
import "gateway/contacts/phones.proto";
import "gateway/contacts/managers.proto";
import "gateway/contacts/comments.proto";
import "gateway/contacts/variables.proto";
import "gateway/contacts/languages.proto";
import "gateway/contacts/timezones.proto";
// import "contacts/addresses.proto";
import "gateway/contacts/imclients.proto";

// import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// A contact's name.
// If the name is a mononym, the family name is empty.
//
// Inspired:
// https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims
// https://developers.google.com/people/api/rest/v1/people#name
message Name {

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    // GET /contacts/{id}/names
    example: ""
  };
  
  // // [OUTPUT]: --------------------------------------

  // // The unique ID of the association. Never changes.
  // string id = 1;

  // // // Revision number.
  // // // Version of the latest update.
  // // // Numeric sequence.
  // // int32 rev = 2;

  // // Version of the latest update. Numeric sequence.
  // int32 ver = 2;

  // // Unique ID of the latest version of the update.
  // // This ID changes after any update to the underlying value(s).
  // string etag = 3;

  // // // The Contact source associated with.
  // // // Return within global /labels lookup.
  // // webitel.contacts.Lookup contact = 2;

  // // The user who created this Field.
  // int64 created_at = 4;

  // // Timestamp(milli) of the Field creation.
  // webitel.contacts.Lookup created_by = 5;
  
  // // Timestamp(milli) of the last Field update.
  // // Take part in Etag generation.
  // int64 updated_at = 6;
  
  // // The user who performed last Update.
  // webitel.contacts.Lookup updated_by = 7;

  // // [INPUT]: --------------------------------------

  // // Indicates whether this association is the default
  // // among others of the same type.
  // bool primary = 11;

  // Indicate whether Contact, as a Person, realy owns this associated name.
  bool verified = 12;

  // // Output only. The display name formatted
  // // according to the locale specified by the viewer's account
  // // or the Accept-Language HTTP header.
  // string displayName = 2;
  // // Output only. The display name with the last name first formatted
  // // according to the locale specified by the viewer's account
  // // or the Accept-Language HTTP header.
  // string displayNameLastFirst = 3;
  // // The free form name value.
  // string unstructuredName = 4;

  // OPTIONAL. Given name(s) or first name(s) of the End-User.
  // Note that in some cultures, people can have multiple given names;
  // all can be present, with the names being separated by space characters.
  // https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims #given_name
  string given_name = 13;
  // OPTIONAL. Middle name(s) of the End-User.
  // Note that in some cultures, people can have multiple middle names;
  // all can be present, with the names being separated by space characters.
  // Also note that in some cultures, middle names are not used.
  string middle_name = 14;
  // OPTIONAL. Surname(s) or last name(s) of the End-User.
  // Note that in some cultures, people can have multiple family names or no family name;
  // all can be present, with the names being separated by space characters.
  // https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims #family_name
  string family_name = 15;
  // REQUIRED. End-User's full name in displayable form
  // including all name parts, possibly including titles and suffixes,
  // ordered according to the End-User's locale and preferences.
  string common_name = 16;

  // // The honorific prefixes, such as Mrs. or Dr.
  // string honorificPrefix = 8;
  // // The honorific suffixes, such as Jr.
  // string honorificSuffix = 9;
  // // The full name spelled as it sounds.
  // string phoneticFullName = 10;
  // // The family name spelled as it sounds.
  // string phoneticFamilyName = 11;
  // // The given name spelled as it sounds.
  // string phoneticGivenName = 12;
  // // The middle name(s) spelled as they sound.
  // string phoneticMiddleName = 13;
  // // The honorific prefixes spelled as they sound.
  // string phoneticHonorificPrefix = 14;
  // // The honorific suffixes spelled as they sound.
  // string phoneticHonorificSuffix = 15;
}


message InputName {

  // option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
  //   // PUT /contacts/{source.id}/names/{etag}
  //   example: ""
  //   json_schema: {
  //     required: ["etag"]
  //   }
  // };
  
  // // Unique ID of the latest version of an existing association.
  // string etag = 1
  // [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  //   field_configuration: {
  //     path_param_name: "etag"
  //   }
  // }];

  // // Indicates whether this association must be default
  // // among others of the same type.
  // bool primary = 11;

  // Indicate whether Contact, as a Person, realy owns this associated name.
  bool verified = 12;

  // // Output only. The display name formatted
  // // according to the locale specified by the viewer's account
  // // or the Accept-Language HTTP header.
  // string displayName = 2;
  // // Output only. The display name with the last name first formatted
  // // according to the locale specified by the viewer's account
  // // or the Accept-Language HTTP header.
  // string displayNameLastFirst = 3;
  // // The free form name value.
  // string unstructuredName = 4;

  // OPTIONAL. Given name(s) or first name(s) of the End-User.
  // Note that in some cultures, people can have multiple given names;
  // all can be present, with the names being separated by space characters.
  // https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims #given_name
  string given_name = 13;
  // OPTIONAL. Middle name(s) of the End-User.
  // Note that in some cultures, people can have multiple middle names;
  // all can be present, with the names being separated by space characters.
  // Also note that in some cultures, middle names are not used.
  string middle_name = 14;
  // OPTIONAL. Surname(s) or last name(s) of the End-User.
  // Note that in some cultures, people can have multiple family names or no family name;
  // all can be present, with the names being separated by space characters.
  // https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims #family_name
  string family_name = 15;
  // REQUIRED. End-User's full name in displayable form
  // including all name parts, possibly including titles and suffixes,
  // ordered according to the End-User's locale and preferences.
  string common_name = 16;

  // // The honorific prefixes, such as Mrs. or Dr.
  // string honorificPrefix = 8;
  // // The honorific suffixes, such as Jr.
  // string honorificSuffix = 9;
  // // The full name spelled as it sounds.
  // string phoneticFullName = 10;
  // // The family name spelled as it sounds.
  // string phoneticFamilyName = 11;
  // // The given name spelled as it sounds.
  // string phoneticGivenName = 12;
  // // The middle name(s) spelled as they sound.
  // string phoneticMiddleName = 13;
  // // The honorific prefixes spelled as they sound.
  // string phoneticHonorificPrefix = 14;
  // // The honorific suffixes spelled as they sound.
  // string phoneticHonorificSuffix = 15;
}

// Name dataset.
message NameList {

  // option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
  //   example: ""
  // };

  // Name dataset page.
  repeated Name data = 1;
  // The page number of the partial result.
  int32 page = 2;
  // Indicates that this is a partial result.
  // More data available upon query: ?size=${data.len}&page=${page++}
  bool next = 3;

}

// The Contact principal source.
// OUTPUT purpose only.
message Contact {

  // option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
  //   // GET /contacts/{id}
  //   example: "{\"id\":\"4\",\"ver\":\"16\",\"etag\":\"qZN3pKzHVQf4XkG7\",\"created_at\":\"1680268507698\",\"created_by\":{\"id\":\"34\",\"name\":\"John Doe\"},\"updated_at\":\"1680348682359\",\"updated_by\":{\"id\":\"37\",\"name\":\"Bruce Wayne\"},\"names\":{\"data\":[{\"id\":\"4\",\"ver\":\"4\",\"etag\":\"qZN3pKzHVQf4XkG7\",\"updated_at\":\"1680348672359\",\"updated_by\":{\"id\":\"34\",\"name\":\"John Doe\"},\"primary\":true,\"verified\":true,\"common_name\":\"Johnny Doe\",\"given_name\":\"John\",\"middle_name\":\"Ashton\",\"family_name\":\"Doe\"}]},\"labels\":{\"data\":[{\"tag\":\"user\"},{\"tag\":\"VIP\"}]},\"emails\":{\"data\":[{\"primary\":true,\"verified\":false,\"email\":\"j.doe@example.com\",\"type\":{\"id\":\"5\",\"name\":\"work\"}},{\"verified\":true,\"email\":\"johnny43@mx.example.org\",\"type\":{\"name\":\"fake\"}}],\"page\":1,\"next\":true},\"phones\":{\"data\":[{\"primary\":true,\"verified\":false,\"number\":\"+1 (484) 476-0186\",\"type\":{\"id\":\"5\",\"name\":\"work\"}}]},\"languages\":{\"data\":[{\"primary\":true,\"lang\":\"en-GB\"},{\"lang\":\"uk\"}]},\"timezones\":{\"data\":[{\"primary\":true,\"location\":\"Europe/London\"}]},\"variables\":{\"data\":[{\"key\":\"string_var\",\"value\":\"string_value\"},{\"key\":\"complex_var\",\"value\":{\"integer\":54642354,\"inner_arr\":[\"string_item\",[null],true,{}]}}],\"page\":1,\"next\":true},\"imclients\":{\"data\":[]},\"comments\":{\"data\":[{\"id\":\"354\",\"etag\":\"FqaTCDLbhpaoUreL\",\"created_at\":\"1680268507698\",\"created_by\":{\"id\":\"34\",\"name\":\"John Doe\"},\"text\":\"This is an internal note about recent activities.\"},{\"id\":\"357\",\"ver\":\"4\",\"etag\":\"FZiTxVgr41VPFxyu\",\"created_at\":\"1680268537698\",\"created_by\":{\"id\":\"56\",\"name\":\"Bruce Wayne\"},\"updated_at\":\"1680268563357\",\"updated_by\":{\"name\":\"Jane Lee (deleted)\"},\"text\":\"This contact may become a customer in a few days\"}],\"page\":1,\"next\":true}}"
  // };

  // [TUPLE]: --------------------------------------

  // READONLY. The resource name for the contact, assigned by the server.
  // An ASCII string with a max length of 27 characters, in the form of contacts/{contact_id}.
  // DESIGN. Subject. type-specific idenity within internal domain

  // The unique ID of the association. Never changes.
  string id = 1;

  // READONLY. Operational attributes
  // Version of the latest update. Numeric sequence.
  int32 ver = 2;

  // Unique ID of the latest version of the update.
  // This ID changes after any update to the underlying value(s).
  string etag = 3;

  // [R]ecord[b]ased[A]ccess[C]ontrol mode granted.
  string mode = 4;

  // READONLY. The contact's metadata.
  webitel.contacts.Lookup domain = 5;
  
  // // Sources of the contact fields.
  // repeated Source sources = 6;

  int64 created_at = 10; // unix
  webitel.contacts.Lookup created_by = 11; // user
  int64 updated_at = 12; // unix
  webitel.contacts.Lookup updated_by = 13; // user
  // int64 deleted_at = 14; // unix
  // webitel.contacts.Lookup deleted_by = 15; // user

  // [INPUT]: ----- The Contact's Attributes ----- //

  // The Contact's name.
  // This field is a singleton for Contact sources.
  webitel.contacts.Name name = 20;

  // BIO. Short description about the Contact person.
  // OPTIONAL. Multi-lined text.
  string about = 21;

  // // The Contact's external identity(-es) names.
  // // This field is a singleton for Contact sources.
  // webitel.contacts.NameList names = 22;

  // The Contact's associated tag(s).
  webitel.contacts.LabelList labels = 23;

  // The Contact's email address(es).
  webitel.contacts.EmailList emails = 24;

  // The Contact's phone numbers.
  webitel.contacts.PhoneList phones = 25;

  // Output only. The Contact's photo(s).
  webitel.contacts.PhotoList photos = 26;

  // The Contact's internal manager(s).
  webitel.contacts.ManagerList managers = 27;

  // The Contact's internal comment(s).
  webitel.contacts.CommentList comments = 28;

  // A Contact's locale preference(s).
  webitel.contacts.LanguageList languages = 29;
  // The Contact's timezone preference(s).
  webitel.contacts.TimezoneList timezones = 30;

  // // The Contact's street address(es).
  // repeated webitel.contacts.Address addresses = 31;
  
  // The contact's [I]nstant[M]essaging clients.
  webitel.contacts.IMClientList imclients = 32;

  // // The contact's external (third-party) IDentifiers.
  // repeated webitel.contacts.ExternalId externalIds = 33;

  // Arbitrary client data that is populated by clients.
  // Duplicate keys and values are allowed.
  webitel.contacts.VariableList variables = 34;
  
  

}

// The Contact principal input.
message InputContact {

  // option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
  //   // PUT|PATCH /contacts/{id}
  //   example: "{\"deleted\":false,\"name\":{\"verified\":true,\"given_name\":\"John\",\"middle_name\":\"Ashton\",\"family_name\":\"Doe\",\"common_name\":\"Johnny Doe\"},\"labels\":[{\"tag\":\"VIP\"},{\"tag\":\"example_group\"}],\"emails\":[{\"primary\":true,\"email\":\"j.doe@example.com\",\"type\":{\"id\":\"5\"}},{\"verified\":true,\"email\":\"johnny_43@gmail.org\",\"type\":{\"name\":\"self\"}}],\"phones\":[{\"primary\":true,\"number\":\"+1 (484) 476-0186\",\"type\":{\"id\":\"5\",\"name\":\"work\"}}],\"managers\":[{\"primary\":true,\"user\":{\"id\":\"357\",\"name\":\"Bruce Wayne\"}}],\"comment\":{\"text\":\"This is a new note about the contact's recent activity. So ...\"},\"variables\":{\"is_bool\":true,\"my_string\":\"string_value\",\"var_array\":[1,\"item\",{},null]},\"languages\":[\"en-GB\",\"uk\"],\"timezones\":[{\"primary\":false,\"location\":\"Europe/Dublin\"},{\"location\":\"Europe/London\"}],\"imclients\":[{\"user\":{\"id\":\"596456813\",\"type\":\"telegram\",\"name\":\"John Doe\"},\"app\":{\"id\":\"357\",\"type\":\"telegram\",\"name\":\"TGBot\"}}]}"
  // };

  // [IDENT]: --------------------------------------

  // Unique ID of the latest version of an existing resorce.
  string etag = 1
  [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    field_configuration: {
      path_param_name: "etag"
    }
  }];
  
  // // READONLY. The contact's metadata.
  // webitel.contacts.Lookup domain = 2;
  // // Sources of the contact fields.
  // repeated Source sources = 3;

  // [INPUT]: --------------------------------------

  // // FIXME: Used to deal with DELETE ?permanently=false
  // enum State {
  //   // Latest state; NO state changes.
  //   CURRENT = 0;
  //   // Restore Contact book record; NOT deleted.
  //   INCLUDE = 1;
  //   // Move from Contact Book to Recycle Bin; MARK deleted
  //   EXCLUDE = 2;
  // }

  // // FIXME: Contact Book search status.
  // // Indicates whether to include this Contact in search results.
  // State search = 19;

  // bool deleted = 19; // FIXME: So does we need DELETE /contacts/$id?permanent=false 

  // ----- The Contact's Attributes ----- //

  // The Contact's name. Singleton
  webitel.contacts.InputName name = 20;

  // BIO. Short description about the Contact person.
  // OPTIONAL. Multi-lined text.
  string about = 21;

  // Output only. The Contact's photo(s).
  repeated webitel.contacts.InputPhoto photos = 23;
  
  // The Contact's associated label(s).
  repeated webitel.contacts.InputLabel labels = 24;

  // The Contact's email address(es).
  repeated webitel.contacts.InputEmailAddress emails = 25;
  
  // The Contact's phone numbers.
  repeated webitel.contacts.InputPhoneNumber phones = 26;

  // The Contact's internal manager(s).
  repeated webitel.contacts.InputManager managers = 27;

  // Publish NEW comment(s) for this Contact.
  repeated webitel.contacts.InputComment comments = 28;

  // A Contact's locale preference(s).
  repeated webitel.contacts.InputLanguage languages = 29;

  // The Contact's timezone preference(s).
  repeated webitel.contacts.InputTimezone timezones = 30;

  // // The Contact's street address(es).
  // repeated webitel.contacts.InputAddress addresses = 31;

  // The contact's [I]nstant[M]essaging clients.
  repeated webitel.contacts.InputIMClient imclients = 32;

  // // The contact's external (third-party) IDentifiers.
  // repeated webitel.contacts.ExternalId externalIds = 33;

  // Arbitrary client data that is populated by clients.
  repeated webitel.contacts.InputVariable variables = 34;

}