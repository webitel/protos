// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: gateway/contacts/contacts.proto

package contacts

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Contacts service

func NewContactsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "Contacts.SearchContacts",
			Path:    []string{"/contacts"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Contacts.LocateContact",
			Path:    []string{"/contacts/{etag}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Contacts.CreateContact",
			Path:    []string{"/contacts"},
			Method:  []string{"POST"},
			Body:    "input",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Contacts.UpdateContact",
			Path:    []string{"/contacts/{input.etag}"},
			Method:  []string{"PATCH"},
			Body:    "input",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Contacts.DeleteContact",
			Path:    []string{"/contacts/{etag}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
	}
}

// Client API for Contacts service

type ContactsService interface {
	// Search for Contact(s)
	SearchContacts(ctx context.Context, in *SearchContactsRequest, opts ...client.CallOption) (*ContactList, error)
	// Locate Contact source
	LocateContact(ctx context.Context, in *LocateContactRequest, opts ...client.CallOption) (*Contact, error)
	// Create NEW Contact
	CreateContact(ctx context.Context, in *InputContactRequest, opts ...client.CallOption) (*Contact, error)
	// NEW Update of the Contact source
	UpdateContact(ctx context.Context, in *InputContactRequest, opts ...client.CallOption) (*Contact, error)
	// Remove Contact source
	DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...client.CallOption) (*Contact, error)
}

type contactsService struct {
	c    client.Client
	name string
}

func NewContactsService(name string, c client.Client) ContactsService {
	return &contactsService{
		c:    c,
		name: name,
	}
}

func (c *contactsService) SearchContacts(ctx context.Context, in *SearchContactsRequest, opts ...client.CallOption) (*ContactList, error) {
	req := c.c.NewRequest(c.name, "Contacts.SearchContacts", in)
	out := new(ContactList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsService) LocateContact(ctx context.Context, in *LocateContactRequest, opts ...client.CallOption) (*Contact, error) {
	req := c.c.NewRequest(c.name, "Contacts.LocateContact", in)
	out := new(Contact)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsService) CreateContact(ctx context.Context, in *InputContactRequest, opts ...client.CallOption) (*Contact, error) {
	req := c.c.NewRequest(c.name, "Contacts.CreateContact", in)
	out := new(Contact)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsService) UpdateContact(ctx context.Context, in *InputContactRequest, opts ...client.CallOption) (*Contact, error) {
	req := c.c.NewRequest(c.name, "Contacts.UpdateContact", in)
	out := new(Contact)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsService) DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...client.CallOption) (*Contact, error) {
	req := c.c.NewRequest(c.name, "Contacts.DeleteContact", in)
	out := new(Contact)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Contacts service

type ContactsHandler interface {
	// Search for Contact(s)
	SearchContacts(context.Context, *SearchContactsRequest, *ContactList) error
	// Locate Contact source
	LocateContact(context.Context, *LocateContactRequest, *Contact) error
	// Create NEW Contact
	CreateContact(context.Context, *InputContactRequest, *Contact) error
	// NEW Update of the Contact source
	UpdateContact(context.Context, *InputContactRequest, *Contact) error
	// Remove Contact source
	DeleteContact(context.Context, *DeleteContactRequest, *Contact) error
}

func RegisterContactsHandler(s server.Server, hdlr ContactsHandler, opts ...server.HandlerOption) error {
	type contacts interface {
		SearchContacts(ctx context.Context, in *SearchContactsRequest, out *ContactList) error
		LocateContact(ctx context.Context, in *LocateContactRequest, out *Contact) error
		CreateContact(ctx context.Context, in *InputContactRequest, out *Contact) error
		UpdateContact(ctx context.Context, in *InputContactRequest, out *Contact) error
		DeleteContact(ctx context.Context, in *DeleteContactRequest, out *Contact) error
	}
	type Contacts struct {
		contacts
	}
	h := &contactsHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Contacts.SearchContacts",
		Path:    []string{"/contacts"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Contacts.LocateContact",
		Path:    []string{"/contacts/{etag}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Contacts.CreateContact",
		Path:    []string{"/contacts"},
		Method:  []string{"POST"},
		Body:    "input",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Contacts.UpdateContact",
		Path:    []string{"/contacts/{input.etag}"},
		Method:  []string{"PATCH"},
		Body:    "input",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Contacts.DeleteContact",
		Path:    []string{"/contacts/{etag}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&Contacts{h}, opts...))
}

type contactsHandler struct {
	ContactsHandler
}

func (h *contactsHandler) SearchContacts(ctx context.Context, in *SearchContactsRequest, out *ContactList) error {
	return h.ContactsHandler.SearchContacts(ctx, in, out)
}

func (h *contactsHandler) LocateContact(ctx context.Context, in *LocateContactRequest, out *Contact) error {
	return h.ContactsHandler.LocateContact(ctx, in, out)
}

func (h *contactsHandler) CreateContact(ctx context.Context, in *InputContactRequest, out *Contact) error {
	return h.ContactsHandler.CreateContact(ctx, in, out)
}

func (h *contactsHandler) UpdateContact(ctx context.Context, in *InputContactRequest, out *Contact) error {
	return h.ContactsHandler.UpdateContact(ctx, in, out)
}

func (h *contactsHandler) DeleteContact(ctx context.Context, in *DeleteContactRequest, out *Contact) error {
	return h.ContactsHandler.DeleteContact(ctx, in, out)
}
