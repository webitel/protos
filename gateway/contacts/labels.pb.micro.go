// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: gateway/contacts/labels.proto

package contacts

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Labels service

func NewLabelsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "Labels.GetLabels",
			Path:    []string{"/contacts/labels"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Labels.ListLabels",
			Path:    []string{"/contacts/{contact_id}/labels"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Labels.MergeLabels",
			Path:    []string{"/contacts/{contact_id}/labels"},
			Method:  []string{"POST"},
			Body:    "input",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Labels.ResetLabels",
			Path:    []string{"/contacts/{contact_id}/labels"},
			Method:  []string{"PUT"},
			Body:    "input",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Labels.DeleteLabels",
			Path:    []string{"/contacts/{contact_id}/labels"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
	}
}

// Client API for Labels service

type LabelsService interface {
	// Search for Contacts engaged Label(s).
	GetLabels(ctx context.Context, in *GetLabelsRequest, opts ...client.CallOption) (*LabelTags, error)
	// Locate the Contact's associated Label(s).
	ListLabels(ctx context.Context, in *ListLabelsRequest, opts ...client.CallOption) (*LabelList, error)
	// Associate NEW Labels to the Contact.
	MergeLabels(ctx context.Context, in *MergeLabelsRequest, opts ...client.CallOption) (*LabelList, error)
	// Reset Labels to fit the specified final set.
	ResetLabels(ctx context.Context, in *ResetLabelsRequest, opts ...client.CallOption) (*LabelList, error)
	// Remove Contact Labels associations.
	DeleteLabels(ctx context.Context, in *DeleteLabelsRequest, opts ...client.CallOption) (*LabelList, error)
}

type labelsService struct {
	c    client.Client
	name string
}

func NewLabelsService(name string, c client.Client) LabelsService {
	return &labelsService{
		c:    c,
		name: name,
	}
}

func (c *labelsService) GetLabels(ctx context.Context, in *GetLabelsRequest, opts ...client.CallOption) (*LabelTags, error) {
	req := c.c.NewRequest(c.name, "Labels.GetLabels", in)
	out := new(LabelTags)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsService) ListLabels(ctx context.Context, in *ListLabelsRequest, opts ...client.CallOption) (*LabelList, error) {
	req := c.c.NewRequest(c.name, "Labels.ListLabels", in)
	out := new(LabelList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsService) MergeLabels(ctx context.Context, in *MergeLabelsRequest, opts ...client.CallOption) (*LabelList, error) {
	req := c.c.NewRequest(c.name, "Labels.MergeLabels", in)
	out := new(LabelList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsService) ResetLabels(ctx context.Context, in *ResetLabelsRequest, opts ...client.CallOption) (*LabelList, error) {
	req := c.c.NewRequest(c.name, "Labels.ResetLabels", in)
	out := new(LabelList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelsService) DeleteLabels(ctx context.Context, in *DeleteLabelsRequest, opts ...client.CallOption) (*LabelList, error) {
	req := c.c.NewRequest(c.name, "Labels.DeleteLabels", in)
	out := new(LabelList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Labels service

type LabelsHandler interface {
	// Search for Contacts engaged Label(s).
	GetLabels(context.Context, *GetLabelsRequest, *LabelTags) error
	// Locate the Contact's associated Label(s).
	ListLabels(context.Context, *ListLabelsRequest, *LabelList) error
	// Associate NEW Labels to the Contact.
	MergeLabels(context.Context, *MergeLabelsRequest, *LabelList) error
	// Reset Labels to fit the specified final set.
	ResetLabels(context.Context, *ResetLabelsRequest, *LabelList) error
	// Remove Contact Labels associations.
	DeleteLabels(context.Context, *DeleteLabelsRequest, *LabelList) error
}

func RegisterLabelsHandler(s server.Server, hdlr LabelsHandler, opts ...server.HandlerOption) error {
	type labels interface {
		GetLabels(ctx context.Context, in *GetLabelsRequest, out *LabelTags) error
		ListLabels(ctx context.Context, in *ListLabelsRequest, out *LabelList) error
		MergeLabels(ctx context.Context, in *MergeLabelsRequest, out *LabelList) error
		ResetLabels(ctx context.Context, in *ResetLabelsRequest, out *LabelList) error
		DeleteLabels(ctx context.Context, in *DeleteLabelsRequest, out *LabelList) error
	}
	type Labels struct {
		labels
	}
	h := &labelsHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Labels.GetLabels",
		Path:    []string{"/contacts/labels"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Labels.ListLabels",
		Path:    []string{"/contacts/{contact_id}/labels"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Labels.MergeLabels",
		Path:    []string{"/contacts/{contact_id}/labels"},
		Method:  []string{"POST"},
		Body:    "input",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Labels.ResetLabels",
		Path:    []string{"/contacts/{contact_id}/labels"},
		Method:  []string{"PUT"},
		Body:    "input",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Labels.DeleteLabels",
		Path:    []string{"/contacts/{contact_id}/labels"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&Labels{h}, opts...))
}

type labelsHandler struct {
	LabelsHandler
}

func (h *labelsHandler) GetLabels(ctx context.Context, in *GetLabelsRequest, out *LabelTags) error {
	return h.LabelsHandler.GetLabels(ctx, in, out)
}

func (h *labelsHandler) ListLabels(ctx context.Context, in *ListLabelsRequest, out *LabelList) error {
	return h.LabelsHandler.ListLabels(ctx, in, out)
}

func (h *labelsHandler) MergeLabels(ctx context.Context, in *MergeLabelsRequest, out *LabelList) error {
	return h.LabelsHandler.MergeLabels(ctx, in, out)
}

func (h *labelsHandler) ResetLabels(ctx context.Context, in *ResetLabelsRequest, out *LabelList) error {
	return h.LabelsHandler.ResetLabels(ctx, in, out)
}

func (h *labelsHandler) DeleteLabels(ctx context.Context, in *DeleteLabelsRequest, out *LabelList) error {
	return h.LabelsHandler.DeleteLabels(ctx, in, out)
}
