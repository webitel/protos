// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: gateway/contacts/phones.proto

package contacts

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Phones service

func NewPhonesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "Phones.LocatePhone",
			Path:    []string{"/contacts/{contact_id}/phones/{etag}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Phones.ListPhones",
			Path:    []string{"/contacts/{contact_id}/phones"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Phones.MergePhones",
			Path:    []string{"/contacts/{contact_id}/phones"},
			Method:  []string{"POST"},
			Body:    "input",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Phones.ResetPhones",
			Path:    []string{"/contacts/{contact_id}/phones"},
			Method:  []string{"PUT"},
			Body:    "input",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Phones.DeletePhones",
			Path:    []string{"/contacts/{contact_id}/phones"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Phones.UpdatePhone",
			Path:    []string{"/contacts/{contact_id}/phones/{input.etag}"},
			Method:  []string{"PUT"},
			Body:    "input",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Phones.DeletePhone",
			Path:    []string{"/contacts/{contact_id}/phones/{etag}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
	}
}

// Client API for Phones service

type PhonesService interface {
	// Locate the Contact's phone number association.
	LocatePhone(ctx context.Context, in *LocatePhoneRequest, opts ...client.CallOption) (*PhoneNumber, error)
	// Search phone number(s)
	ListPhones(ctx context.Context, in *ListPhonesRequest, opts ...client.CallOption) (*PhoneList, error)
	// Associate phone number(s) with the Contact
	MergePhones(ctx context.Context, in *MergePhonesRequest, opts ...client.CallOption) (*PhoneList, error)
	// Reset the Contact's phone numbers to fit given data set.
	ResetPhones(ctx context.Context, in *ResetPhonesRequest, opts ...client.CallOption) (*PhoneList, error)
	// Remove the Contact's phone number association(s)
	DeletePhones(ctx context.Context, in *DeletePhonesRequest, opts ...client.CallOption) (*PhoneList, error)
	// Update the Contact's phone number association details
	UpdatePhone(ctx context.Context, in *UpdatePhoneRequest, opts ...client.CallOption) (*PhoneList, error)
	// Remove the Contact's phone number
	DeletePhone(ctx context.Context, in *DeletePhoneRequest, opts ...client.CallOption) (*PhoneNumber, error)
}

type phonesService struct {
	c    client.Client
	name string
}

func NewPhonesService(name string, c client.Client) PhonesService {
	return &phonesService{
		c:    c,
		name: name,
	}
}

func (c *phonesService) LocatePhone(ctx context.Context, in *LocatePhoneRequest, opts ...client.CallOption) (*PhoneNumber, error) {
	req := c.c.NewRequest(c.name, "Phones.LocatePhone", in)
	out := new(PhoneNumber)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phonesService) ListPhones(ctx context.Context, in *ListPhonesRequest, opts ...client.CallOption) (*PhoneList, error) {
	req := c.c.NewRequest(c.name, "Phones.ListPhones", in)
	out := new(PhoneList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phonesService) MergePhones(ctx context.Context, in *MergePhonesRequest, opts ...client.CallOption) (*PhoneList, error) {
	req := c.c.NewRequest(c.name, "Phones.MergePhones", in)
	out := new(PhoneList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phonesService) ResetPhones(ctx context.Context, in *ResetPhonesRequest, opts ...client.CallOption) (*PhoneList, error) {
	req := c.c.NewRequest(c.name, "Phones.ResetPhones", in)
	out := new(PhoneList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phonesService) DeletePhones(ctx context.Context, in *DeletePhonesRequest, opts ...client.CallOption) (*PhoneList, error) {
	req := c.c.NewRequest(c.name, "Phones.DeletePhones", in)
	out := new(PhoneList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phonesService) UpdatePhone(ctx context.Context, in *UpdatePhoneRequest, opts ...client.CallOption) (*PhoneList, error) {
	req := c.c.NewRequest(c.name, "Phones.UpdatePhone", in)
	out := new(PhoneList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phonesService) DeletePhone(ctx context.Context, in *DeletePhoneRequest, opts ...client.CallOption) (*PhoneNumber, error) {
	req := c.c.NewRequest(c.name, "Phones.DeletePhone", in)
	out := new(PhoneNumber)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Phones service

type PhonesHandler interface {
	// Locate the Contact's phone number association.
	LocatePhone(context.Context, *LocatePhoneRequest, *PhoneNumber) error
	// Search phone number(s)
	ListPhones(context.Context, *ListPhonesRequest, *PhoneList) error
	// Associate phone number(s) with the Contact
	MergePhones(context.Context, *MergePhonesRequest, *PhoneList) error
	// Reset the Contact's phone numbers to fit given data set.
	ResetPhones(context.Context, *ResetPhonesRequest, *PhoneList) error
	// Remove the Contact's phone number association(s)
	DeletePhones(context.Context, *DeletePhonesRequest, *PhoneList) error
	// Update the Contact's phone number association details
	UpdatePhone(context.Context, *UpdatePhoneRequest, *PhoneList) error
	// Remove the Contact's phone number
	DeletePhone(context.Context, *DeletePhoneRequest, *PhoneNumber) error
}

func RegisterPhonesHandler(s server.Server, hdlr PhonesHandler, opts ...server.HandlerOption) error {
	type phones interface {
		LocatePhone(ctx context.Context, in *LocatePhoneRequest, out *PhoneNumber) error
		ListPhones(ctx context.Context, in *ListPhonesRequest, out *PhoneList) error
		MergePhones(ctx context.Context, in *MergePhonesRequest, out *PhoneList) error
		ResetPhones(ctx context.Context, in *ResetPhonesRequest, out *PhoneList) error
		DeletePhones(ctx context.Context, in *DeletePhonesRequest, out *PhoneList) error
		UpdatePhone(ctx context.Context, in *UpdatePhoneRequest, out *PhoneList) error
		DeletePhone(ctx context.Context, in *DeletePhoneRequest, out *PhoneNumber) error
	}
	type Phones struct {
		phones
	}
	h := &phonesHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Phones.LocatePhone",
		Path:    []string{"/contacts/{contact_id}/phones/{etag}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Phones.ListPhones",
		Path:    []string{"/contacts/{contact_id}/phones"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Phones.MergePhones",
		Path:    []string{"/contacts/{contact_id}/phones"},
		Method:  []string{"POST"},
		Body:    "input",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Phones.ResetPhones",
		Path:    []string{"/contacts/{contact_id}/phones"},
		Method:  []string{"PUT"},
		Body:    "input",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Phones.DeletePhones",
		Path:    []string{"/contacts/{contact_id}/phones"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Phones.UpdatePhone",
		Path:    []string{"/contacts/{contact_id}/phones/{input.etag}"},
		Method:  []string{"PUT"},
		Body:    "input",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Phones.DeletePhone",
		Path:    []string{"/contacts/{contact_id}/phones/{etag}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&Phones{h}, opts...))
}

type phonesHandler struct {
	PhonesHandler
}

func (h *phonesHandler) LocatePhone(ctx context.Context, in *LocatePhoneRequest, out *PhoneNumber) error {
	return h.PhonesHandler.LocatePhone(ctx, in, out)
}

func (h *phonesHandler) ListPhones(ctx context.Context, in *ListPhonesRequest, out *PhoneList) error {
	return h.PhonesHandler.ListPhones(ctx, in, out)
}

func (h *phonesHandler) MergePhones(ctx context.Context, in *MergePhonesRequest, out *PhoneList) error {
	return h.PhonesHandler.MergePhones(ctx, in, out)
}

func (h *phonesHandler) ResetPhones(ctx context.Context, in *ResetPhonesRequest, out *PhoneList) error {
	return h.PhonesHandler.ResetPhones(ctx, in, out)
}

func (h *phonesHandler) DeletePhones(ctx context.Context, in *DeletePhonesRequest, out *PhoneList) error {
	return h.PhonesHandler.DeletePhones(ctx, in, out)
}

func (h *phonesHandler) UpdatePhone(ctx context.Context, in *UpdatePhoneRequest, out *PhoneList) error {
	return h.PhonesHandler.UpdatePhone(ctx, in, out)
}

func (h *phonesHandler) DeletePhone(ctx context.Context, in *DeletePhoneRequest, out *PhoneNumber) error {
	return h.PhonesHandler.DeletePhone(ctx, in, out)
}
