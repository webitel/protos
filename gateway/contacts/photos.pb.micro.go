// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: gateway/contacts/photos.proto

package contacts

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Photos service

func NewPhotosEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "Photos.LocatePhoto",
			Path:    []string{"/contacts/{contact_id}/photos/{id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Photos.SearchPhotos",
			Path:    []string{"/contacts/{contact_id}/photos"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Photos.CreatePhotos",
			Path:    []string{"/contacts/{contact_id}/photos"},
			Method:  []string{"POST"},
			Body:    "input",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Photos.UpdatePhotos",
			Path:    []string{"/contacts/{contact_id}/photos"},
			Method:  []string{"PUT"},
			Body:    "input",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Photos.UpdatePhoto",
			Path:    []string{"/contacts/{contact_id}/photos/{input.etag}"},
			Method:  []string{"PUT"},
			Body:    "input",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Photos.DeletePhotos",
			Path:    []string{"/contacts/{contact_id}/photos"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Photos.DeletePhoto",
			Path:    []string{"/contacts/{contact_id}/photos/{etag}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
	}
}

// Client API for Photos service

type PhotosService interface {
	// Upload an image or photo
	UploadPhoto(ctx context.Context, opts ...client.CallOption) (Photos_UploadPhotoService, error)
	// Locate the contact's photo link.
	LocatePhoto(ctx context.Context, in *LocatePhotoRequest, opts ...client.CallOption) (*Photo, error)
	// Search the contact's photo(s)
	SearchPhotos(ctx context.Context, in *SearchPhotosRequest, opts ...client.CallOption) (*PhotoList, error)
	// Link photo(s) with the contact
	CreatePhotos(ctx context.Context, in *CreatePhotosRequest, opts ...client.CallOption) (*PhotoList, error)
	// Reset the contact's photos to fit given data set.
	UpdatePhotos(ctx context.Context, in *UpdatePhotosRequest, opts ...client.CallOption) (*PhotoList, error)
	// Update the contact's photo link details
	UpdatePhoto(ctx context.Context, in *UpdatePhotoRequest, opts ...client.CallOption) (*Photo, error)
	// Remove the contact's photo link(s)
	DeletePhotos(ctx context.Context, in *DeletePhotosRequest, opts ...client.CallOption) (*PhotoList, error)
	// Remove the contact's photo
	DeletePhoto(ctx context.Context, in *DeletePhotoRequest, opts ...client.CallOption) (*Photo, error)
}

type photosService struct {
	c    client.Client
	name string
}

func NewPhotosService(name string, c client.Client) PhotosService {
	return &photosService{
		c:    c,
		name: name,
	}
}

func (c *photosService) UploadPhoto(ctx context.Context, opts ...client.CallOption) (Photos_UploadPhotoService, error) {
	req := c.c.NewRequest(c.name, "Photos.UploadPhoto", &UploadMediaRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &photosServiceUploadPhoto{stream}, nil
}

type Photos_UploadPhotoService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*UploadMediaRequest) error
	Recv() (*UploadMediaResponse, error)
}

type photosServiceUploadPhoto struct {
	stream client.Stream
}

func (x *photosServiceUploadPhoto) Close() error {
	return x.stream.Close()
}

func (x *photosServiceUploadPhoto) Context() context.Context {
	return x.stream.Context()
}

func (x *photosServiceUploadPhoto) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *photosServiceUploadPhoto) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *photosServiceUploadPhoto) Send(m *UploadMediaRequest) error {
	return x.stream.Send(m)
}

func (x *photosServiceUploadPhoto) Recv() (*UploadMediaResponse, error) {
	m := new(UploadMediaResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *photosService) LocatePhoto(ctx context.Context, in *LocatePhotoRequest, opts ...client.CallOption) (*Photo, error) {
	req := c.c.NewRequest(c.name, "Photos.LocatePhoto", in)
	out := new(Photo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosService) SearchPhotos(ctx context.Context, in *SearchPhotosRequest, opts ...client.CallOption) (*PhotoList, error) {
	req := c.c.NewRequest(c.name, "Photos.SearchPhotos", in)
	out := new(PhotoList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosService) CreatePhotos(ctx context.Context, in *CreatePhotosRequest, opts ...client.CallOption) (*PhotoList, error) {
	req := c.c.NewRequest(c.name, "Photos.CreatePhotos", in)
	out := new(PhotoList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosService) UpdatePhotos(ctx context.Context, in *UpdatePhotosRequest, opts ...client.CallOption) (*PhotoList, error) {
	req := c.c.NewRequest(c.name, "Photos.UpdatePhotos", in)
	out := new(PhotoList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosService) UpdatePhoto(ctx context.Context, in *UpdatePhotoRequest, opts ...client.CallOption) (*Photo, error) {
	req := c.c.NewRequest(c.name, "Photos.UpdatePhoto", in)
	out := new(Photo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosService) DeletePhotos(ctx context.Context, in *DeletePhotosRequest, opts ...client.CallOption) (*PhotoList, error) {
	req := c.c.NewRequest(c.name, "Photos.DeletePhotos", in)
	out := new(PhotoList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photosService) DeletePhoto(ctx context.Context, in *DeletePhotoRequest, opts ...client.CallOption) (*Photo, error) {
	req := c.c.NewRequest(c.name, "Photos.DeletePhoto", in)
	out := new(Photo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Photos service

type PhotosHandler interface {
	// Upload an image or photo
	UploadPhoto(context.Context, Photos_UploadPhotoStream) error
	// Locate the contact's photo link.
	LocatePhoto(context.Context, *LocatePhotoRequest, *Photo) error
	// Search the contact's photo(s)
	SearchPhotos(context.Context, *SearchPhotosRequest, *PhotoList) error
	// Link photo(s) with the contact
	CreatePhotos(context.Context, *CreatePhotosRequest, *PhotoList) error
	// Reset the contact's photos to fit given data set.
	UpdatePhotos(context.Context, *UpdatePhotosRequest, *PhotoList) error
	// Update the contact's photo link details
	UpdatePhoto(context.Context, *UpdatePhotoRequest, *Photo) error
	// Remove the contact's photo link(s)
	DeletePhotos(context.Context, *DeletePhotosRequest, *PhotoList) error
	// Remove the contact's photo
	DeletePhoto(context.Context, *DeletePhotoRequest, *Photo) error
}

func RegisterPhotosHandler(s server.Server, hdlr PhotosHandler, opts ...server.HandlerOption) error {
	type photos interface {
		UploadPhoto(ctx context.Context, stream server.Stream) error
		LocatePhoto(ctx context.Context, in *LocatePhotoRequest, out *Photo) error
		SearchPhotos(ctx context.Context, in *SearchPhotosRequest, out *PhotoList) error
		CreatePhotos(ctx context.Context, in *CreatePhotosRequest, out *PhotoList) error
		UpdatePhotos(ctx context.Context, in *UpdatePhotosRequest, out *PhotoList) error
		UpdatePhoto(ctx context.Context, in *UpdatePhotoRequest, out *Photo) error
		DeletePhotos(ctx context.Context, in *DeletePhotosRequest, out *PhotoList) error
		DeletePhoto(ctx context.Context, in *DeletePhotoRequest, out *Photo) error
	}
	type Photos struct {
		photos
	}
	h := &photosHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Photos.LocatePhoto",
		Path:    []string{"/contacts/{contact_id}/photos/{id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Photos.SearchPhotos",
		Path:    []string{"/contacts/{contact_id}/photos"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Photos.CreatePhotos",
		Path:    []string{"/contacts/{contact_id}/photos"},
		Method:  []string{"POST"},
		Body:    "input",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Photos.UpdatePhotos",
		Path:    []string{"/contacts/{contact_id}/photos"},
		Method:  []string{"PUT"},
		Body:    "input",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Photos.UpdatePhoto",
		Path:    []string{"/contacts/{contact_id}/photos/{input.etag}"},
		Method:  []string{"PUT"},
		Body:    "input",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Photos.DeletePhotos",
		Path:    []string{"/contacts/{contact_id}/photos"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Photos.DeletePhoto",
		Path:    []string{"/contacts/{contact_id}/photos/{etag}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&Photos{h}, opts...))
}

type photosHandler struct {
	PhotosHandler
}

func (h *photosHandler) UploadPhoto(ctx context.Context, stream server.Stream) error {
	return h.PhotosHandler.UploadPhoto(ctx, &photosUploadPhotoStream{stream})
}

type Photos_UploadPhotoStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*UploadMediaResponse) error
	Recv() (*UploadMediaRequest, error)
}

type photosUploadPhotoStream struct {
	stream server.Stream
}

func (x *photosUploadPhotoStream) Close() error {
	return x.stream.Close()
}

func (x *photosUploadPhotoStream) Context() context.Context {
	return x.stream.Context()
}

func (x *photosUploadPhotoStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *photosUploadPhotoStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *photosUploadPhotoStream) Send(m *UploadMediaResponse) error {
	return x.stream.Send(m)
}

func (x *photosUploadPhotoStream) Recv() (*UploadMediaRequest, error) {
	m := new(UploadMediaRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *photosHandler) LocatePhoto(ctx context.Context, in *LocatePhotoRequest, out *Photo) error {
	return h.PhotosHandler.LocatePhoto(ctx, in, out)
}

func (h *photosHandler) SearchPhotos(ctx context.Context, in *SearchPhotosRequest, out *PhotoList) error {
	return h.PhotosHandler.SearchPhotos(ctx, in, out)
}

func (h *photosHandler) CreatePhotos(ctx context.Context, in *CreatePhotosRequest, out *PhotoList) error {
	return h.PhotosHandler.CreatePhotos(ctx, in, out)
}

func (h *photosHandler) UpdatePhotos(ctx context.Context, in *UpdatePhotosRequest, out *PhotoList) error {
	return h.PhotosHandler.UpdatePhotos(ctx, in, out)
}

func (h *photosHandler) UpdatePhoto(ctx context.Context, in *UpdatePhotoRequest, out *Photo) error {
	return h.PhotosHandler.UpdatePhoto(ctx, in, out)
}

func (h *photosHandler) DeletePhotos(ctx context.Context, in *DeletePhotosRequest, out *PhotoList) error {
	return h.PhotosHandler.DeletePhotos(ctx, in, out)
}

func (h *photosHandler) DeletePhoto(ctx context.Context, in *DeletePhotoRequest, out *Photo) error {
	return h.PhotosHandler.DeletePhoto(ctx, in, out)
}
