// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: gateway/contacts/languages.proto

package contacts

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Languages service

func NewLanguagesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "Languages.GetContactLanguages",
			Path:    []string{"/contacts/{contact_id}/languages"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Languages.AddContactLanguages",
			Path:    []string{"/contacts/{contact_id}/languages"},
			Method:  []string{"POST"},
			Body:    "input",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Languages.SetContactLanguages",
			Path:    []string{"/contacts/{contact_id}/languages"},
			Method:  []string{"PUT"},
			Body:    "input",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Languages.SetContactLanguage",
			Path:    []string{"/contacts/{contact_id}/languages/{input.etag}"},
			Method:  []string{"PUT"},
			Body:    "input",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Languages.DelContactLanguages",
			Path:    []string{"/contacts/{contact_id}/languages"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "Languages.DelContactLanguage",
			Path:    []string{"/contacts/{contact_id}/languages/{etag}"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
	}
}

// Client API for Languages service

type LanguagesService interface {
	// List of the Contact's language association(s).
	GetContactLanguages(ctx context.Context, in *SearchLanguagesRequest, opts ...client.CallOption) (*LanguageList, error)
	// Associate more language(s) with the Contact.
	AddContactLanguages(ctx context.Context, in *CreateLanguagesRequest, opts ...client.CallOption) (*LanguageList, error)
	// Reset all Contact's languages to fit the specified fixed set.
	SetContactLanguages(ctx context.Context, in *UpdateLanguagesRequest, opts ...client.CallOption) (*LanguageList, error)
	// Update the Contact's language association details.
	SetContactLanguage(ctx context.Context, in *UpdateLanguageRequest, opts ...client.CallOption) (*LanguageList, error)
	// Remove the Contact's language association(s).
	DelContactLanguages(ctx context.Context, in *DeleteLanguagesRequest, opts ...client.CallOption) (*LanguageList, error)
	// Remove the Contact's language association.
	DelContactLanguage(ctx context.Context, in *DeleteLanguageRequest, opts ...client.CallOption) (*Language, error)
}

type languagesService struct {
	c    client.Client
	name string
}

func NewLanguagesService(name string, c client.Client) LanguagesService {
	return &languagesService{
		c:    c,
		name: name,
	}
}

func (c *languagesService) GetContactLanguages(ctx context.Context, in *SearchLanguagesRequest, opts ...client.CallOption) (*LanguageList, error) {
	req := c.c.NewRequest(c.name, "Languages.GetContactLanguages", in)
	out := new(LanguageList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languagesService) AddContactLanguages(ctx context.Context, in *CreateLanguagesRequest, opts ...client.CallOption) (*LanguageList, error) {
	req := c.c.NewRequest(c.name, "Languages.AddContactLanguages", in)
	out := new(LanguageList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languagesService) SetContactLanguages(ctx context.Context, in *UpdateLanguagesRequest, opts ...client.CallOption) (*LanguageList, error) {
	req := c.c.NewRequest(c.name, "Languages.SetContactLanguages", in)
	out := new(LanguageList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languagesService) SetContactLanguage(ctx context.Context, in *UpdateLanguageRequest, opts ...client.CallOption) (*LanguageList, error) {
	req := c.c.NewRequest(c.name, "Languages.SetContactLanguage", in)
	out := new(LanguageList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languagesService) DelContactLanguages(ctx context.Context, in *DeleteLanguagesRequest, opts ...client.CallOption) (*LanguageList, error) {
	req := c.c.NewRequest(c.name, "Languages.DelContactLanguages", in)
	out := new(LanguageList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languagesService) DelContactLanguage(ctx context.Context, in *DeleteLanguageRequest, opts ...client.CallOption) (*Language, error) {
	req := c.c.NewRequest(c.name, "Languages.DelContactLanguage", in)
	out := new(Language)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Languages service

type LanguagesHandler interface {
	// List of the Contact's language association(s).
	GetContactLanguages(context.Context, *SearchLanguagesRequest, *LanguageList) error
	// Associate more language(s) with the Contact.
	AddContactLanguages(context.Context, *CreateLanguagesRequest, *LanguageList) error
	// Reset all Contact's languages to fit the specified fixed set.
	SetContactLanguages(context.Context, *UpdateLanguagesRequest, *LanguageList) error
	// Update the Contact's language association details.
	SetContactLanguage(context.Context, *UpdateLanguageRequest, *LanguageList) error
	// Remove the Contact's language association(s).
	DelContactLanguages(context.Context, *DeleteLanguagesRequest, *LanguageList) error
	// Remove the Contact's language association.
	DelContactLanguage(context.Context, *DeleteLanguageRequest, *Language) error
}

func RegisterLanguagesHandler(s server.Server, hdlr LanguagesHandler, opts ...server.HandlerOption) error {
	type languages interface {
		GetContactLanguages(ctx context.Context, in *SearchLanguagesRequest, out *LanguageList) error
		AddContactLanguages(ctx context.Context, in *CreateLanguagesRequest, out *LanguageList) error
		SetContactLanguages(ctx context.Context, in *UpdateLanguagesRequest, out *LanguageList) error
		SetContactLanguage(ctx context.Context, in *UpdateLanguageRequest, out *LanguageList) error
		DelContactLanguages(ctx context.Context, in *DeleteLanguagesRequest, out *LanguageList) error
		DelContactLanguage(ctx context.Context, in *DeleteLanguageRequest, out *Language) error
	}
	type Languages struct {
		languages
	}
	h := &languagesHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Languages.GetContactLanguages",
		Path:    []string{"/contacts/{contact_id}/languages"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Languages.AddContactLanguages",
		Path:    []string{"/contacts/{contact_id}/languages"},
		Method:  []string{"POST"},
		Body:    "input",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Languages.SetContactLanguages",
		Path:    []string{"/contacts/{contact_id}/languages"},
		Method:  []string{"PUT"},
		Body:    "input",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Languages.SetContactLanguage",
		Path:    []string{"/contacts/{contact_id}/languages/{input.etag}"},
		Method:  []string{"PUT"},
		Body:    "input",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Languages.DelContactLanguages",
		Path:    []string{"/contacts/{contact_id}/languages"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "Languages.DelContactLanguage",
		Path:    []string{"/contacts/{contact_id}/languages/{etag}"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&Languages{h}, opts...))
}

type languagesHandler struct {
	LanguagesHandler
}

func (h *languagesHandler) GetContactLanguages(ctx context.Context, in *SearchLanguagesRequest, out *LanguageList) error {
	return h.LanguagesHandler.GetContactLanguages(ctx, in, out)
}

func (h *languagesHandler) AddContactLanguages(ctx context.Context, in *CreateLanguagesRequest, out *LanguageList) error {
	return h.LanguagesHandler.AddContactLanguages(ctx, in, out)
}

func (h *languagesHandler) SetContactLanguages(ctx context.Context, in *UpdateLanguagesRequest, out *LanguageList) error {
	return h.LanguagesHandler.SetContactLanguages(ctx, in, out)
}

func (h *languagesHandler) SetContactLanguage(ctx context.Context, in *UpdateLanguageRequest, out *LanguageList) error {
	return h.LanguagesHandler.SetContactLanguage(ctx, in, out)
}

func (h *languagesHandler) DelContactLanguages(ctx context.Context, in *DeleteLanguagesRequest, out *LanguageList) error {
	return h.LanguagesHandler.DelContactLanguages(ctx, in, out)
}

func (h *languagesHandler) DelContactLanguage(ctx context.Context, in *DeleteLanguageRequest, out *Language) error {
	return h.LanguagesHandler.DelContactLanguage(ctx, in, out)
}
