{
  "swagger": "2.0",
  "info": {
    "title": "Webitel Contacts ReSTfull API",
    "version": "v23.10",
    "contact": {
      "name": "Webitel LLC",
      "url": "https://www.webitel.com",
      "email": "support@webitel.com"
    },
    "license": {
      "name": "MIT"
    }
  },
  "tags": [
    {
      "name": "Presence"
    },
    {
      "name": "Customers"
    },
    {
      "name": "Permissions"
    },
    {
      "name": "Users"
    },
    {
      "name": "Roles"
    },
    {
      "name": "AC"
    },
    {
      "name": "AccessStore"
    },
    {
      "name": "OAuth2"
    },
    {
      "name": "SA"
    },
    {
      "name": "Auth"
    },
    {
      "name": "Devices"
    },
    {
      "name": "CallManager"
    },
    {
      "name": "CA"
    },
    {
      "name": "Classes"
    },
    {
      "name": "Comments"
    },
    {
      "name": "Labels"
    },
    {
      "name": "Emails"
    },
    {
      "name": "Upload"
    },
    {
      "name": "Photos"
    },
    {
      "name": "Phones"
    },
    {
      "name": "Managers"
    },
    {
      "name": "Variables"
    },
    {
      "name": "Languages"
    },
    {
      "name": "Timezones"
    },
    {
      "name": "IMClients"
    },
    {
      "name": "ContactGroups"
    },
    {
      "name": "Contacts"
    },
    {
      "name": "DynamicConditions"
    },
    {
      "name": "DynamicGroups"
    },
    {
      "name": "Groups"
    },
    {
      "name": "Timeline"
    },
    {
      "name": "Records"
    },
    {
      "name": "Types"
    },
    {
      "name": "Dictionaries"
    },
    {
      "name": "Extensions"
    },
    {
      "name": "Domains"
    },
    {
      "name": "Articles"
    },
    {
      "name": "KnowledgebaseSearch"
    },
    {
      "name": "Spaces"
    },
    {
      "name": "Tags"
    },
    {
      "name": "LDAP"
    },
    {
      "name": "OAuth2Federation"
    },
    {
      "name": "TwoFactorAuthentication"
    },
    {
      "name": "UserAccessTokens"
    },
    {
      "name": "UserSettings"
    }
  ],
  "host": "nx.webitel.org",
  "basePath": "/api",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/acl/{object.name}/{object.id}": {
      "get": {
        "summary": "default: TODO: indicate objclass=default as a default rights repo",
        "operationId": "ListDefaultAccess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListAccessResponseV1"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "object.name",
            "description": "display name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "object.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "grantor",
            "description": "--- filters ---\n\n[optional] [FROM] each rule owner is any of role(s) id; user -or- role",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "grantee",
            "description": "[optional] [TO] subject role(s) id; user -or- role",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "granted",
            "description": "[xrwdxrwd] [R]ecord-[b]ased-[A]ccess-[C]ontrol level check(!)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "[optional] [TO] subject.name ILIKE ?q=; user -or- role",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "----- Select Options -------------------------\n\nattributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "size",
            "description": "pagedResultsControl\n\ndefault: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "default: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "AccessStore"
        ]
      }
    },
    "/acl/{object.name}/{object.id}/grantor/{grantor}": {
      "patch": {
        "summary": "Same as UpdateAccess except for DEFAULT access control system",
        "operationId": "ToggleDefaultAccess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiToggleDefaultAccessResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "object.name",
            "description": "display name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "object.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "grantor",
            "description": "[FOR] creator user/role",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccessStoreToggleDefaultAccessBody"
            }
          }
        ],
        "tags": [
          "AccessStore"
        ]
      }
    },
    "/contacts": {
      "get": {
        "summary": "Search for Contact(s)",
        "description": "| Field       | Type \n| ----------- | ---- \n| **----------- READ-ONLY -----------** | \n| `id`        | int64 \n| `ver`       | int32 \n| `etag`      | string \n| **---------- OPERATIONAL ----------** | \n| `created_at` | int64(epoch:milli) \n| `created_by` | lookup(user) \n| `updated_at` | int64(epoch:milli) \n| `updated_by` | lookup(user) \n| **---------- ATTRIBUTES -----------** | \n| `name`      | name! \n| `about`     | string \n| `labels`    | list[label!] \n| `emails`    | list[email!] \n| `photos`    | list[photo!] \n| `phones`    | list[phone!] \n| `managers`  | list[manager!] \n| `comments`  | list[comment!] \n| `addresses` | list[address!] \n| `languages` | list[language!] \n| `timezones` | list[timezone!] \n| `variables` | list[variable!] \n| `imclients` | list[imClient!] \n",
        "operationId": "SearchContacts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "Page number of result records.   _default(1); offset=(size*(page-1));_\n\n```javascript\nlet\n    offset = 0\n  , page = req.page\n;\nif (page \u003c= 0)\n    page = 1;\nif (page \u003e 1)\n    offset = ((page-1)*size);\n// . . .\n```",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Limit of result page records count.   _default(16); limit=(size\u003c=0?-1:size+1);_\n\n```javascript\nconst\n    default = 16\n  , maximum = 32\n;\nlet limit = req.size;\nif (limit \u003c= 0)\n    limit = default;\nif (maximum \u003c limit)\n    limit = maximum;\n// . . .\n```",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term:\n`?` - matches any character\n`*` - matches 0 or more characters\nUsed to query records within a set of `qin` fields, eg: name,emails{type},labels etc...",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort result dataset of records by fields.\n```\nsort ::= *( ORDER name )\n\nORDER  = ASC / DESC\nDESC   = \"-\" / \"!\"\nASC    = [ \"+\" ]   ; Default\n```\n\nFields available\n\n- `id`(seq)\n- `domain`{name}\n- `created_at`\n- `created_by`{name}\n- `updated_at`\n- `updated_by`{name}\n\nUse ?fields=`field.sort()` option to sort Edge fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "default": "id",
              "pattern": "^[+|-|!]?\\w+$"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields [Q]uery to build result dataset record.\n```\nfields ::= field [ *( \",\" field ) ]\nfield  ::= name [ *( func ) ] [ inner ]\ninner  ::= \"{\" fields \"}\"\nfuncs  ::= *( func )\nfunc   ::= \".\" name \"(\" [ args ] \")\"\nname   ::= ALPHA / DIGIT / USCORE\n\nALPHA    = %x41-5A / %x61-7A  ; \"A\"-\"Z\" / \"a\"-\"z\"\nDIGIT    = %x30-39            ; \"0\"-\"9\"\nUSCORE   = %x5F ; underscore  ; \"_\"\n```",
            "in": "query",
            "required": false,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "default": "*"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Records with unique IDentifier(s).\nAccept: `id` -or- `etag`.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "qin",
            "description": "[Q]uery[IN] is a set of search fields for term `q`.\nDefault: `name{common_name}`.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "mode",
            "description": "Source access mode requirement.\n\n - READ: Can `fetch` record. [GET]\n - WRITE: Can `update` record. [PUT|PATCH]\n - DELETE: Can `delete` record. [DELETE]",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "READ",
              "WRITE",
              "DELETE"
            ],
            "default": "READ"
          },
          {
            "name": "not_id_group",
            "description": "Excludes contacts that belong to the specified group ID.\n- Filters out contacts associated with the given `group_id`.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "group",
            "description": "Filters contacts by the specified group(s).\n- Includes only contacts that belong to one or more of the given group Group(s).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "owner",
            "description": "Filters contacts by the specified owner(s).\n- Includes only contacts whose owner matches one or more of the given Owner(s).\n- The owner ID corresponds to `contact_id` in the `directory.wbt_user` table.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "label",
            "description": "Filters contacts by the specified label(s).\n- Includes only contacts that have one or more of the given Label(s).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "user",
            "description": "Filters contacts based on whether they are user-associated.\n- `true`  → Includes only user-associated contacts.\n- `false` → Includes only contacts that are NOT user-associated.\n- A contact is considered user-associated if it exists in `directory.wbt_user`.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Contacts"
        ]
      },
      "post": {
        "summary": "Create NEW Contact",
        "operationId": "CreateContact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcontactsContact"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "input",
            "description": "NEW Contact source changes",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsInputContact"
            }
          },
          {
            "name": "fields",
            "description": "Source Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Contacts"
        ]
      }
    },
    "/contacts/groups": {
      "get": {
        "summary": "Retrieve a list of groups or search groups",
        "operationId": "ListGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsGroupList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Filter by unique IDs.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search term: group name;\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Filter by group name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "description": "Filter by group type.\n\n - GROUP_TYPE_UNSPECIFIED: Default value\n - STATIC: Static group\n - DYNAMIC: Dynamic group",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "GROUP_TYPE_UNSPECIFIED",
              "STATIC",
              "DYNAMIC"
            ],
            "default": "GROUP_TYPE_UNSPECIFIED"
          },
          {
            "name": "enabled",
            "description": "Filter by only enabled group",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Groups"
        ]
      },
      "post": {
        "summary": "Create a new group",
        "operationId": "CreateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request message for creating a new group.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsCreateGroupRequest"
            }
          }
        ],
        "tags": [
          "Groups"
        ]
      }
    },
    "/contacts/groups/conditions/{id}": {
      "get": {
        "summary": "Locate a condition by ID",
        "operationId": "LocateCondition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLocateConditionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Unique ID of the condition.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "DynamicConditions"
        ]
      },
      "delete": {
        "summary": "Delete a condition",
        "operationId": "DeleteCondition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsCondition"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the condition to delete.\n\nUnique ID of the condition.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "DynamicConditions"
        ]
      },
      "put": {
        "summary": "Update an existing condition",
        "operationId": "UpdateCondition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsCondition"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the condition to update.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "description": "Input details for the condition.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsInputCondition"
            }
          }
        ],
        "tags": [
          "DynamicConditions"
        ]
      },
      "patch": {
        "summary": "Update an existing condition",
        "operationId": "UpdateCondition2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsCondition"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the condition to update.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "description": "Input details for the condition.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsInputCondition"
            }
          }
        ],
        "tags": [
          "DynamicConditions"
        ]
      }
    },
    "/contacts/groups/contacts:attach": {
      "post": {
        "summary": "Attach contacts to multiple groups",
        "operationId": "AddContactsToGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request message for adding contacts to a group.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsAddContactsToGroupRequest"
            }
          }
        ],
        "tags": [
          "Groups"
        ]
      }
    },
    "/contacts/groups/dynamic": {
      "get": {
        "summary": "Retrieve a list of dynamic groups or search dynamic groups",
        "operationId": "ListDynamicGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsDynamicGroupList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Filter by unique IDs.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search term: group name;\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Filter by group name.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DynamicGroups"
        ]
      },
      "post": {
        "summary": "Create a new dynamic group",
        "operationId": "CreateDynamicGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsDynamicGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request message for creating a new dynamic group.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsCreateDynamicGroupRequest"
            }
          }
        ],
        "tags": [
          "DynamicGroups"
        ]
      }
    },
    "/contacts/groups/{group_id}/conditions": {
      "get": {
        "summary": "Retrieve a list of conditions",
        "operationId": "ListConditions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsConditionList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "group_id",
            "description": "The ID of the group to which the conditions belong.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search term for conditions.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Filter by unique IDs.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "DynamicConditions"
        ]
      },
      "post": {
        "summary": "Create a new condition",
        "operationId": "CreateCondition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsCondition"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "group_id",
            "description": "The ID of the group to which the condition belongs.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DynamicConditionsCreateConditionBody"
            }
          }
        ],
        "tags": [
          "DynamicConditions"
        ]
      }
    },
    "/contacts/groups/{group_id}/contact": {
      "delete": {
        "summary": "Remove contacts from a group",
        "operationId": "RemoveContactsFromGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "group_id",
            "description": "The unique ID of the group.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "contact_ids",
            "description": "List of contact IDs to remove from the group.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Groups"
        ]
      }
    },
    "/contacts/groups/{id}": {
      "get": {
        "summary": "Locate a group by ID",
        "operationId": "LocateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLocateGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the group to locate.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Groups"
        ]
      },
      "delete": {
        "summary": "Delete a group",
        "operationId": "DeleteGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the group to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Groups"
        ]
      },
      "put": {
        "summary": "Update an existing group",
        "operationId": "UpdateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the group to update.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsInputGroup"
            }
          }
        ],
        "tags": [
          "Groups"
        ]
      },
      "patch": {
        "summary": "Update an existing group",
        "operationId": "UpdateGroup2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the group to update.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsInputGroup"
            }
          }
        ],
        "tags": [
          "Groups"
        ]
      }
    },
    "/contacts/groups/{id}/dynamic": {
      "get": {
        "summary": "Locate a dynamic group by ID",
        "operationId": "LocateDynamicGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLocateDynamicGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "DynamicGroups"
        ]
      },
      "delete": {
        "summary": "Delete a dynamic group",
        "operationId": "DeleteDynamicGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsDynamicGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the dynamic group to delete.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "DynamicGroups"
        ]
      },
      "put": {
        "summary": "Update an existing dynamic group",
        "operationId": "UpdateDynamicGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsDynamicGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the dynamic group to update.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "description": "Input details for the dynamic group.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsDynamicGroupInput"
            }
          }
        ],
        "tags": [
          "DynamicGroups"
        ]
      },
      "patch": {
        "summary": "Update an existing dynamic group",
        "operationId": "UpdateDynamicGroup2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsDynamicGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the dynamic group to update.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "description": "Input details for the dynamic group.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsDynamicGroupInput"
            }
          }
        ],
        "tags": [
          "DynamicGroups"
        ]
      }
    },
    "/contacts/labels": {
      "get": {
        "summary": "Search for Contacts engaged Label(s).",
        "operationId": "GetLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLabelTags"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = ((page-1)*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size+1)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: label.\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Labels"
        ]
      }
    },
    "/contacts/{contact_id}/comments": {
      "get": {
        "summary": "Search for Contact Comment(s) ...",
        "operationId": "SearchComments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsCommentList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number of result. offset = ((page-1)*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size of result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: comment text;\n`?` - matches any character\n`*` - matches 0 or more characters\n\nterm-of-search: lookup[name|...]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Comment(s) with unique ID only.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "mode",
            "description": "The requirement of [M]andatory [A]ccess [C]ontrol.\n\n - READ: Can `fetch` record. [GET]\n - WRITE: Can `update` record. [PUT|PATCH]\n - DELETE: Can `delete` record. [DELETE]",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "READ",
              "WRITE",
              "DELETE"
            ],
            "default": "READ"
          },
          {
            "name": "date.since",
            "description": "Since timestamp(milli). Not before.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "date.until",
            "description": "Until timestamp(milli). Not after.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "author.id",
            "description": "Reference Object unique ID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "author.type",
            "description": "Reference Object well-known type.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "author.name",
            "description": "Reference Object display name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "editor.id",
            "description": "Reference Object unique ID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "editor.type",
            "description": "Reference Object well-known type.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "editor.name",
            "description": "Reference Object display name.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Comments"
        ]
      },
      "post": {
        "summary": "Publish comment for a Contact.",
        "operationId": "PublishComment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsComment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Comment for a Contact publication.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsInputComment"
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Comments"
        ]
      }
    },
    "/contacts/{contact_id}/comments/{etag}": {
      "delete": {
        "summary": "Delete Comment(s) for Contact ...",
        "operationId": "DeleteComment",
        "responses": {
          "200": {
            "description": "Comment dataset page.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsComment"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Set of unique ID(s) to remove.",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Comments"
        ]
      },
      "put": {
        "summary": "Update (edit) specific Comment text owned",
        "operationId": "UpdateComment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsComment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resorce.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Edition of the Comment.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "text": "This is a new note about the contact's recent activity. So ..."
              },
              "properties": {
                "text": {
                  "type": "string",
                  "description": "NEW Text of the comment."
                },
                "format": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/CommentFormat"
                  },
                  "description": "NEW Text components styling format."
                }
              },
              "title": "NEW Edition of the Comment.",
              "required": [
                "text"
              ]
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Comments"
        ]
      }
    },
    "/contacts/{contact_id}/emails": {
      "get": {
        "summary": "Locates email address(es) of the contact.",
        "operationId": "ListEmails",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsEmailList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "The Contact ID linked with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: email address.\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Link(s) with unique ID only.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "primary",
            "description": "Primary email address only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "verified",
            "description": "Verified email addresses only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "type.id",
            "description": "Reference Object unique ID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type.type",
            "description": "Reference Object well-known type.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type.name",
            "description": "Reference Object display name.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Emails"
        ]
      },
      "delete": {
        "summary": "Remove email address(es) of the contact.",
        "operationId": "DeleteEmails",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsEmailList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "etag",
            "description": "Set of unique ID(s) to remove.",
            "in": "query",
            "required": true,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "pattern": "^.+$"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Emails"
        ]
      },
      "post": {
        "summary": "Update or append email address(es) of the contact.",
        "operationId": "MergeEmails",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsEmailList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Fixed set of email address(es) to be linked with the contact.\nEmail address(es) that conflicts(email) with already linked will be updated.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputEmailAddress"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Emails"
        ]
      },
      "put": {
        "summary": "Resets all emails of the contact according to the input dataset.",
        "operationId": "ResetEmails",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsEmailList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Final set of email address(es) to be linked with the contact.\nEmail address(es) that are already linked with the contact\nbut not given in here will be removed.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputEmailAddress"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Emails"
        ]
      }
    },
    "/contacts/{contact_id}/emails/{etag}": {
      "get": {
        "summary": "Locate the email address link.",
        "operationId": "LocateEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsEmailAddress"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact source ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique mail address link IDentifier.\nAccept: `etag` (obsolete+) or `id`.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "\\w+"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Emails"
        ]
      },
      "delete": {
        "summary": "Remove the contact's email address link",
        "operationId": "DeleteEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsEmailAddress"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID to remove.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Emails"
        ]
      },
      "put": {
        "summary": "Update the contact's email address link details",
        "operationId": "UpdateEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsEmailList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resorce.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the email address link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "etag": "1679792219687",
                "verified": false,
                "primary": true,
                "email": "user@domain",
                "type": {
                  "name": "personal"
                }
              },
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "Indicates whether this phone number is default within other channels of the same type(phone)."
                },
                "verified": {
                  "type": "boolean",
                  "title": "Indicate whether Contact, as a Person, realy owns this associated phone number.\nIn other words: whether Contact is reachable thru this 'email' communication channel ?"
                },
                "email": {
                  "type": "string",
                  "description": "The email address."
                },
                "type": {
                  "$ref": "#/definitions/webitelcontactsLookup",
                  "title": "The type of the email address.\nLookup value from CommunicationType dictionary.\nThe type can be custom or one of these predefined values:\n- home\n- work\n- other"
                }
              },
              "title": "NEW Update of the email address link.",
              "required": [
                "email"
              ]
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Emails"
        ]
      },
      "patch": {
        "summary": "Update the contact's email address link details",
        "operationId": "UpdateEmail2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsEmailList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resorce.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the email address link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "etag": "1679792219687",
                "verified": false,
                "primary": true,
                "email": "user@domain",
                "type": {
                  "name": "personal"
                }
              },
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "Indicates whether this phone number is default within other channels of the same type(phone)."
                },
                "verified": {
                  "type": "boolean",
                  "title": "Indicate whether Contact, as a Person, realy owns this associated phone number.\nIn other words: whether Contact is reachable thru this 'email' communication channel ?"
                },
                "email": {
                  "type": "string",
                  "description": "The email address."
                },
                "type": {
                  "$ref": "#/definitions/webitelcontactsLookup",
                  "title": "The type of the email address.\nLookup value from CommunicationType dictionary.\nThe type can be custom or one of these predefined values:\n- home\n- work\n- other"
                }
              },
              "title": "NEW Update of the email address link.",
              "required": [
                "email"
              ]
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Emails"
        ]
      }
    },
    "/contacts/{contact_id}/groups": {
      "get": {
        "summary": "List of the Contact's group(s).",
        "operationId": "ListContactGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactGroupList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "description": "Search term: group name;\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Record(s) with unique ID only.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ContactGroups"
        ]
      },
      "delete": {
        "summary": "Remove the Contact's group(s).",
        "operationId": "DeleteContactGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactGroupList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "etag",
            "description": "Set of unique ID(s) to remove.",
            "in": "query",
            "required": true,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ContactGroups"
        ]
      },
      "post": {
        "summary": "Associate more group(s) with the Contact.",
        "operationId": "MergeContactGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactGroupList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Array of the unique User(s) to associate with the Contact.\nAny duplicate of an already linked user{id} will result in an error.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputContactGroup"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ContactGroups"
        ]
      },
      "put": {
        "summary": "Resets all groups of the contact according to the input dataset.",
        "operationId": "ResetContactGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactGroupList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Final set of group(s) to be linked with the contact.\nGroup(s) that are already linked with the contact\nbut not given in here will be removed.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputContactGroup"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ContactGroups"
        ]
      }
    },
    "/contacts/{contact_id}/groups/{etag}": {
      "get": {
        "summary": "Locate the Contact's group association.",
        "operationId": "LocateContactGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact source ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique group link IDentifier.\nAccept: `etag` (obsolete+) or `id`.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "\\w+"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ContactGroups"
        ]
      },
      "delete": {
        "summary": "Remove the Contact's group association.",
        "operationId": "DeleteContactGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID to remove.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ContactGroups"
        ]
      },
      "put": {
        "summary": "Update the Contact's group details.",
        "operationId": "UpdateContactGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactGroupList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the group link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "group": {
                  "$ref": "#/definitions/webitelcontactsLookup",
                  "description": "Group of contacts associated."
                }
              },
              "title": "NEW Update of the group link."
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ContactGroups"
        ]
      },
      "patch": {
        "summary": "Update the Contact's group details.",
        "operationId": "UpdateContactGroup2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactGroupList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the group link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "group": {
                  "$ref": "#/definitions/webitelcontactsLookup",
                  "description": "Group of contacts associated."
                }
              },
              "title": "NEW Update of the group link."
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ContactGroups"
        ]
      }
    },
    "/contacts/{contact_id}/imclients": {
      "get": {
        "summary": "Search IM client links",
        "operationId": "ListIMClients",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsIMClientList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: IMClient.\n`?` - matches any one character\n`*` - matches 0 or more characters\nSearch fields: {user,app}",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Link(s) with unique ID only.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "IMClients"
        ]
      }
    },
    "/contacts/{contact_id}/imclients/{id}": {
      "delete": {
        "operationId": "DeleteIMClient",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsEmptyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "IMClients"
        ]
      }
    },
    "/contacts/{contact_id}/labels": {
      "get": {
        "summary": "Locate the Contact's associated Label(s).",
        "operationId": "ListLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLabelList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = ((page-1)*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size+1)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: label tag.\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Record(s) with unique ID or ETag.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Labels"
        ]
      },
      "delete": {
        "summary": "Remove Contact Labels associations.",
        "operationId": "DeleteLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLabelList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "etag",
            "description": "Set of unique label(s).etag identifiers.",
            "in": "query",
            "required": true,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "pattern": "^(\\w+)(,\\w+)*$"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Labels"
        ]
      },
      "post": {
        "summary": "Associate NEW Labels to the Contact.",
        "operationId": "MergeLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLabelList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Fixed set of label(s) to be linked with the contact.\nLabel(s) that conflicts with already linked will be updated.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputLabel"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Labels"
        ]
      },
      "put": {
        "summary": "Reset Labels to fit the specified final set.",
        "operationId": "ResetLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLabelList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Final set of labels(s) to be linked with the contact.\nLabel(s) that are already linked with the contact\nbut not given in here will be removed.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputLabel"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Labels"
        ]
      }
    },
    "/contacts/{contact_id}/languages": {
      "get": {
        "summary": "List of the Contact's language association(s).",
        "operationId": "GetContactLanguages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLanguageList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: language tag (lang, name, region, ..)\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Language(s) with unique ID|ETag only.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "primary",
            "description": "Primary language only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Languages"
        ]
      },
      "delete": {
        "summary": "Remove the Contact's language association(s).",
        "operationId": "DelContactLanguages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLanguageList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "etag",
            "description": "Set of unique language{etag} association(s) to remove.",
            "in": "query",
            "required": true,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Languages"
        ]
      },
      "post": {
        "summary": "Associate more language(s) with the Contact.",
        "operationId": "AddContactLanguages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLanguageList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Array of the unique well-formed IETF BCP 47 language tag(s) to associate with the Contact.\nThe first element will become `primary` one.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputLanguage"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Languages"
        ]
      },
      "put": {
        "summary": "Reset all Contact's languages to fit the specified fixed set.",
        "operationId": "SetContactLanguages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLanguageList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Final set [array] of the unique well-formed IETF BCP 47 language tag(s) to associate with the Contact.\nThe first element will become `primary` one.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputLanguage"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Languages"
        ]
      }
    },
    "/contacts/{contact_id}/languages/{etag}": {
      "delete": {
        "summary": "Remove the Contact's language association.",
        "operationId": "DelContactLanguage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLanguage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the language association: {id,etag,code}.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Languages"
        ]
      },
      "put": {
        "summary": "Update the Contact's language association details.",
        "operationId": "SetContactLanguage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLanguageList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing association.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Final set [array] of the unique well-formed IETF BCP 47 language tag(s) to associate with the Contact.\nThe first element will become `primary` one.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "primary": false,
                "tag": "uk"
              },
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "Indicates whether this association must be default\namong others of the same type."
                },
                "tag": {
                  "type": "string",
                  "title": "NEW, well-formed IETF BCP 47 language tag representing the locale.\nhttps://www.rfc-editor.org/info/bcp47"
                }
              },
              "title": "Final set [array] of the unique well-formed IETF BCP 47 language tag(s) to associate with the Contact.\nThe first element will become `primary` one."
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Languages"
        ]
      },
      "patch": {
        "summary": "Update the Contact's language association details.",
        "operationId": "SetContactLanguage2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLanguageList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing association.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Final set [array] of the unique well-formed IETF BCP 47 language tag(s) to associate with the Contact.\nThe first element will become `primary` one.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "primary": false,
                "tag": "uk"
              },
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "Indicates whether this association must be default\namong others of the same type."
                },
                "tag": {
                  "type": "string",
                  "title": "NEW, well-formed IETF BCP 47 language tag representing the locale.\nhttps://www.rfc-editor.org/info/bcp47"
                }
              },
              "title": "Final set [array] of the unique well-formed IETF BCP 47 language tag(s) to associate with the Contact.\nThe first element will become `primary` one."
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Languages"
        ]
      }
    },
    "/contacts/{contact_id}/managers": {
      "get": {
        "summary": "Search the Contact's Managers.",
        "operationId": "ListManagers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsManagerList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result. offset = ((page-1)*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size of result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: user name;\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Record(s) with unique ID only.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Managers"
        ]
      },
      "delete": {
        "summary": "Remove Contact Managers associations.",
        "operationId": "DeleteManagers",
        "responses": {
          "200": {
            "description": "Manager dataset page.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsManager"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "etag",
            "description": "Set of unique ID(s) to remove.",
            "in": "query",
            "required": true,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Managers"
        ]
      },
      "post": {
        "summary": "Associate new Managers to the Contact.",
        "operationId": "MergeManagers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsManagerList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Array of the unique User(s) to associate with the Contact.\nAny duplicate of an already linked user{id} will result in an error.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputManager"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Managers"
        ]
      },
      "put": {
        "summary": "Reset Managers to fit the specified final set.",
        "operationId": "ResetManagers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsManagerList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Final set of unique User(s) to be linked with the Contact.\nUser(s) that are already linked with the Contact\nbut not listed here will be removed.\nThe first element will become `primary` if no other specified.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputManager"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Managers"
        ]
      }
    },
    "/contacts/{contact_id}/managers/{etag}": {
      "get": {
        "summary": "Locate the manager address link.",
        "operationId": "LocateManager",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsManager"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact source ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique manager link IDentifier.\nAccept: `etag` (obsolete+) or `id`.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "\\w+"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Managers"
        ]
      },
      "delete": {
        "summary": "Remove the contact's manager address link",
        "operationId": "DeleteManager",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsManager"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID to remove.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Managers"
        ]
      },
      "put": {
        "summary": "Update the contact's manager address link details",
        "operationId": "UpdateManager",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsManagerList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the manager link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "primary": true,
                "user": {
                  "id": "357",
                  "name": "Bruce Wayne"
                }
              },
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "Indicates whether this association must be default among others."
                },
                "user": {
                  "$ref": "#/definitions/webitelcontactsLookup",
                  "description": "Responsible User."
                }
              },
              "title": "NEW Update of the manager link."
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Managers"
        ]
      },
      "patch": {
        "summary": "Update the contact's manager address link details",
        "operationId": "UpdateManager2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsManagerList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the manager link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "primary": true,
                "user": {
                  "id": "357",
                  "name": "Bruce Wayne"
                }
              },
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "Indicates whether this association must be default among others."
                },
                "user": {
                  "$ref": "#/definitions/webitelcontactsLookup",
                  "description": "Responsible User."
                }
              },
              "title": "NEW Update of the manager link."
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Managers"
        ]
      }
    },
    "/contacts/{contact_id}/phones": {
      "get": {
        "summary": "Search phone number(s)",
        "operationId": "ListPhones",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoneList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "The Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: phone number.\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Link(s) with unique ID only.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "primary",
            "description": "Primary phone  only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "verified",
            "description": "Verified phone only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "type.id",
            "description": "Reference Object unique ID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type.type",
            "description": "Reference Object well-known type.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type.name",
            "description": "Reference Object display name.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Phones"
        ]
      },
      "delete": {
        "summary": "Remove the Contact's phone number association(s)",
        "operationId": "DeletePhones",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoneList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "The Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "etag",
            "description": "Set of linked ID(s) to be removed.",
            "in": "query",
            "required": true,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Phones"
        ]
      },
      "post": {
        "summary": "Associate phone number(s) with the Contact",
        "operationId": "MergePhones",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoneList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Fixed set of phone number(s) to be linked with the Contact.\nPhone number(s) that conflicts with already linked will be updated.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputPhoneNumber"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Phones"
        ]
      },
      "put": {
        "summary": "Reset the Contact's phone numbers to fit given data set.",
        "operationId": "ResetPhones",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoneList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Final set of phone number(s) to be linked with the contact.\nPhone number(s) that are already linked with the contact\nbut not given in here will be removed.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputPhoneNumber"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Phones"
        ]
      }
    },
    "/contacts/{contact_id}/phones/{etag}": {
      "get": {
        "summary": "Locate the Contact's phone number association.",
        "operationId": "LocatePhone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoneNumber"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Reference Contact unique ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "\\w+"
          },
          {
            "name": "fields",
            "description": "Fields [Q]uery to build result record.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Phones"
        ]
      },
      "delete": {
        "summary": "Remove the Contact's phone number",
        "operationId": "DeletePhone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoneNumber"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique link ID to be removed.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Phones"
        ]
      },
      "put": {
        "summary": "Update the Contact's phone number association details",
        "operationId": "UpdatePhone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoneList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "The Contact ID to be associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resorce.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the phone number details.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "Indicates whether this phone number is default within other channels of the same type(phone)."
                },
                "verified": {
                  "type": "boolean",
                  "title": "Indicate whether Contact, as a Person, realy owns this associated phone number.\nIn other words: whether Contact is reachable thru this 'phone' communication channel ?"
                },
                "number": {
                  "type": "string",
                  "description": "The phone number."
                },
                "type": {
                  "$ref": "#/definitions/webitelcontactsLookup",
                  "title": "The type of the phone number.\nReference on CommunicationType dictionary.\nUsed for outbound routing while dialup a phone number.\nThe type can be custom or one of these predefined values:\n- home\n- work\n- mobile\n- homeFax\n- workFax\n- otherFax\n- pager\n- workMobile\n- workPager\n- main\n- googleVoice\n- other"
                }
              },
              "title": "NEW Update of the phone number details.",
              "required": [
                "number"
              ]
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Phones"
        ]
      },
      "patch": {
        "summary": "Update the Contact's phone number association details",
        "operationId": "UpdatePhone2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoneList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "The Contact ID to be associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resorce.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the phone number details.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "Indicates whether this phone number is default within other channels of the same type(phone)."
                },
                "verified": {
                  "type": "boolean",
                  "title": "Indicate whether Contact, as a Person, realy owns this associated phone number.\nIn other words: whether Contact is reachable thru this 'phone' communication channel ?"
                },
                "number": {
                  "type": "string",
                  "description": "The phone number."
                },
                "type": {
                  "$ref": "#/definitions/webitelcontactsLookup",
                  "title": "The type of the phone number.\nReference on CommunicationType dictionary.\nUsed for outbound routing while dialup a phone number.\nThe type can be custom or one of these predefined values:\n- home\n- work\n- mobile\n- homeFax\n- workFax\n- otherFax\n- pager\n- workMobile\n- workPager\n- main\n- googleVoice\n- other"
                }
              },
              "title": "NEW Update of the phone number details.",
              "required": [
                "number"
              ]
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Phones"
        ]
      }
    },
    "/contacts/{contact_id}/photos": {
      "get": {
        "summary": "Search the contact's photo(s)",
        "operationId": "SearchPhotos",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhotoList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "The Contact ID linked with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: email address.\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Link(s) with unique ID only.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "primary",
            "description": "Default photos only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Photos"
        ]
      },
      "delete": {
        "summary": "Remove the contact's photo link(s)",
        "operationId": "DeletePhotos",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhotoList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link(s) contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "etag",
            "description": "Set of linked ID(s) to be removed.",
            "in": "query",
            "required": true,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Photos"
        ]
      },
      "post": {
        "summary": "Link photo(s) with the contact",
        "operationId": "CreatePhotos",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhotoList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Fixed set of photo(s) to be linked with the contact.\nPhoto(s) that conflicts(file_id) with already linked will be updated.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputPhoto"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Photos"
        ]
      },
      "put": {
        "summary": "Reset the contact's photos to fit given data set.",
        "operationId": "UpdatePhotos",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhotoList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Final set of photo(s) to be linked with the contact.\nPhoto(s) that are already linked with the contact\nbut not given in here will be removed.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputPhoto"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Photos"
        ]
      }
    },
    "/contacts/{contact_id}/photos/{etag}": {
      "delete": {
        "summary": "Remove the contact's photo",
        "operationId": "DeletePhoto",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoto"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique link ID to be removed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Photos"
        ]
      },
      "put": {
        "summary": "Update the contact's photo link details",
        "operationId": "UpdatePhoto",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoto"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing association.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the email address link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "True if the photo is a default photo; false if the photo is a user-provided photo."
                },
                "photo_id": {
                  "type": "string",
                  "format": "int64",
                  "title": "File unique ID within 'storage' service"
                },
                "photo_url": {
                  "type": "string",
                  "title": "The URL of the photo.\nYou can change the desired size by appending\na query parameter sz={size} at the end of the url,\nwhere {size} is the size in pixels.\nExample: https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50"
                }
              },
              "title": "NEW Update of the email address link.",
              "required": [
                "file_url"
              ]
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Photos"
        ]
      },
      "patch": {
        "summary": "Update the contact's photo link details",
        "operationId": "UpdatePhoto2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoto"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing association.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the email address link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "True if the photo is a default photo; false if the photo is a user-provided photo."
                },
                "photo_id": {
                  "type": "string",
                  "format": "int64",
                  "title": "File unique ID within 'storage' service"
                },
                "photo_url": {
                  "type": "string",
                  "title": "The URL of the photo.\nYou can change the desired size by appending\na query parameter sz={size} at the end of the url,\nwhere {size} is the size in pixels.\nExample: https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50"
                }
              },
              "title": "NEW Update of the email address link.",
              "required": [
                "file_url"
              ]
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Photos"
        ]
      }
    },
    "/contacts/{contact_id}/photos/{id}": {
      "get": {
        "summary": "Locate the contact's photo link.",
        "operationId": "LocatePhoto",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoto"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Link unique ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Photos"
        ]
      }
    },
    "/contacts/{contact_id}/timeline": {
      "get": {
        "operationId": "GetTimeline",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsGetTimelineResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "chat",
                "call",
                "email"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Timeline"
        ]
      }
    },
    "/contacts/{contact_id}/timeline/counter": {
      "get": {
        "operationId": "GetTimelineCounter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsGetTimelineCounterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Timeline"
        ]
      }
    },
    "/contacts/{contact_id}/timezones": {
      "get": {
        "summary": "List of the Contact's timezone(s).",
        "operationId": "ListTimezones",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsTimezoneList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: location name;\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Record(s) with unique ID only.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "primary",
            "description": "Primary timezone only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Timezones"
        ]
      },
      "delete": {
        "summary": "Remove the Contact's timezone(s).",
        "operationId": "DeleteTimezones",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsTimezoneList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "etag",
            "description": "Set of unique ID(s) to remove.",
            "in": "query",
            "required": true,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Timezones"
        ]
      },
      "post": {
        "summary": "Associate more timezone(s) with the Contact.",
        "operationId": "MergeTimezones",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsTimezoneList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Array of the unique User(s) to associate with the Contact.\nAny duplicate of an already linked user{id} will result in an error.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputTimezone"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Timezones"
        ]
      },
      "put": {
        "summary": "Resets all timezones of the contact according to the input dataset.",
        "operationId": "ResetTimezones",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsTimezoneList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Final set of timezone(s) to be linked with the contact.\nTimezone(s) that are already linked with the contact\nbut not given in here will be removed.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputTimezone"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Timezones"
        ]
      }
    },
    "/contacts/{contact_id}/timezones/{etag}": {
      "get": {
        "summary": "Locate the Contact's timezone association.",
        "operationId": "LocateTimezone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsTimezone"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact source ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique timezone link IDentifier.\nAccept: `etag` (obsolete+) or `id`.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "\\w+"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Timezones"
        ]
      },
      "delete": {
        "summary": "Remove the Contact's timezone association.",
        "operationId": "DeleteTimezone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsTimezone"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID to remove.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Timezones"
        ]
      },
      "put": {
        "summary": "Update the Contact's timezone details.",
        "operationId": "UpdateTimezone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsTimezoneList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the timezone link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "Indicates whether this association must be default among others."
                },
                "timezone": {
                  "$ref": "#/definitions/webitelcontactsLookup",
                  "description": "Timezone dictionary reference value associated."
                }
              },
              "title": "NEW Update of the timezone link."
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Timezones"
        ]
      },
      "patch": {
        "summary": "Update the Contact's timezone details.",
        "operationId": "UpdateTimezone2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsTimezoneList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the timezone link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "Indicates whether this association must be default among others."
                },
                "timezone": {
                  "$ref": "#/definitions/webitelcontactsLookup",
                  "description": "Timezone dictionary reference value associated."
                }
              },
              "title": "NEW Update of the timezone link."
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Timezones"
        ]
      }
    },
    "/contacts/{contact_id}/variables": {
      "get": {
        "summary": "List variables of the contact",
        "operationId": "ListVariables",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsVariableList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result. offset = ((page-1)*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size of result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: variable key;\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Record(s) with unique ID only.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Variables"
        ]
      },
      "delete": {
        "summary": "Remove variable(s) of the contact",
        "operationId": "DeleteVariables",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsVariableList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "etag",
            "description": "Set of unique ID(s) to remove.",
            "in": "query",
            "required": true,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "pattern": "^.+$"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Variables"
        ]
      },
      "post": {
        "summary": "Update or append variables to the contact",
        "operationId": "MergeVariables",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsVariableList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Fixed object of unique variables to associate with a Contact.\nEach individual key of an object represents a separate variable.\nVariable{key} already linked with the Contact and listed here will be updated.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputVariable"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Variables"
        ]
      },
      "put": {
        "summary": "Reset all variables of the contact",
        "operationId": "ResetVariables",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsVariableList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Fixed object of unique variables to associate with a Contact.\nEach individual key of an object represents a separate variable.\nVariable{key} already linked with the Contact but not listed here will be removed.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputVariable"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Variables"
        ]
      }
    },
    "/contacts/{contact_id}/variables/{etag}": {
      "delete": {
        "summary": "Remove the contact's variable by etag",
        "operationId": "DeleteVariable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsVariable"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID to remove.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Variables"
        ]
      },
      "put": {
        "summary": "Update contact variable",
        "operationId": "UpdateVariable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsVariableList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resorce.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Variable update.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "key": "var_rename",
                "value": [
                  "string_item",
                  [
                    3,
                    7
                  ],
                  false,
                  null
                ]
              },
              "properties": {
                "key": {
                  "type": "string",
                  "description": "NEW Key.",
                  "pattern": "^\\w+$"
                },
                "value": {
                  "description": "NEW Value."
                }
              },
              "title": "NEW Variable update.",
              "required": [
                "key"
              ]
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Variables"
        ]
      },
      "patch": {
        "summary": "Update contact variable",
        "operationId": "UpdateVariable2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsVariableList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resorce.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Variable update.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "key": "var_rename",
                "value": [
                  "string_item",
                  [
                    3,
                    7
                  ],
                  false,
                  null
                ]
              },
              "properties": {
                "key": {
                  "type": "string",
                  "description": "NEW Key.",
                  "pattern": "^\\w+$"
                },
                "value": {
                  "description": "NEW Value."
                }
              },
              "title": "NEW Variable update.",
              "required": [
                "key"
              ]
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Variables"
        ]
      }
    },
    "/contacts/{etag}": {
      "get": {
        "summary": "Locate Contact source",
        "operationId": "LocateContact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcontactsContact"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "etag",
            "description": "The Contact source IDentifier.\nAccept: `etag` (obsolete+) or `id`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Source Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "mode",
            "description": "The requirement of a special access mode to the Source.\n\n - READ: Can `fetch` record. [GET]\n - WRITE: Can `update` record. [PUT|PATCH]\n - DELETE: Can `delete` record. [DELETE]",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "READ",
              "WRITE",
              "DELETE"
            ],
            "default": "READ"
          }
        ],
        "tags": [
          "Contacts"
        ]
      },
      "delete": {
        "summary": "Remove Contact source",
        "operationId": "DeleteContact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcontactsContact"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "etag",
            "description": "Unique ID of the latest version of a resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Contacts"
        ]
      },
      "patch": {
        "summary": "NEW Update of the Contact source",
        "operationId": "UpdateContact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcontactsContact"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resorce.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Contact source changes",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "$ref": "#/definitions/contactsInputName",
                  "title": "The Contact's name. Singleton"
                },
                "about": {
                  "type": "string",
                  "description": "BIO. Short description about the Contact person.\nOPTIONAL. Multi-lined text."
                },
                "photos": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputPhoto"
                  },
                  "description": "Output only. The Contact's photo(s).",
                  "readOnly": true
                },
                "labels": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputLabel"
                  },
                  "description": "The Contact's associated label(s)."
                },
                "emails": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputEmailAddress"
                  },
                  "description": "The Contact's email address(es)."
                },
                "phones": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputPhoneNumber"
                  },
                  "description": "The Contact's phone numbers."
                },
                "managers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputManager"
                  },
                  "description": "The Contact's internal manager(s)."
                },
                "comments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputComment"
                  },
                  "description": "Publish NEW comment(s) for this Contact."
                },
                "languages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputLanguage"
                  },
                  "description": "A Contact's locale preference(s)."
                },
                "timezones": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputTimezone"
                  },
                  "description": "The Contact's timezone preference(s)."
                },
                "imclients": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputIMClient"
                  },
                  "description": "The contact's [I]nstant[M]essaging clients."
                },
                "variables": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputVariable"
                  },
                  "description": "Arbitrary client data that is populated by clients."
                },
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputContactGroup"
                  },
                  "description": "The Contact's associated group(s)."
                }
              },
              "title": "NEW Contact source changes"
            }
          },
          {
            "name": "fields",
            "description": "Source Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Contacts"
        ]
      }
    },
    "/customer": {
      "get": {
        "summary": "rpc GetCertificate(CertificateUsageRequest) returns (CertificateUsageResponse) {}",
        "operationId": "GetCustomer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetCustomerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Available Filters\n\nshow by customer id; serial number (uuid)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "valid",
            "description": "show if valid only!",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "domain.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Request Controls\n\nserial,",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "put": {
        "operationId": "UpdateCustomer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateCustomerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "organization",
            "description": "[optional] e.g.: Example Org.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "logo_picture",
            "description": "[optional] logo source image",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "certificate",
            "description": "[optional] raw bytes protobuf::base64.RawStdEncoding != certificate::base64.StdEncoding",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "revoke",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/customer/{customer_id}/license": {
      "get": {
        "operationId": "LicenseUsage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLicenseUsageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "description": "----- Search Options ----- //\n\ndefault: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "default: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "set of output fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "user.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "domain.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "by serial number(s)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "product",
            "description": "by product name(s)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "valid",
            "description": "view: all|valid|grantable\n\nshow: available to be granted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "q",
            "description": "filter: term of search",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/customer/{id}": {
      "get": {
        "summary": "rpc GetCertificate(CertificateUsageRequest) returns (CertificateUsageResponse) {}",
        "operationId": "GetCustomer2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetCustomerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Available Filters\n\nshow by customer id; serial number (uuid)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "valid",
            "description": "show if valid only!",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "domain.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Request Controls\n\nserial,",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/devices": {
      "get": {
        "operationId": "SearchDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSearchDeviceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "size",
            "description": "----- Select Options -------------------------\n\ndefault: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "default: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "ids",
            "description": "----- Search Basic Filters ---------------------------\n\nselection: by unique identifier",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "term-of-search: lookup[name,account,hotdesk,brand,model,mac,ip]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "case-ignore substring match: ILIKE '*' - any; '?' - one",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "access",
            "description": "[M]andatory[A]ccess[C]ontrol: with access mode (action) granted!",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "account",
            "description": "----- Device-Specific Filters ----------------\n\nsubstring like '%name%'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "hotdesk",
            "description": "filter: has hotdesk (=pattern); is hotdesk (=*)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user.id",
            "description": "Object ID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "Display Name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "mac",
            "description": "filter: by MAC address",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ip",
            "description": "filter: by IP address",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Devices"
        ]
      },
      "delete": {
        "operationId": "DeleteDevice2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteDeviceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "description": "bulk",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "permanent",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Devices"
        ]
      },
      "post": {
        "operationId": "CreateDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCreateDeviceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "device",
            "description": "string password = 2;",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDevice"
            }
          }
        ],
        "tags": [
          "Devices"
        ]
      }
    },
    "/devices/{device.id}": {
      "put": {
        "operationId": "UpdateDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateDeviceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "device.id",
            "description": "object id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "device",
            "description": "Device profile",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "display name",
                  "title": "kind of\nDeviceType type = 19;"
                },
                "account": {
                  "type": "string",
                  "description": "username",
                  "title": "credentials"
                },
                "password": {
                  "type": "string",
                  "title": "password"
                },
                "user": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "[optional] The user that 'owns' the device;"
                },
                "logged_in": {
                  "type": "string",
                  "format": "int64",
                  "title": "caller profile\n webitel.adt.caller caller = 4;"
                },
                "hotdesk": {
                  "type": "boolean",
                  "description": "act as a hotdesk",
                  "title": "Hotdesk: this workstation aliases"
                },
                "hotdesks": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "associated aliases"
                },
                "provision": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "provision extra data"
                },
                "brand": {
                  "type": "string",
                  "description": "vendor brand name",
                  "title": "provision"
                },
                "model": {
                  "type": "string"
                },
                "mac": {
                  "type": "string",
                  "title": "static"
                },
                "ip": {
                  "type": "string"
                },
                "reged": {
                  "type": "boolean",
                  "title": "TODO: something like PresenceStatus instead of Registration\n repeated Registration contacts = 16;"
                },
                "created_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "created_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                },
                "updated_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "updated_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                },
                "deleted_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "deleted_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                }
              },
              "title": "Device profile"
            }
          },
          {
            "name": "fields",
            "description": "PATCH: partial update",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Devices"
        ]
      },
      "patch": {
        "operationId": "UpdateDevice2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateDeviceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "device.id",
            "description": "object id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "device",
            "description": "Device profile",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "display name",
                  "title": "kind of\nDeviceType type = 19;"
                },
                "account": {
                  "type": "string",
                  "description": "username",
                  "title": "credentials"
                },
                "password": {
                  "type": "string",
                  "title": "password"
                },
                "user": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "[optional] The user that 'owns' the device;"
                },
                "logged_in": {
                  "type": "string",
                  "format": "int64",
                  "title": "caller profile\n webitel.adt.caller caller = 4;"
                },
                "hotdesk": {
                  "type": "boolean",
                  "description": "act as a hotdesk",
                  "title": "Hotdesk: this workstation aliases"
                },
                "hotdesks": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "associated aliases"
                },
                "provision": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "provision extra data"
                },
                "brand": {
                  "type": "string",
                  "description": "vendor brand name",
                  "title": "provision"
                },
                "model": {
                  "type": "string"
                },
                "mac": {
                  "type": "string",
                  "title": "static"
                },
                "ip": {
                  "type": "string"
                },
                "reged": {
                  "type": "boolean",
                  "title": "TODO: something like PresenceStatus instead of Registration\n repeated Registration contacts = 16;"
                },
                "created_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "created_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                },
                "updated_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "updated_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                },
                "deleted_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "deleted_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                }
              },
              "title": "Device profile"
            }
          },
          {
            "name": "fields",
            "description": "PATCH: partial update",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Devices"
        ]
      }
    },
    "/devices/{device.id}/registered": {
      "get": {
        "operationId": "ListRegistrations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListRegistrationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "device.id",
            "description": "Object ID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.id",
            "description": "Object ID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "Display Name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "device.name",
            "description": "Display Name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Devices"
        ]
      }
    },
    "/devices/{device.id}/users/audit": {
      "get": {
        "summary": "----- Details (1:M) ----------------------------------------------",
        "operationId": "SearchDeviceAudit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeviceAuditResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "device.id",
            "description": "Object ID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.id",
            "description": "Object ID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "Display Name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "device.name",
            "description": "Display Name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "time_from",
            "description": "Filter: timing range (optional)\n\nunix milliseconds",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "time_till",
            "description": "unix milliseconds",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "Search Options",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Devices"
        ]
      }
    },
    "/devices/{id}": {
      "get": {
        "operationId": "ReadDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReadDeviceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "output selection",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Devices"
        ]
      },
      "delete": {
        "operationId": "DeleteDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteDeviceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "permanent",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "ids",
            "description": "bulk",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Devices"
        ]
      }
    },
    "/dictionaries/{repo}": {
      "get": {
        "summary": "Lookup a dictionary dataset.",
        "operationId": "SearchData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataDataset"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "[`types.repo`]",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "description": "Number of result records (per page).\nDefault: 16.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "Page number of result set of records.\nDefault: 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Sort result dataset of records by fields.\n```\nsort ::= *( ORDER name )\n\nORDER  = ASC / DESC\nDESC   = \"-\" / \"!\"\nASC    = [ \"+\" ]   ; Default\n```\n\nFields available\n\n- `id`(seq)\n- `domain`{name}\n- `created_at`\n- `created_by`{name}\n- `updated_at`\n- `updated_by`{name}\n\nUse ?fields=`field.sort()` option to sort Edge fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "default": "*",
              "pattern": "^[+|-|!]?\\w+$"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields [Q]uery to build result dataset record.\n```\nfields ::= field [ *( \",\" field ) ]\nfield  ::= name [ *( func ) ] [ inner ]\ninner  ::= \"{\" fields \"}\"\nfuncs  ::= *( func )\nfunc   ::= \".\" name \"(\" [ args ] \")\"\nname   ::= ALPHA / DIGIT / USCORE\n\nALPHA    = %x41-5A / %x61-7A  ; \"A\"-\"Z\" / \"a\"-\"z\"\nDIGIT    = %x30-39            ; \"0\"-\"9\"\nUSCORE   = %x5F ; underscore  ; \"_\"\n```",
            "in": "query",
            "required": false,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "default": "*"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search term:\n`?` - matches any character\n`*` - matches 0 or more characters\ne.g.: name,emails{type},labels etc...",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "[`record.id`]",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filters",
            "description": "Filter string in CEL format.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Dictionaries"
        ]
      },
      "delete": {
        "summary": "Delete a dictionary records.",
        "operationId": "DeleteData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataDataset"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "[`types.repo`]",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result dataset.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "[`record.id`]",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Dictionaries"
        ]
      },
      "post": {
        "summary": "Create a dictionary record.",
        "description": "(Record) {",
        "operationId": "CreateData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "[`types.repo`]",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "record",
            "description": "Record data.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "Dictionaries"
        ]
      }
    },
    "/dictionaries/{repo}/csv": {
      "post": {
        "summary": "Import dataset from CSV file.",
        "operationId": "ImportCSV",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataDataset"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "`types.repo`",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DictionariesImportCSVBody"
            }
          }
        ],
        "tags": [
          "Dictionaries"
        ]
      }
    },
    "/dictionaries/{repo}/{id}": {
      "get": {
        "summary": "Locate a dictionary record.",
        "description": "(Record) {",
        "operationId": "LocateData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "[`types.repo`]",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "[`record.id`]",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields [Q]uery to build result dataset record.\n```\nfields ::= field [ *( \",\" field ) ]\nfield  ::= name [ *( func ) ] [ inner ]\ninner  ::= \"{\" fields \"}\"\nfuncs  ::= *( func )\nfunc   ::= \".\" name \"(\" [ args ] \")\"\nname   ::= ALPHA / DIGIT / USCORE\n\nALPHA    = %x41-5A / %x61-7A  ; \"A\"-\"Z\" / \"a\"-\"z\"\nDIGIT    = %x30-39            ; \"0\"-\"9\"\nUSCORE   = %x5F ; underscore  ; \"_\"\n```",
            "in": "query",
            "required": false,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "default": "*"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Dictionaries"
        ]
      },
      "delete": {
        "summary": "Delete a dictionary records.",
        "operationId": "DeleteData2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataDataset"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "[`types.repo`]",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "[`record.id`]",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result dataset.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Dictionaries"
        ]
      },
      "put": {
        "summary": "Update a dictionary record.",
        "description": "(Record) {",
        "operationId": "UpdateData2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "[`types.repo`] data source",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "[`record.id`] for update",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "record",
            "description": "Record data fields changes.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "fields",
            "description": "Source Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Dictionaries"
        ]
      },
      "patch": {
        "summary": "Update a dictionary record.",
        "description": "(Record) {",
        "operationId": "UpdateData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "[`types.repo`] data source",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "[`record.id`] for update",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "record",
            "description": "Record data fields changes.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "fields",
            "description": "Source Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Dictionaries"
        ]
      }
    },
    "/domain": {
      "get": {
        "operationId": "ReadDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReadDomainResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dc",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Domains"
        ]
      },
      "delete": {
        "operationId": "DeleteDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteDomainResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dc",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Domains"
        ]
      }
    },
    "/domains": {
      "get": {
        "operationId": "SearchDomains",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSearchDomainsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "description": "like",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "attrs",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Domains"
        ]
      },
      "post": {
        "operationId": "CreateDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCreateDomainResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateDomainRequest"
            }
          }
        ],
        "tags": [
          "Domains"
        ]
      }
    },
    "/domains/{dc}": {
      "get": {
        "operationId": "ReadDomain2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReadDomainResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dc",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Domains"
        ]
      },
      "delete": {
        "operationId": "DeleteDomain2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteDomainResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dc",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Domains"
        ]
      }
    },
    "/domains/{domain.dc}": {
      "put": {
        "operationId": "UpdateDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateDomainResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domain.dc",
            "description": "component",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DomainsUpdateDomainBody"
            }
          }
        ],
        "tags": [
          "Domains"
        ]
      },
      "patch": {
        "operationId": "UpdateDomain2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateDomainResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domain.dc",
            "description": "component",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DomainsUpdateDomainBody"
            }
          }
        ],
        "tags": [
          "Domains"
        ]
      }
    },
    "/ldap": {
      "get": {
        "summary": "Search for LDAP directories ...",
        "operationId": "SearchLDAPCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSearchLDAPResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\n\nselection: by unique identifier",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "term-of-search: lookup[name]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "case-ignore substring match: ILIKE '*' - any; '?' - one",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "access",
            "description": "[M]andatory[A]ccess[C]ontrol: with access mode (action) granted!",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "delete": {
        "summary": "Delete LDAP profile(s) ...",
        "operationId": "DeleteLDAPCatalog2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPCatalog"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDeleteLDAPRequest"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "post": {
        "summary": "Create LDAP profile",
        "operationId": "CreateLDAPCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPCatalog"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiLDAPCatalog"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/search": {
      "get": {
        "summary": "LDAPSearch performs LDAP Search operation ...",
        "operationId": "LDAPSearch4",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPSearchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "----- connection -----\nOptional. ID of the preconfigured LDAP catalog",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "url",
            "description": "Optional. URL to establish connection to LDAP catalog\n\nURL e.g.: [(ldap|ldapi|ldaps)://]host[:port]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tls.PEM",
            "description": "TODO: (!)\n\nbase64",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "bind",
            "description": "----- BIND: Authorization -----\n\nauthorization method e.g.: SIMPLE, SAML, NTLM, etc.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "description": "bind_dn",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "description": "password",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseObject",
            "description": "----- SearchRequest -----\nbaseObject [D]istinguished[N]ame",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "baseObject              (0),\nsingleLevel             (1),\nwholeSubtree            (2)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "derefAliases",
            "description": "neverDerefAliases       (0),\nderefInSearching        (1),\nderefFindingBaseObj     (2),\nderefAlways             (3)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sizeLimit",
            "description": "INTEGER (0 ..  maxInt),",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "timeLimit",
            "description": "INTEGER (0 ..  maxInt),",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "typesOnly",
            "description": "BOOLEAN,",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter",
            "description": "Filter,",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "attributes",
            "description": "AttributeSelection",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "post": {
        "summary": "LDAPSearch performs LDAP Search operation ...",
        "operationId": "LDAPSearch3",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPSearchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiLDAPSearchRequest"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{catalog.id}": {
      "put": {
        "summary": "Update LDAP profile details",
        "operationId": "UpdateLDAPCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPCatalog"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog.id",
            "description": "identity\nint64 dc = 1;",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LDAPUpdateLDAPCatalogBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "patch": {
        "summary": "Update LDAP profile details",
        "operationId": "UpdateLDAPCatalog2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPCatalog"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog.id",
            "description": "identity\nint64 dc = 1;",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LDAPUpdateLDAPCatalogBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{catalog.id}/templates": {
      "post": {
        "operationId": "CreateLDAPTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPTemplate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LDAPCreateLDAPTemplateBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{catalog_id}/rsync": {
      "get": {
        "summary": "(ResyncLDAPResponse) {",
        "operationId": "SearchLDAProcess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAProcessResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "REQUIRED. Parent LDAP catalog IDentifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\nOPTIONAL. Search process by unique .id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "OPTIONAL. Filter(s) SET",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "template",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "objclass",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "failed",
            "description": "WITH .errs",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "enabled",
            "description": "created|updated",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "disabled",
            "description": "deleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "post": {
        "summary": "Resync LDAP directory catalog changes ...",
        "description": "(ResyncLDAPResponse) {",
        "operationId": "ResyncLDAPCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAProcess"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "LDAP Catalog unique IDentifier to sync with\n\ncatalog_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LDAPResyncLDAPCatalogBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{catalog_id}/rsync/{id}": {
      "get": {
        "summary": "(ResyncLDAPResponse) {",
        "operationId": "LocateLDAProcess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAProcess"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "REQUIRED. Parent LDAP catalog IDentifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\nOPTIONAL. Search process by unique .id",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "OPTIONAL. Filter(s) SET",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "template",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "objclass",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "failed",
            "description": "WITH .errs",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "enabled",
            "description": "created|updated",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "disabled",
            "description": "deleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{catalog_id}/search": {
      "get": {
        "summary": "LDAPSearch performs LDAP Search operation ...",
        "operationId": "LDAPSearch2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPSearchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "----- connection -----\nOptional. ID of the preconfigured LDAP catalog",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "url",
            "description": "Optional. URL to establish connection to LDAP catalog\n\nURL e.g.: [(ldap|ldapi|ldaps)://]host[:port]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tls.PEM",
            "description": "TODO: (!)\n\nbase64",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "bind",
            "description": "----- BIND: Authorization -----\n\nauthorization method e.g.: SIMPLE, SAML, NTLM, etc.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "description": "bind_dn",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "description": "password",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseObject",
            "description": "----- SearchRequest -----\nbaseObject [D]istinguished[N]ame",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "baseObject              (0),\nsingleLevel             (1),\nwholeSubtree            (2)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "derefAliases",
            "description": "neverDerefAliases       (0),\nderefInSearching        (1),\nderefFindingBaseObj     (2),\nderefAlways             (3)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sizeLimit",
            "description": "INTEGER (0 ..  maxInt),",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "timeLimit",
            "description": "INTEGER (0 ..  maxInt),",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "typesOnly",
            "description": "BOOLEAN,",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter",
            "description": "Filter,",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "attributes",
            "description": "AttributeSelection",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "post": {
        "summary": "LDAPSearch performs LDAP Search operation ...",
        "operationId": "LDAPSearch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPSearchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "----- connection -----\nOptional. ID of the preconfigured LDAP catalog",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LDAPLDAPSearchBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{catalog_id}/templates": {
      "get": {
        "operationId": "SearchLDAPTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "REQUIRED. Parent LDAP catalog IDentifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\nOPTIONAL. Search templates by .id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "OPTIONAL. Filter(s) SET",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "base_dn",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "objclass",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "disabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "delete": {
        "operationId": "DeleteLDAPTemplate2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "REQUIRED. Parent LDAP catalog IDentifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LDAPDeleteLDAPTemplateBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{catalog_id}/templates/{id}": {
      "get": {
        "operationId": "LocateLDAPTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPTemplate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "REQUIRED. Parent LDAP catalog IDentifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\nOPTIONAL. Search templates by .id",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "OPTIONAL. Filter(s) SET",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "base_dn",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "objclass",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "disabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "delete": {
        "operationId": "DeleteLDAPTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "REQUIRED. Parent LDAP catalog IDentifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\nOPTIONAL. Search templates by .id",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LDAPDeleteLDAPTemplateBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{id}": {
      "get": {
        "summary": "Read LDAP catalog profile by .id",
        "operationId": "LocateLDAPCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPCatalog"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\n\nselection: by unique identifier",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "term-of-search: lookup[name]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "case-ignore substring match: ILIKE '*' - any; '?' - one",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "access",
            "description": "[M]andatory[A]ccess[C]ontrol: with access mode (action) granted!",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "delete": {
        "summary": "Delete LDAP profile(s) ...",
        "operationId": "DeleteLDAPCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPCatalog"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "catalog id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "related_objects",
            "description": "WITH objects bound to ?",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{template.catalog.id}/templates/{template.id}": {
      "put": {
        "operationId": "UpdateLDAPTemplate2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPTemplate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "template.catalog.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "template.id",
            "description": "ID unique",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LDAPUpdateLDAPTemplateBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "patch": {
        "operationId": "UpdateLDAPTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPTemplate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "template.catalog.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "template.id",
            "description": "ID unique",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LDAPUpdateLDAPTemplateBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/license": {
      "get": {
        "operationId": "LicenseUsage2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLicenseUsageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "size",
            "description": "----- Search Options ----- //\n\ndefault: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "default: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "set of output fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "user.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "domain.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "by serial number(s)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "product",
            "description": "by product name(s)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "valid",
            "description": "view: all|valid|grantable\n\nshow: available to be granted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "q",
            "description": "filter: term of search",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/oauth/apps": {
      "get": {
        "operationId": "SearchOAuthService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSearchOAuthServiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\n\nselection: by unique identifier",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "term-of-search: lookup[name]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "case-ignore substring match: ILIKE '*' - any; '?' - one",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "access",
            "description": "[M]andatory[A]ccess[C]ontrol: with access mode (action) granted!",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "enabled",
            "description": "----- OAuthService-Specific Filters ----------------",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "OAuth2Federation"
        ]
      },
      "delete": {
        "operationId": "DeleteOAuthService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteOAuthServiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDeleteOAuthServiceRequest"
            }
          }
        ],
        "tags": [
          "OAuth2Federation"
        ]
      },
      "post": {
        "operationId": "CreateOAuthService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOAuthService"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiOAuthService"
            }
          }
        ],
        "tags": [
          "OAuth2Federation"
        ]
      }
    },
    "/oauth/apps/{changes.id}": {
      "put": {
        "operationId": "UpdateOAuthService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOAuthService"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "changes.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OAuth2FederationUpdateOAuthServiceBody"
            }
          }
        ],
        "tags": [
          "OAuth2Federation"
        ]
      },
      "patch": {
        "operationId": "UpdateOAuthService2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOAuthService"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "changes.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OAuth2FederationUpdateOAuthServiceBody"
            }
          }
        ],
        "tags": [
          "OAuth2Federation"
        ]
      }
    },
    "/oauth/apps/{id}": {
      "get": {
        "operationId": "LocateOAuthService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOAuthService"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\n\nselection: by unique identifier",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "term-of-search: lookup[name]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "case-ignore substring match: ILIKE '*' - any; '?' - one",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "access",
            "description": "[M]andatory[A]ccess[C]ontrol: with access mode (action) granted!",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "enabled",
            "description": "----- OAuthService-Specific Filters ----------------",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "OAuth2Federation"
        ]
      },
      "delete": {
        "operationId": "DeleteOAuthService2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteOAuthServiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OAuth2FederationDeleteOAuthServiceBody"
            }
          }
        ],
        "tags": [
          "OAuth2Federation"
        ]
      }
    },
    "/objclass": {
      "get": {
        "operationId": "SearchClasses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSearchClassesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "description": "TO BE REMOVED // bound to session.domain.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "class",
            "description": "[filter]: like '%class%'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "int64 id = 3;  // [filter]: obj.id = id\ncontrols\n\noutput",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "sort: \"field\" asc; \"!field\" desc",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "description": "page number",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Classes"
        ]
      }
    },
    "/objclass/{class.id}": {
      "put": {
        "operationId": "UpdateClass",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateClassResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "class.id",
            "description": "(class::object).id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClassesUpdateClassBody"
            }
          }
        ],
        "tags": [
          "Classes"
        ]
      },
      "patch": {
        "operationId": "UpdateClass2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateClassResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "class.id",
            "description": "(class::object).id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClassesUpdateClassBody"
            }
          }
        ],
        "tags": [
          "Classes"
        ]
      }
    },
    "/objclass/{id}": {
      "get": {
        "operationId": "ReadClass",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReadClassResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "[filter]: obj.id = id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "class",
            "description": "[filter]: like '%class%'",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Classes"
        ]
      }
    },
    "/permissions": {
      "get": {
        "summary": "GetPermissions list available from application",
        "operationId": "GetPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSearchPermissionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "q",
            "description": "TermOfSearch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "= ANY(id)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "not",
            "description": "\u003c\u003e ANY(not)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "controls\n\noutput",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "sort: \"field\" asc; \"!field\" desc",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "description": "page number",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Permissions"
        ]
      }
    },
    "/presence": {
      "patch": {
        "summary": "set(presence) (notify, error)",
        "description": "(UserPresence) {",
        "operationId": "SetStatus2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPresenceStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSetStatusRequest"
            }
          }
        ],
        "tags": [
          "Presence"
        ]
      }
    },
    "/products": {
      "get": {
        "operationId": "LicenseUsage3",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLicenseUsageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "size",
            "description": "----- Search Options ----- //\n\ndefault: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "default: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "set of output fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "user.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "domain.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "by serial number(s)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "product",
            "description": "by product name(s)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "valid",
            "description": "view: all|valid|grantable\n\nshow: available to be granted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "q",
            "description": "filter: term of search",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/products/{id}/users": {
      "get": {
        "operationId": "LicenseUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLicenseUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "----- Search Filters ----- //\n\nREQUIRED Product ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "description": "----- Search Options ----- //\n\ndefault: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "default: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "set of output fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "filter: term of search (username)",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/roles": {
      "get": {
        "operationId": "SearchRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSearchRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "description": "----- Role-specific Filters ----------------- //\n\nfilter: .id = any(:ids...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "description": "filter: group name like",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user.id",
            "description": "Object ID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "Display Name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "description": "filter: term of search (name, description)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "bool admin = 4;  // filter: where CURRENT user is 'ADMIN' of\ncontrols\n\noutput",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "sort: \"field\" asc; \"!field\" desc",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "description": "page number",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "operationId": "CreateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCreateRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateRoleRequest"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/roles/metadata": {
      "get": {
        "operationId": "RoleMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiRoleMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Optional. Unique ID of metadata role owner",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "key",
            "description": "Optional. Partial metadata document key name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "merge.null_value",
            "description": "Represents a null value.\n\n - NULL_VALUE: Null value.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NULL_VALUE"
            ],
            "default": "NULL_VALUE"
          },
          {
            "name": "merge.number_value",
            "description": "Represents a double value.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "merge.string_value",
            "description": "Represents a string value.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "merge.bool_value",
            "description": "Represents a boolean value.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "merge.struct_value",
            "description": "Represents a structured value.",
            "in": "query",
            "required": false,
            "type": "object"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/roles/objects/{object}/records/{record.id}": {
      "get": {
        "operationId": "SearchRecordAvailableRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSearchRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "object",
            "description": "bool admin = 4;  // filter: where CURRENT user is 'ADMIN' of\nREQUIRED !",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "contacts",
              "cc_list",
              "cc_bucket",
              "calendars",
              "devices",
              "cc_agent",
              "cc_team",
              "cc_resource",
              "cc_resource_group",
              "cc_queue",
              "roles",
              "users",
              "cognitive_profile"
            ]
          },
          {
            "name": "record.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "ids",
            "description": "----- Role-specific Filters ----------------- //\n\nfilter: .id = any(:ids...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "description": "filter: group name like",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user.id",
            "description": "Object ID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "Display Name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "description": "filter: term of search (name, description)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "record.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "controls\n\noutput",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "sort: \"field\" asc; \"!field\" desc",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "description": "page number",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/roles/{id}": {
      "get": {
        "operationId": "ReadRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReadRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "role.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "select projection\n\nselect: output (fields,...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Roles"
        ]
      },
      "delete": {
        "operationId": "DeleteRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "DELETE /roles/{id}",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "ids",
            "description": "POST /roles/delete {\"ids\"}",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "permanent",
            "description": "deleteOrMark 'deleted' ?",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/roles/{role.id}": {
      "put": {
        "operationId": "UpdateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "role.id",
            "description": "oid",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RolesUpdateRoleBody"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      },
      "patch": {
        "operationId": "UpdateRole2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "role.id",
            "description": "oid",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RolesUpdateRoleBody"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/signup": {
      "post": {
        "summary": "Signup new domain with superior access token",
        "operationId": "Signup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLoginResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "description": "domain name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "description": "username",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "description": "user password",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "scope request control",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "certificate",
            "description": "license/certificate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "mobile",
            "description": "OPTIONAL. Mobile device /login request ?",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Auth"
        ]
      }
    },
    "/spaces": {
      "get": {
        "description": "| Field       | Type \n| ----------- | ---- \n| **----------- READ-ONLY -----------** | \n| `id`        | int64 \n| `ver`       | int32 \n| `etag`      | string \n| **---------- OPERATIONAL ----------** | \n| `created_at` | int64(epoch:milli) \n| `created_by` | lookup(user) \n| `updated_at` | int64(epoch:milli) \n| `updated_by` | lookup(user) \n| **---------- ATTRIBUTES -----------** | \n| `name`      | name! \n| `home_page`   | string (home_page) \n| `state`       | bool \n| `has_children`| bool \n",
        "operationId": "ListSpaces",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseSpaceList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Limit of result page records count.   _default(16); limit=(size\u003c=0?-1:size+1);_\n\n```javascript\nconst\n    default = 16\n  , maximum = 32\n;\n\n```",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term:\n`?` - matches any character\n`*` - matches 0 or more characters\nUsed to query records within a set of `qin` fields, eg: name, etc...",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort result dataset of records by fields.\n```\nsort ::= *( ORDER name )\n\nORDER  = ASC / DESC\nDESC   = \"-\" / \"!\"\nASC    = [ \"+\" ]   ; Default\n```\n\nFields available\n\n- `id`(seq)\n- `domain`{name}\n- `state`",
            "in": "query",
            "required": false,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "default": "id",
              "pattern": "^[+|-|!]?\\w+$"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "default": "*"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Records with unique IDentifier(s).\nAccept: `id` -or- `etag`.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Spaces"
        ]
      },
      "post": {
        "summary": "Create NEW Space",
        "operationId": "CreateSpace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseSpace"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "input",
            "description": "NEW Spaces source changes",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/knowledgebaseInputSpace"
              }
            }
          },
          {
            "name": "fields",
            "description": "Source Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Spaces"
        ]
      }
    },
    "/spaces/search": {
      "get": {
        "operationId": "SpacesArticlesSearch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseCombinedList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search term: location name;\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "description": "Active Article only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tags",
            "description": "Tags associated with the article.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "KnowledgebaseSearch"
        ]
      }
    },
    "/spaces/tags": {
      "get": {
        "summary": "List of the all Articles's Tag(s).",
        "operationId": "ListTags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseTagsList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Tags"
        ]
      }
    },
    "/spaces/{etag}": {
      "get": {
        "summary": "Locate spaces source",
        "operationId": "LocateSpace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseSpace"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "etag",
            "description": "The Space source IDentifier.\nAccept: `etag` (obsolete+) or `id`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Source Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Spaces"
        ]
      },
      "delete": {
        "summary": "Remove Space source",
        "operationId": "DeleteSpace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseSpace"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "etag",
            "description": "Unique ID of the latest version of a resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Spaces"
        ]
      },
      "patch": {
        "summary": "NEW Update of the Space source",
        "operationId": "UpdateSpace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseSpace"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resorce.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Space source changes",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Represents the name of the knowledge base space."
                },
                "home_page": {
                  "type": "string",
                  "description": "BIO. Short description about the space.\nOPTIONAL. Multi-lined text."
                },
                "state": {
                  "type": "boolean",
                  "description": "The state of the space."
                }
              },
              "title": "NEW Space source changes"
            }
          },
          {
            "name": "fields",
            "description": "Source Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Spaces"
        ]
      }
    },
    "/spaces/{space_id}/articles": {
      "get": {
        "summary": "List of the Space's Article(s).",
        "operationId": "ListArticles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseArticleList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "space_id",
            "description": "Space ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search term: location name;\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "article_id",
            "description": "Record(s) with unique ID only.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "description": "Active Article only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tags",
            "description": "Tags associated with the article.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Articles"
        ]
      },
      "post": {
        "operationId": "CreateArticle",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseArticleList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "space_id",
            "description": "Link space ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the Article link.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/knowledgebaseInputArticle"
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Articles"
        ]
      }
    },
    "/spaces/{space_id}/articles/{article_id}/attachments": {
      "get": {
        "operationId": "ArticlesAttachmentList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseAttachmentList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "space_id",
            "description": "Space ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "article_id",
            "description": "Record(s) with unique ID only.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Articles"
        ]
      }
    },
    "/spaces/{space_id}/articles/{article_id}/childrens": {
      "get": {
        "summary": "List of the Space's Article(s).",
        "operationId": "ListArticles2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseArticleList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "space_id",
            "description": "Space ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "article_id",
            "description": "Record(s) with unique ID only.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search term: location name;\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "description": "Active Article only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tags",
            "description": "Tags associated with the article.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Articles"
        ]
      }
    },
    "/spaces/{space_id}/articles/{article_id}/history": {
      "get": {
        "operationId": "ArticleVersionsList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseArticleVersionList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "space_id",
            "description": "Space ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "article_id",
            "description": "Record(s) with unique ID only.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Articles"
        ]
      }
    },
    "/spaces/{space_id}/articles/{article_id}/history/{version_id}": {
      "get": {
        "operationId": "LocateArticleVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseArticleVersion"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "space_id",
            "description": "Space ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "article_id",
            "description": "Record(s) with unique ID only.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "description": "The unique ID of version record",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Articles"
        ]
      }
    },
    "/spaces/{space_id}/articles/{etag}": {
      "get": {
        "summary": "Locate the space's Article association.",
        "operationId": "LocateArticle",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseArticle"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "space_id",
            "description": "Space ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique Article link IDentifier.\nAccept: `etag` (obsolete+) or `id`.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "\\w+"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Articles"
        ]
      },
      "delete": {
        "summary": "Remove the space's Article association.",
        "operationId": "DeleteArticle",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseArticle"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "space_id",
            "description": "Space ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID to remove.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Articles"
        ]
      },
      "patch": {
        "summary": "Update the space's Article details.",
        "operationId": "UpdateArticle",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseArticleList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "space_id",
            "description": "Link space ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the Article link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "space_id": {
                  "type": "string",
                  "format": "int64",
                  "description": "[VALUE]: --------------------------------------\nSpace ID associated with."
                },
                "state": {
                  "type": "boolean",
                  "description": "Indicates if article is active and actual."
                },
                "text": {
                  "type": "string",
                  "description": "The text content of the article."
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Tags associated with the article."
                },
                "title": {
                  "type": "string",
                  "description": "The title of the article."
                },
                "parent_article": {
                  "type": "string",
                  "format": "int64",
                  "description": "The parent article ID."
                },
                "pinned": {
                  "type": "boolean",
                  "description": "Indicates that the article is pinned on the top of list."
                }
              },
              "title": "NEW Update of the Article link."
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Articles"
        ]
      }
    },
    "/srvinfo": {
      "get": {
        "operationId": "ServerInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiServerInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Customers"
        ]
      }
    },
    "/types": {
      "get": {
        "summary": "Lookup data types registry.",
        "operationId": "Search",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataStructList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "q",
            "description": "Search term:\n`?` - matches any character\n`*` - matches 0 or more characters\ne.g.: name,emails{type},labels etc...",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "`types.id`",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "`types.name`",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repo",
            "description": "`types.repo`",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "path",
            "description": "`types.path`",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "readonly",
            "description": "[NOT] [ system / custom ] types only",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "extendable",
            "description": "[NOT] Extend[able] types only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "extensions",
            "description": "[NOT] include extensions/* types.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "extended",
            "description": "[NOT] Extend[ed] types only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "administered",
            "description": "[NOT] Administer access control only",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "size",
            "description": "Number of result records (per page).\nDefault: 16.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "Page number of result set of records.\nDefault: 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Sort result dataset of records by fields.\n```\nsort ::= *( ORDER name )\n\nORDER  = ASC / DESC\nDESC   = \"-\" / \"!\"\nASC    = [ \"+\" ]   ; Default\n```\n\nFields available\n\n- `id`(seq)\n- `domain`{name}\n- `created_at`\n- `created_by`{name}\n- `updated_at`\n- `updated_by`{name}\n\nUse ?fields=`field.sort()` option to sort Edge fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "default": "*",
              "pattern": "^[+|-|!]?\\w+$"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields [Q]uery to build result dataset record.\n```\nfields ::= field [ *( \",\" field ) ]\nfield  ::= name [ *( func ) ] [ inner ]\ninner  ::= \"{\" fields \"}\"\nfuncs  ::= *( func )\nfunc   ::= \".\" name \"(\" [ args ] \")\"\nname   ::= ALPHA / DIGIT / USCORE\n\nALPHA    = %x41-5A / %x61-7A  ; \"A\"-\"Z\" / \"a\"-\"z\"\nDIGIT    = %x30-39            ; \"0\"-\"9\"\nUSCORE   = %x5F ; underscore  ; \"_\"\n```",
            "in": "query",
            "required": false,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "default": "*"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Types"
        ]
      }
    },
    "/types/dictionaries": {
      "get": {
        "summary": "Lookup dictionaries data types.",
        "operationId": "SearchType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataStructList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "q",
            "description": "Search term:\n`?` - matches any character\n`*` - matches 0 or more characters\ne.g.: name,emails{type},labels etc...",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "`types.id`",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "`types.name`",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "repo",
            "description": "`types.repo`",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "path",
            "description": "`types.path`",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "readonly",
            "description": "[NOT] [ system / custom ] types only",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "extendable",
            "description": "[NOT] Extend[able] types only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "extensions",
            "description": "[NOT] include extensions/* types.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "extended",
            "description": "[NOT] Extend[ed] types only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "administered",
            "description": "[NOT] Administer access control only",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "size",
            "description": "Number of result records (per page).\nDefault: 16.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "Page number of result set of records.\nDefault: 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Sort result dataset of records by fields.\n```\nsort ::= *( ORDER name )\n\nORDER  = ASC / DESC\nDESC   = \"-\" / \"!\"\nASC    = [ \"+\" ]   ; Default\n```\n\nFields available\n\n- `id`(seq)\n- `domain`{name}\n- `created_at`\n- `created_by`{name}\n- `updated_at`\n- `updated_by`{name}\n\nUse ?fields=`field.sort()` option to sort Edge fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "default": "*",
              "pattern": "^[+|-|!]?\\w+$"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields [Q]uery to build result dataset record.\n```\nfields ::= field [ *( \",\" field ) ]\nfield  ::= name [ *( func ) ] [ inner ]\ninner  ::= \"{\" fields \"}\"\nfuncs  ::= *( func )\nfunc   ::= \".\" name \"(\" [ args ] \")\"\nname   ::= ALPHA / DIGIT / USCORE\n\nALPHA    = %x41-5A / %x61-7A  ; \"A\"-\"Z\" / \"a\"-\"z\"\nDIGIT    = %x30-39            ; \"0\"-\"9\"\nUSCORE   = %x5F ; underscore  ; \"_\"\n```",
            "in": "query",
            "required": false,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "default": "*"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Dictionaries"
        ]
      },
      "delete": {
        "summary": "Delete custom dictionaries.",
        "description": "(DictionaryList) {",
        "operationId": "DeleteType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataStructList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "fields",
            "description": "Fields to retrive into result dataset.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "repo",
            "description": "`types.repo`\n\n// `record.pk`\n repeated string id = 3;",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Dictionaries"
        ]
      }
    },
    "/types/dictionaries/{repo}": {
      "get": {
        "summary": "Locate the dictionary type.",
        "description": "(Dictionary) {",
        "operationId": "LocateType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protodataStruct"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "`types.repo`",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Dictionaries"
        ]
      },
      "post": {
        "summary": "Create custom dictionary.",
        "description": "(Dictionary) {",
        "operationId": "CreateType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protodataStruct"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "NEW [`types.repo`] repository name, e.g.: `countries`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW dictionary [type] definition.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dataInputDictionary"
            }
          }
        ],
        "tags": [
          "Dictionaries"
        ]
      },
      "put": {
        "summary": "Update custom dictionary.",
        "description": "(Dictionary) {",
        "operationId": "UpdateType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protodataStruct"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "[**repo**] name of the dataset type, e.g.: `countries`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "The dictionary [**type**] changes.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dataInputDictionary"
            }
          },
          {
            "name": "fields",
            "description": "Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Dictionaries"
        ]
      }
    },
    "/types/extensions": {
      "get": {
        "summary": "Search for type extensions.",
        "description": "(ExtensionList) {",
        "operationId": "SearchType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataStructList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "size",
            "description": "Number of result records (per page).\nDefault: 16.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "Page number of result set of records.\nDefault: 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Sort result dataset of records by fields.\n```\nsort ::= *( ORDER name )\n\nORDER  = ASC / DESC\nDESC   = \"-\" / \"!\"\nASC    = [ \"+\" ]   ; Default\n```\n\nFields available\n\n- `id`(seq)\n- `domain`{name}\n- `created_at`\n- `created_by`{name}\n- `updated_at`\n- `updated_by`{name}\n\nUse ?fields=`field.sort()` option to sort Edge fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "default": "*",
              "pattern": "^[+|-|!]?\\w+$"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields [Q]uery to build result dataset record.\n```\nfields ::= field [ *( \",\" field ) ]\nfield  ::= name [ *( func ) ] [ inner ]\ninner  ::= \"{\" fields \"}\"\nfuncs  ::= *( func )\nfunc   ::= \".\" name \"(\" [ args ] \")\"\nname   ::= ALPHA / DIGIT / USCORE\n\nALPHA    = %x41-5A / %x61-7A  ; \"A\"-\"Z\" / \"a\"-\"z\"\nDIGIT    = %x30-39            ; \"0\"-\"9\"\nUSCORE   = %x5F ; underscore  ; \"_\"\n```",
            "in": "query",
            "required": false,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "default": "*"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search term:\n`?` - matches any character\n`*` - matches 0 or more characters\ne.g.: name,emails{type},labels etc...",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "extension.type.id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Extensions"
        ]
      },
      "delete": {
        "summary": "Delete extension for types.",
        "description": "returns (ExtensionList) {",
        "operationId": "DeleteType2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataStructList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "repo",
            "description": "`type.repo`",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Extensions"
        ]
      }
    },
    "/types/extensions/{repo}": {
      "get": {
        "summary": "Type extension details.",
        "description": "returns (Extension) {",
        "operationId": "LocateType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protodataStruct"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "`type.repo`\n\nid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Extensions"
        ]
      },
      "delete": {
        "summary": "Delete extension for types.",
        "description": "returns (ExtensionList) {",
        "operationId": "DeleteType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataStructList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "`type.repo`",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Extensions"
        ]
      },
      "post": {
        "summary": "Create type extension.",
        "description": "returns (Extension) {",
        "operationId": "CreateType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protodataStruct"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "SUPER `types.repo` to extend, e.g.: `contacts`.\nLookup: GET /types?extendable=true",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Extension type fields.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dataInputExtension"
            }
          }
        ],
        "tags": [
          "Extensions"
        ]
      },
      "put": {
        "summary": "Update type extension.",
        "description": "returns (Extension) {",
        "operationId": "UpdateType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protodataStruct"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "`type.repo`",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dataInputExtension"
            }
          }
        ],
        "tags": [
          "Extensions"
        ]
      }
    },
    "/types/{path}": {
      "get": {
        "summary": "Structured data type details.",
        "operationId": "Locate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protodataStruct"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "path",
            "description": "`types.path`",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "path"
          }
        ],
        "tags": [
          "Types"
        ]
      }
    },
    "/user": {
      "get": {
        "operationId": "ReadUser2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReadUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "partial output",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/user/settings/{key}": {
      "get": {
        "summary": "GET /user/settings/{key=*}",
        "operationId": "GetUserSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "UserSettings"
        ]
      },
      "put": {
        "summary": "Create -or- Update",
        "description": "PUT /user/settings/{key=*}\nContent-Type: application/json; charset=utf-8\n\n${value=.body}",
        "operationId": "SetUserSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "value",
            "in": "body",
            "required": true,
            "schema": {}
          }
        ],
        "tags": [
          "UserSettings"
        ]
      }
    },
    "/userinfo": {
      "get": {
        "summary": "The UserInfo Endpoint is an OAuth 2.0 Protected Resource that returns Claims about the authenticated End-User.",
        "operationId": "UserInfo2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserinfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "access_token",
            "description": "string id_token = 2;",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ]
      },
      "post": {
        "summary": "The UserInfo Endpoint is an OAuth 2.0 Protected Resource that returns Claims about the authenticated End-User.",
        "operationId": "UserInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserinfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "access_token",
            "description": "string id_token = 2;",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ]
      }
    },
    "/users": {
      "get": {
        "operationId": "SearchUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSearchUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "----- Base Filters ---------------------------\n\nfilter: .id = any({id}...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "not_id",
            "description": "filter: .id \u003c\u003e all({not_ids}...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "----- User-specific Filters ------------------\n\nfilter: (.name|.username|.extension|.status) ILIKE '{q}'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "filter: .name ILIKE '{name}'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "filter: .status ILIKE '{status}'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "description": "filter: .username ILIKE '{username}'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "extension",
            "description": "filter: .extension LIKE '{extension}'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "any",
            "description": "----- View Modes -----------------------------\nNOTE: by default, search NOT 'deleted' objects ONLY\n\nfilter: include 'deleted' ALSO ! (inactive)",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "deleted",
            "description": "filter: .deleted_at NOTNULL (view: RECYCLE)",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "presence.status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "presence.note",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "// navigation filter\nrepeated int64 roles = 7;\n----- Search Options -------------------------\n\nselect: output (fields,...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "select: order by (fields,...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "description": "select: offset {page}",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "select: limit {size}",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "operationId": "DeleteUsers2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "selection",
            "description": "MANY /users .ids=[id,...]",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "description": "ONE /users/{id}",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "permanent",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "post": {
        "operationId": "CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCreateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateUserRequest"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/password": {
      "put": {
        "operationId": "UpdatePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdatePasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdatePasswordRequest"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/search": {
      "post": {
        "operationId": "SearchUsers2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSearchUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSearchUsersRequest"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "ReadUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReadUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "partial output",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "operationId": "DeleteUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ONE /users/{id}",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "selection",
            "description": "MANY /users .ids=[id,...]",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "permanent",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}/logout": {
      "post": {
        "operationId": "LogoutUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLogoutUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UsersLogoutUserBody"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{publish.id}/presence": {
      "patch": {
        "summary": "set(presence) (notify, error)",
        "description": "(UserPresence) {",
        "operationId": "SetStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPresenceStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "publish.id",
            "description": "[required] user identity",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PresenceSetStatusBody"
            }
          }
        ],
        "tags": [
          "Presence"
        ]
      }
    },
    "/users/{token.user.id}/tokens": {
      "post": {
        "operationId": "AddUserAccessToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserAccessToken"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "token.user.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "token",
            "description": "processing\n------------\ntoken.user.id // [required] authorization\ntoken.usage   // [optional] short description",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "title": "tokenKey::token_key"
                },
                "token": {
                  "type": "string",
                  "title": "tokenString::access_token"
                },
                "usage": {
                  "type": "string",
                  "title": "[optional] short usage description"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "title": "display name"
                    }
                  },
                  "title": "[optional] output depends on API endpoint"
                },
                "created_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix::ms"
                },
                "created_by": {
                  "$ref": "#/definitions/apiObjectId"
                },
                "updated_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix::ms"
                },
                "updated_by": {
                  "$ref": "#/definitions/apiObjectId"
                },
                "deleted_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "[optional] disabled at"
                },
                "deleted_by": {
                  "$ref": "#/definitions/apiObjectId",
                  "title": "[optional] disabled by"
                }
              },
              "title": "processing\n------------\ntoken.user.id // [required] authorization\ntoken.usage   // [optional] short description"
            }
          },
          {
            "name": "enable",
            "description": "ObjectId user = 1; // [required]\n string usage = 2;  // [optional] usage description\n bool enable = 3;",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "UserAccessTokens"
        ]
      }
    },
    "/users/{update.user.id}/tokens/{update.id}": {
      "put": {
        "operationId": "UpdateUserAccessToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserAccessToken"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "update.user.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "update.id",
            "description": "tokenKey::token_key",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "update",
            "description": "[required] identification + modifications(about)",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "title": "tokenString::access_token"
                },
                "usage": {
                  "type": "string",
                  "title": "[optional] short usage description"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "title": "display name"
                    }
                  },
                  "title": "[optional] output depends on API endpoint"
                },
                "created_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix::ms"
                },
                "created_by": {
                  "$ref": "#/definitions/apiObjectId"
                },
                "updated_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix::ms"
                },
                "updated_by": {
                  "$ref": "#/definitions/apiObjectId"
                },
                "deleted_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "[optional] disabled at"
                },
                "deleted_by": {
                  "$ref": "#/definitions/apiObjectId",
                  "title": "[optional] disabled by"
                }
              },
              "title": "[required] identification + modifications(about)"
            }
          },
          {
            "name": "fields",
            "description": "[optional] PATCH implementation",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "enable",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "UserAccessTokens"
        ]
      },
      "patch": {
        "operationId": "UpdateUserAccessToken2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserAccessToken"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "update.user.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "update.id",
            "description": "tokenKey::token_key",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "update",
            "description": "[required] identification + modifications(about)",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "title": "tokenString::access_token"
                },
                "usage": {
                  "type": "string",
                  "title": "[optional] short usage description"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "title": "display name"
                    }
                  },
                  "title": "[optional] output depends on API endpoint"
                },
                "created_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix::ms"
                },
                "created_by": {
                  "$ref": "#/definitions/apiObjectId"
                },
                "updated_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix::ms"
                },
                "updated_by": {
                  "$ref": "#/definitions/apiObjectId"
                },
                "deleted_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "[optional] disabled at"
                },
                "deleted_by": {
                  "$ref": "#/definitions/apiObjectId",
                  "title": "[optional] disabled by"
                }
              },
              "title": "[required] identification + modifications(about)"
            }
          },
          {
            "name": "fields",
            "description": "[optional] PATCH implementation",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "enable",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "UserAccessTokens"
        ]
      }
    },
    "/users/{user.id}": {
      "put": {
        "operationId": "UpdateUser",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user.id",
            "description": "Object ID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user",
            "description": "body: modifications/changes",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "title": "Caller-ID-Name: Display Name"
                },
                "email": {
                  "type": "string"
                },
                "username": {
                  "type": "string",
                  "title": "alphanumeric username (login)"
                },
                "password": {
                  "type": "string"
                },
                "extension": {
                  "type": "string",
                  "title": "Caller-ID-Number:"
                },
                "presence": {
                  "$ref": "#/definitions/apiUserPresence",
                  "description": "string presence = 7; // unique set of \u003cuser\u003e presentity \u003cstatus:basic\u003e tuples open[ed]\n string status = 8; // short display status (short description)",
                  "title": "CallerId caller = 5; // extension\nPresenceStatus presence = 8;"
                },
                "device": {
                  "$ref": "#/definitions/apiObjectId",
                  "title": "[optional] default device assigned ? WebRTC register ?"
                },
                "devices": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/apiObjectId"
                  },
                  "description": "[editable] list of unique `regular` devices, attached to this user",
                  "title": "map\u003cint64, string\u003e devices = 13;"
                },
                "hotdesks": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/apiObjectId"
                  },
                  "title": "[readonly] list of unique `hotdesk` devices, assigned to this user"
                },
                "profile": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "list of variables, assigned to this user as an environment unit"
                },
                "permissions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/apiPermission"
                  },
                  "title": "set of operational permission grants"
                },
                "license": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/apiLicenseUser"
                  },
                  "title": "list of unique licenses, granted to this user"
                },
                "roles": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/apiObjectId"
                  },
                  "title": "roles, member of which is this user"
                },
                "totp_url": {
                  "type": "string",
                  "title": "[readonly][optional] one time password if setting (2fa) is enabled"
                },
                "contact": {
                  "$ref": "#/definitions/apiObjectId",
                  "description": "[optional] contact connected to this user",
                  "title": "repeated Call calls = 13; // order by created_at\nrepeated Registration reged = 13; // order by register_last"
                },
                "created_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "created_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                },
                "updated_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "updated_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                },
                "deleted_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "deleted_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                },
                "chat_name": {
                  "type": "string",
                  "description": "The \"chat_name\" field is used to store the name displayed externally on the platform.\nFor example, \"chat_name\" is shown when an agent connects to chats with clients."
                },
                "force_password_change": {
                  "type": "boolean",
                  "description": "When set to true, the user will be required to change their password on next login."
                }
              },
              "title": "body: modifications/changes"
            }
          },
          {
            "name": "fields",
            "description": "PATCH: partial update",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "operationId": "UpdateUser2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user.id",
            "description": "Object ID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user",
            "description": "body: modifications/changes",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "title": "Caller-ID-Name: Display Name"
                },
                "email": {
                  "type": "string"
                },
                "username": {
                  "type": "string",
                  "title": "alphanumeric username (login)"
                },
                "password": {
                  "type": "string"
                },
                "extension": {
                  "type": "string",
                  "title": "Caller-ID-Number:"
                },
                "presence": {
                  "$ref": "#/definitions/apiUserPresence",
                  "description": "string presence = 7; // unique set of \u003cuser\u003e presentity \u003cstatus:basic\u003e tuples open[ed]\n string status = 8; // short display status (short description)",
                  "title": "CallerId caller = 5; // extension\nPresenceStatus presence = 8;"
                },
                "device": {
                  "$ref": "#/definitions/apiObjectId",
                  "title": "[optional] default device assigned ? WebRTC register ?"
                },
                "devices": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/apiObjectId"
                  },
                  "description": "[editable] list of unique `regular` devices, attached to this user",
                  "title": "map\u003cint64, string\u003e devices = 13;"
                },
                "hotdesks": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/apiObjectId"
                  },
                  "title": "[readonly] list of unique `hotdesk` devices, assigned to this user"
                },
                "profile": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "list of variables, assigned to this user as an environment unit"
                },
                "permissions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/apiPermission"
                  },
                  "title": "set of operational permission grants"
                },
                "license": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/apiLicenseUser"
                  },
                  "title": "list of unique licenses, granted to this user"
                },
                "roles": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/apiObjectId"
                  },
                  "title": "roles, member of which is this user"
                },
                "totp_url": {
                  "type": "string",
                  "title": "[readonly][optional] one time password if setting (2fa) is enabled"
                },
                "contact": {
                  "$ref": "#/definitions/apiObjectId",
                  "description": "[optional] contact connected to this user",
                  "title": "repeated Call calls = 13; // order by created_at\nrepeated Registration reged = 13; // order by register_last"
                },
                "created_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "created_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                },
                "updated_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "updated_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                },
                "deleted_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "deleted_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                },
                "chat_name": {
                  "type": "string",
                  "description": "The \"chat_name\" field is used to store the name displayed externally on the platform.\nFor example, \"chat_name\" is shown when an agent connects to chats with clients."
                },
                "force_password_change": {
                  "type": "boolean",
                  "description": "When set to true, the user will be required to change their password on next login."
                }
              },
              "title": "body: modifications/changes"
            }
          },
          {
            "name": "fields",
            "description": "PATCH: partial update",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{user.id}/tokens": {
      "get": {
        "operationId": "ListUserAccessToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserAccessTokenList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "description": "int32 page = 2;\nint64 size = 3;\n\n.usage ILIKE :q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "----- Search Options -------------------------\n\nselect: output (fields,...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "select: order by (fields,...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "description": "select: offset {page}",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "select: limit {size}",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "UserAccessTokens"
        ]
      }
    },
    "/users/{user.id}/tokens/{id}": {
      "get": {
        "operationId": "GetUserAccessToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserAccessToken"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "description": "tokenKey::uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserAccessTokens"
        ]
      },
      "delete": {
        "operationId": "DeleteUserAccessToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserAccessToken"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "description": "tokenKey::uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserAccessTokens"
        ]
      }
    },
    "/users/{user_id}/2fa": {
      "get": {
        "summary": "GetUserTfaKey locates the secret for user and returns it as a TOTP url",
        "operationId": "GetUserTfaKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetUserTfaKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "TwoFactorAuthentication"
        ]
      },
      "post": {
        "summary": "GenerateUserTfaKey generates new or regenerates secret for the concrete user",
        "operationId": "GenerateUserTfaKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGenerateUserTfaKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "TwoFactorAuthentication"
        ]
      }
    },
    "/v2/dataset/{repo}": {
      "get": {
        "summary": "Search dataset records",
        "operationId": "Search",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataDataset"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "[`types.repo`]",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "description": "Number of result records (per page).\nDefault: 16.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "Page number of result set of records.\nDefault: 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Sort result dataset of records by fields.\n```\nsort ::= *( ORDER name )\n\nORDER  = ASC / DESC\nDESC   = \"-\" / \"!\"\nASC    = [ \"+\" ]   ; Default\n```\n\nFields available\n\n- `id`(seq)\n- `domain`{name}\n- `created_at`\n- `created_by`{name}\n- `updated_at`\n- `updated_by`{name}\n\nUse ?fields=`field.sort()` option to sort Edge fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "default": "*",
              "pattern": "^[+|-|!]?\\w+$"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields [Q]uery to build result dataset record.\n```\nfields ::= field [ *( \",\" field ) ]\nfield  ::= name [ *( func ) ] [ inner ]\ninner  ::= \"{\" fields \"}\"\nfuncs  ::= *( func )\nfunc   ::= \".\" name \"(\" [ args ] \")\"\nname   ::= ALPHA / DIGIT / USCORE\n\nALPHA    = %x41-5A / %x61-7A  ; \"A\"-\"Z\" / \"a\"-\"z\"\nDIGIT    = %x30-39            ; \"0\"-\"9\"\nUSCORE   = %x5F ; underscore  ; \"_\"\n```",
            "in": "query",
            "required": false,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "default": "*"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search term:\n`?` - matches any character\n`*` - matches 0 or more characters\ne.g.: name,emails{type},labels etc...",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "[`record.id`]",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filters",
            "description": "Filter string in CEL format.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Records"
        ]
      },
      "delete": {
        "summary": "Delete dataset records",
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataDataset"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "[`types.repo`]",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result dataset.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "[`record.id`]",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Records"
        ]
      },
      "post": {
        "summary": "Create dataset record",
        "description": "(Record) {",
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "[`types.repo`]",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "record",
            "description": "Record data.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "Records"
        ]
      }
    },
    "/v2/dataset/{repo}/{id}": {
      "get": {
        "summary": "Locate dataset record",
        "description": "(Record) {",
        "operationId": "Locate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "[`types.repo`]",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "[`record.id`]",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields [Q]uery to build result dataset record.\n```\nfields ::= field [ *( \",\" field ) ]\nfield  ::= name [ *( func ) ] [ inner ]\ninner  ::= \"{\" fields \"}\"\nfuncs  ::= *( func )\nfunc   ::= \".\" name \"(\" [ args ] \")\"\nname   ::= ALPHA / DIGIT / USCORE\n\nALPHA    = %x41-5A / %x61-7A  ; \"A\"-\"Z\" / \"a\"-\"z\"\nDIGIT    = %x30-39            ; \"0\"-\"9\"\nUSCORE   = %x5F ; underscore  ; \"_\"\n```",
            "in": "query",
            "required": false,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "default": "*"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Records"
        ]
      },
      "put": {
        "summary": "Update dataset record",
        "description": "(Record) {",
        "operationId": "Update2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "[`types.repo`] data source",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "[`record.id`] for update",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "record",
            "description": "Record data fields changes.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "fields",
            "description": "Source Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Records"
        ]
      },
      "patch": {
        "summary": "Update dataset record",
        "description": "(Record) {",
        "operationId": "Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "repo",
            "description": "[`types.repo`] data source",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "[`record.id`] for update",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "record",
            "description": "Record data fields changes.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "fields",
            "description": "Source Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Records"
        ]
      }
    },
    "/{object.name}/{object.id}/acl": {
      "get": {
        "operationId": "ListObjectAccess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListAccessResponseV1"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "object.name",
            "description": "display name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "object.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "grantor",
            "description": "--- filters ---\n\n[optional] [FROM] each rule owner is any of role(s) id; user -or- role",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "grantee",
            "description": "[optional] [TO] subject role(s) id; user -or- role",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "granted",
            "description": "[xrwdxrwd] [R]ecord-[b]ased-[A]ccess-[C]ontrol level check(!)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "[optional] [TO] subject.name ILIKE ?q=; user -or- role",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "----- Select Options -------------------------\n\nattributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "size",
            "description": "pagedResultsControl\n\ndefault: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "default: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "AccessStore"
        ]
      },
      "patch": {
        "summary": "TODO: replace with GrantAccess API, to become command like GRANT REVOKE ... with empty access rights string",
        "operationId": "ToggleObjectAccess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateAccessResponseV1"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "object.name",
            "description": "display name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "object.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "list",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/apiGrantAccessRequestV1"
              }
            }
          }
        ],
        "tags": [
          "AccessStore"
        ]
      }
    }
  },
  "definitions": {
    "AccessGrant": {
      "type": "object",
      "properties": {
        "grantor": {
          "$ref": "#/definitions/apiRoleId",
          "title": "NEED to be rechecked !!!"
        },
        "grantee": {
          "$ref": "#/definitions/apiRoleId",
          "title": "NEED to be rechecked !!!"
        },
        "privileges": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "[\"SEARCH\",\"MODIFY\",\"DELETE\",\"CREATE\"]"
        },
        "grantable": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "[\"SEARCH\",\"MODIFY\",\"DELETE\",\"CREATE\"]"
        }
      }
    },
    "AccessStoreToggleDefaultAccessBody": {
      "type": "object",
      "properties": {
        "object": {
          "type": "object",
          "title": "[ON] objclass (either: by entity .id -or- class .name)"
        },
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiGrantAccessRequestV1"
          },
          "description": "list of changes ...\n\n[TO] (GRANT/REVOKE)"
        }
      }
    },
    "ClassesUpdateClassBody": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "title": "TO BE REMOVED // bound to session.domain.id"
        },
        "class": {
          "type": "object",
          "properties": {
            "class": {
              "type": "string",
              "title": "(class::object).name"
            },
            "abac": {
              "type": "boolean",
              "title": "[a]ttribute-[b]ased [a]ccess [c]ontrol"
            },
            "obac": {
              "type": "boolean",
              "title": "[o]peration-[b]ased [a]ccess [c]ontrol (from::collection.dal)"
            },
            "rbac": {
              "type": "boolean",
              "title": "[r]ecord-[b]ased [a]ccess [c]ontrol (from::resource.acl)"
            }
          }
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "PATCH: partial update"
        }
      }
    },
    "CommentFormat": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Offset text runes count."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "Length text runes count."
        },
        "link": {
          "$ref": "#/definitions/FormatLink"
        },
        "bold": {
          "$ref": "#/definitions/FormatBold"
        },
        "italic": {
          "$ref": "#/definitions/FormatItalic"
        },
        "underline": {
          "$ref": "#/definitions/FormatUnderline"
        },
        "strikethrough": {
          "$ref": "#/definitions/FormatStrikethrough"
        },
        "monospace": {
          "$ref": "#/definitions/FormatMonospace"
        },
        "codeblock": {
          "$ref": "#/definitions/FormatCodeblock"
        }
      }
    },
    "DictionariesImportCSVBody": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte",
          "title": "CSV data"
        },
        "fields": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          },
          "title": "map \u003c field, column \u003e index"
        },
        "line_begin": {
          "type": "integer",
          "format": "int64"
        },
        "line_end": {
          "type": "integer",
          "format": "int64"
        },
        "on_data_error": {
          "$ref": "#/definitions/ImportCSVRequestaction"
        },
        "on_empty_line": {
          "$ref": "#/definitions/ImportCSVRequestaction"
        }
      }
    },
    "DomainsUpdateDomainBody": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "object",
          "properties": {
            "domain": {
              "type": "string",
              "title": "FQDN"
            },
            "organization": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "locality": {
              "type": "string"
            },
            "stateOrProvince": {
              "type": "string"
            },
            "streetAddress": {
              "type": "string"
            },
            "postalCode": {
              "type": "string"
            },
            "postalAddress": {
              "type": "string"
            },
            "telephoneNumber": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "createdAt": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "createdBy": {
              "type": "string",
              "title": "user"
            },
            "updatedAt": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "updatedBy": {
              "type": "string",
              "title": "user"
            }
          }
        }
      },
      "title": "PUT /domain/{domain.dc}"
    },
    "DynamicConditionsCreateConditionBody": {
      "type": "object",
      "properties": {
        "expression": {
          "type": "string",
          "description": "The query or condition expression used to evaluate the group."
        },
        "group": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The ID of the static group that should be assigned if the condition is met."
        },
        "assignee": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The ID of the assignee that should be assigned if the condition is met (optional)."
        }
      },
      "description": "Request message for creating a new condition."
    },
    "FormatBold": {
      "type": "object"
    },
    "FormatCodeblock": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string"
        }
      }
    },
    "FormatItalic": {
      "type": "object"
    },
    "FormatLink": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "title": "REQUIRED. If text[offset:length] is a regular plaintext, NOT an URL itself !"
        }
      }
    },
    "FormatMonospace": {
      "type": "object"
    },
    "FormatStrikethrough": {
      "type": "object"
    },
    "FormatUnderline": {
      "type": "object"
    },
    "ImportCSVRequestaction": {
      "type": "string",
      "enum": [
        "continue",
        "break"
      ],
      "default": "continue"
    },
    "LDAPCreateLDAPTemplateBody": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "ID unique"
        },
        "name": {
          "type": "string",
          "title": "Name this template"
        },
        "base_dn": {
          "type": "string",
          "title": "Optional. LDAP Search base entry DN"
        },
        "search": {
          "type": "string",
          "title": "Required. LDAP Search filter string"
        },
        "catalog": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "display name"
            }
          },
          "title": "LDAPCatalog belongs to"
        },
        "enabled": {
          "type": "boolean",
          "title": "Optional. This Template is activated ?"
        },
        "role": {
          "type": "object",
          "title": "OPTIONAL. Role objclass fields mapping (Not implemented yet)"
        },
        "device": {
          "type": "object",
          "title": "OPTIONAL. Device objclass fields mapping"
        },
        "user": {
          "type": "object",
          "title": "OPTIONAL. User objclass fields mapping"
        },
        "agent": {
          "type": "object",
          "title": "OPTIONAL. Agent objclass fields mapping"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "unix",
          "title": "READONLY. Operational attributes"
        },
        "created_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        }
      },
      "title": "LDAPTemplate is an LDAP search entries to webitel objects transformation template"
    },
    "LDAPDeleteLDAPTemplateBody": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "default: 1",
          "title": "----- Select Options -------------------------"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "default: 16"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "attributes list"
        },
        "sort": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;"
        },
        "id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "title": "----- Search Basic Filters ---------------------------\nOPTIONAL. Search templates by .id"
        },
        "q": {
          "type": "string",
          "title": "OPTIONAL. Filter(s) SET"
        },
        "name": {
          "type": "string"
        },
        "base_dn": {
          "type": "string"
        },
        "objclass": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        }
      }
    },
    "LDAPLDAPSearchBody": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]",
          "title": "Optional. URL to establish connection to LDAP catalog"
        },
        "tls": {
          "$ref": "#/definitions/apiLDAPSearchRequestTLSConfig"
        },
        "bind": {
          "type": "string",
          "description": "authorization method e.g.: SIMPLE, SAML, NTLM, etc.",
          "title": "----- BIND: Authorization -----"
        },
        "username": {
          "type": "string",
          "title": "bind_dn"
        },
        "password": {
          "type": "string",
          "title": "password"
        },
        "baseObject": {
          "type": "string",
          "title": "----- SearchRequest -----\nbaseObject [D]istinguished[N]ame"
        },
        "scope": {
          "type": "integer",
          "format": "int32",
          "title": "baseObject              (0),\nsingleLevel             (1),\nwholeSubtree            (2)"
        },
        "derefAliases": {
          "type": "integer",
          "format": "int32",
          "title": "neverDerefAliases       (0),\nderefInSearching        (1),\nderefFindingBaseObj     (2),\nderefAlways             (3)"
        },
        "sizeLimit": {
          "type": "string",
          "format": "int64",
          "title": "INTEGER (0 ..  maxInt),"
        },
        "timeLimit": {
          "type": "string",
          "format": "int64",
          "title": "INTEGER (0 ..  maxInt),"
        },
        "typesOnly": {
          "type": "boolean",
          "title": "BOOLEAN,"
        },
        "filter": {
          "type": "string",
          "title": "Filter,"
        },
        "attributes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "AttributeSelection"
        },
        "controls": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLDAPControl"
          },
          "title": "----- LDAPMessage -----\nControls NOT implemented yet !"
        }
      },
      "title": "https://datatracker.ietf.org/doc/html/rfc4511#section-4.5.1"
    },
    "LDAPResyncLDAPCatalogBody": {
      "type": "object",
      "properties": {
        "options": {
          "$ref": "#/definitions/apiLDAProcessOptions",
          "title": "Options"
        }
      }
    },
    "LDAPUpdateLDAPCatalogBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Fields for partial update. PATCH"
        },
        "catalog": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "Meaningfull title name"
            },
            "url": {
              "type": "string",
              "description": "URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]",
              "title": "----- Connection Options -----"
            },
            "tls": {
              "$ref": "#/definitions/apiLDAPCatalogTLSConfig"
            },
            "bind": {
              "type": "string",
              "description": "authorization method e.g.: SIMPLE, SAML, NTLM, etc.",
              "title": "----- BIND: Authorization -----"
            },
            "base_dn": {
              "type": "string",
              "title": "base_dn, aka domain e.g.: 'dc=example,dc=org'"
            },
            "username": {
              "type": "string",
              "title": "bind_dn"
            },
            "password": {
              "type": "string",
              "title": "password"
            },
            "cron": {
              "type": "string",
              "description": "[CRON]OS SPEC ! github.com/robfig/cron/v3",
              "title": "----- RSYNC Processing -----\nint32  priority = 4;"
            },
            "sync": {
              "$ref": "#/definitions/apiLDAProcessOptions"
            },
            "entry_uuid": {
              "type": "string",
              "description": "entry unique id (except DN which may be updated)",
              "title": "----- DOMAIN: Entry model -----"
            },
            "entry_modify": {
              "type": "string",
              "title": "last modification timestamp attribute type"
            },
            "templates": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/apiLDAPTemplate"
              },
              "title": "// // ----- MAP: user(s) settings -----\nLDAPUsersMap users = 26; // DEPRECATED: Use Template(s) instead\nSYNC Object's search and mappings"
            },
            "process": {
              "$ref": "#/definitions/apiLDAProcess",
              "title": "Last OR Current SYNC process details"
            },
            "created_at": {
              "type": "string",
              "format": "int64",
              "description": "unix",
              "title": "basic: last operation details"
            },
            "created_by": {
              "$ref": "#/definitions/apiUserId",
              "title": "user"
            },
            "updated_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "updated_by": {
              "$ref": "#/definitions/apiUserId",
              "title": "user"
            }
          },
          "description": "LDAP Catalog changes.",
          "title": "LDAP Catalog changes."
        }
      }
    },
    "LDAPUpdateLDAPTemplateBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "OPTIONAL. Fields for partial update. PATCH"
        },
        "template": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "Name this template"
            },
            "base_dn": {
              "type": "string",
              "title": "Optional. LDAP Search base entry DN"
            },
            "search": {
              "type": "string",
              "title": "Required. LDAP Search filter string"
            },
            "catalog": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "title": "display name"
                }
              },
              "title": "LDAPCatalog belongs to"
            },
            "enabled": {
              "type": "boolean",
              "title": "Optional. This Template is activated ?"
            },
            "role": {
              "type": "object",
              "title": "OPTIONAL. Role objclass fields mapping (Not implemented yet)"
            },
            "device": {
              "type": "object",
              "title": "OPTIONAL. Device objclass fields mapping"
            },
            "user": {
              "type": "object",
              "title": "OPTIONAL. User objclass fields mapping"
            },
            "agent": {
              "type": "object",
              "title": "OPTIONAL. Agent objclass fields mapping"
            },
            "created_at": {
              "type": "string",
              "format": "int64",
              "description": "unix",
              "title": "READONLY. Operational attributes"
            },
            "created_by": {
              "$ref": "#/definitions/apiUserId",
              "title": "user"
            },
            "updated_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "updated_by": {
              "$ref": "#/definitions/apiUserId",
              "title": "user"
            }
          },
          "description": "Template changes.",
          "title": "Template changes."
        }
      }
    },
    "MediaAttributeAudio": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "Name of the song"
        },
        "performer": {
          "type": "string",
          "title": "Song Performer"
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "title": "Duration in seconds"
        },
        "waveform": {
          "type": "string",
          "format": "byte",
          "description": "Waveform: consists in a series of bitpacked 5-bit values."
        }
      },
      "title": "// Defines an animated GIF\nmessage Animated {}\nDefines an audio"
    },
    "MediaAttributeImage": {
      "type": "object",
      "properties": {
        "width": {
          "type": "integer",
          "format": "int64",
          "title": "Width of image"
        },
        "height": {
          "type": "integer",
          "format": "int64",
          "title": "Height of image"
        },
        "animated": {
          "type": "boolean",
          "title": "Defines an animated GIF"
        }
      },
      "title": "Defines the width and height of an image uploaded"
    },
    "MediaAttributeVideo": {
      "type": "object",
      "properties": {
        "width": {
          "type": "integer",
          "format": "int64",
          "title": "Video width"
        },
        "height": {
          "type": "integer",
          "format": "int64",
          "title": "Video height"
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "title": "Duration in seconds"
        }
      },
      "title": "Defines a video"
    },
    "OAuth2FederationDeleteOAuthServiceBody": {
      "type": "object",
      "properties": {
        "permanent": {
          "type": "boolean"
        }
      }
    },
    "OAuth2FederationUpdateOAuthServiceBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Fields for partial update. PATCH"
        },
        "changes": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "display"
            },
            "domain": {
              "$ref": "#/definitions/apiObjectId"
            },
            "type": {
              "type": "string",
              "title": "well-known vendor; provider"
            },
            "logo": {
              "type": "string"
            },
            "scopes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Scopes to be requested"
            },
            "claims": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/apiClaim"
              },
              "description": "google.protobuf.Struct claims = 7;",
              "title": "Identity claims policy rules\nNOTE: Order matters"
            },
            "enabled": {
              "type": "boolean"
            },
            "client_id": {
              "type": "string"
            },
            "client_secret": {
              "type": "string"
            },
            "auth_url": {
              "type": "string",
              "title": "OAuth 2.0 Authorization Endpoint"
            },
            "token_url": {
              "type": "string",
              "title": "OAuth 2.0 Token Endpoint"
            },
            "userinfo_url": {
              "type": "string",
              "title": "OpenID Connect Userinfo Endpoint"
            },
            "discovery_url": {
              "type": "string",
              "title": "OpenID Connect Service Discovery"
            },
            "metadata": {
              "type": "object"
            },
            "created_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "created_by": {
              "$ref": "#/definitions/apiObjectId",
              "title": "user"
            },
            "updated_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "updated_by": {
              "$ref": "#/definitions/apiObjectId",
              "title": "user"
            }
          },
          "description": "Configuration changes.",
          "title": "Configuration changes."
        }
      }
    },
    "PresenceSetStatusBody": {
      "type": "object",
      "properties": {
        "publish": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "title": "[optional] set of unique 'active' presentities {dnd,dlg,sip,wss}; assume {offline} if omitted"
            },
            "note": {
              "type": "string",
              "title": "[optional] human readable comment"
            },
            "expires": {
              "type": "integer",
              "format": "int32",
              "title": "[optional] \u003cnote\u003e will be cleaned up after seconds"
            },
            "timestamp": {
              "type": "string",
              "format": "int64",
              "title": "[required] last activity time"
            }
          },
          "description": "BODY: partial modifications",
          "title": "int64 id = 1; // user.id"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "PATCH: partial attributes"
        }
      }
    },
    "RoleMember": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "user.id"
        },
        "name": {
          "type": "string",
          "title": "user.name"
        },
        "admin": {
          "type": "boolean",
          "title": "admin of the group ?"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "created_by": {
          "type": "string",
          "title": "user.[id|name]"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "type": "string",
          "title": "user"
        }
      }
    },
    "RolesUpdateRoleBody": {
      "type": "object",
      "properties": {
        "role": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "display common name"
            },
            "user": {
              "type": "boolean",
              "title": "READONLY. Report whether this Role refers to the internal User(=true) or Group(=false)"
            },
            "description": {
              "type": "string",
              "title": "short description"
            },
            "permissions": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/apiPermission"
              }
            },
            "members": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/apiObjectId"
              },
              "description": "users/roles",
              "title": "Caller caller = 4; // TOBE removed !!!\nmap\u003cint64, string\u003e users = 4;"
            },
            "metadata": {
              "type": "object",
              "title": "Optional. Metadata bound to this role by the third party integrations\nEach attribute of this object represents separate various data\nto be able to store and merge separate keys (documents)"
            },
            "created_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "created_by": {
              "$ref": "#/definitions/apiUserId",
              "title": "user"
            },
            "updated_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "updated_by": {
              "$ref": "#/definitions/apiUserId",
              "title": "user"
            },
            "deleted_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "deleted_by": {
              "$ref": "#/definitions/apiUserId",
              "title": "user"
            }
          },
          "title": "modifications"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "partial changes"
        }
      }
    },
    "SearchUsersRequestPresence": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "note": {
          "type": "string"
        }
      },
      "title": "simplified presence filter params"
    },
    "UpdateAccessRequestChanges": {
      "type": "object",
      "properties": {
        "grantee_id": {
          "type": "string",
          "format": "int64",
          "title": "subject (role::object).id"
        },
        "access": {
          "type": "string",
          "title": "[ObAC]: \"crud\" all object class privileges\n[RbAC]: \"r*u*d*\" all object privileges with grant options\n[NOTE]: empty access string denote \"delete\" operation (REVOKE)\n        others - \"add\" or \"replace\" (GRANT)"
        }
      }
    },
    "UploadMediaRequestInputData": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "binary": {
          "type": "string",
          "format": "byte"
        },
        "cancel": {
          "$ref": "#/definitions/rpcStatus"
        }
      },
      "title": "Multipart Chunk"
    },
    "UploadMediaRequestInputFile": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "meta": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsMediaAttribute"
          }
        }
      },
      "title": "File Metadata"
    },
    "UploadMediaResponseProgress": {
      "type": "object",
      "properties": {
        "percent": {
          "type": "number",
          "format": "float",
          "title": "0..100"
        }
      },
      "title": "Upload progress"
    },
    "UsersLogoutUserBody": {
      "type": "object"
    },
    "apiAccessRule": {
      "type": "object",
      "properties": {
        "grantor": {
          "$ref": "#/definitions/apiRoleId",
          "description": "[WHO]: operational; current user NEED to be rechecked !!!",
          "title": "ObjectId object = 1;"
        },
        "grantee": {
          "$ref": "#/definitions/apiRoleId",
          "title": "[WHOM]: required; NEED to be rechecked !!!"
        },
        "granted": {
          "type": "string",
          "title": "[WHAT]: full: [xrwdxrwd]; privileges: [----xrwd]; grantable: [xrwd----]"
        }
      }
    },
    "apiAccessScope": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "class: object id",
          "title": "Inherit::ObjectClass"
        },
        "class": {
          "type": "string",
          "title": "class: alphanumeric code name"
        },
        "access": {
          "type": "integer",
          "format": "int64",
          "title": "flags: [ CREATE | SELECT | UPDATE | DELETE ]"
        },
        "abac": {
          "type": "boolean",
          "description": "[A]ttribute-[b]ased;  not implemented; next releases ...",
          "title": "Is [?]-[b]ased [A]ccess [C]ontrol *model enabled ?"
        },
        "obac": {
          "type": "boolean",
          "title": "[O]peration-[b]ased;  Mandatory: control access to object.class (alias: collection, section, etc.)"
        },
        "rbac": {
          "type": "boolean",
          "title": "[R]ecord-[b]ased; Discretionary: control access to object.entry (alias: resource, record, etc.)"
        }
      },
      "title": "AccessScope represents authorized access level\nto object class declaration within domain namespace"
    },
    "apiAccessToken": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string",
          "description": "REQUIRED. The access token issued by the authorization server."
        },
        "token_type": {
          "type": "string",
          "description": "REQUIRED. The type of the token issued. Value is case insensitive."
        },
        "expires_in": {
          "type": "integer",
          "format": "int32",
          "description": "RECOMMENDED. The lifetime in seconds of the access token."
        },
        "refresh_token": {
          "type": "string",
          "description": "OPTIONAL. The refresh token, which can be used to obtain\nnew access tokens using the same authorization grant."
        },
        "state": {
          "type": "string",
          "description": "OPTIONAL, if identical to the scope requested by the client;\notherwise, REQUIRED. The scope of the access token.\nrepeated string scope = 5 [ json_name = \"scope\" ];\nREQUIRED if the \"state\" parameter was present in the client\nauthorization request. The exact value received from the client."
        }
      },
      "title": "OAuth 2.0 Access Token Response compatible"
    },
    "apiAuthorization": {
      "type": "object",
      "properties": {
        "dc": {
          "type": "string",
          "format": "int64",
          "description": "current domain component",
          "title": "current::authorization"
        },
        "domain": {
          "type": "string",
          "title": "current domain name"
        },
        "role_id": {
          "type": "string",
          "format": "int64",
          "title": "current role id"
        },
        "username": {
          "type": "string",
          "title": "current role name"
        },
        "session": {
          "$ref": "#/definitions/apiSession",
          "title": "session::authorization (primary)"
        },
        "roles": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "map[:role]:oid",
          "title": "authorization::subject(s) whose privileges extends to the current role"
        },
        "privs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "map[:priv]:uuid { \"sysadmin\":1, \"CALL_MANAGER\":712342168, \"CALL_CENTER\":32435456 }",
          "title": "MAC: set of access privileges assigned to current role::subject(s)"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiAccessScope"
          },
          "description": "[{ \"id\":1, \"class\":\"queue\", \"obac\":false, \"rbac\":true, \"access\":7 },...]",
          "title": "DAC: set of object class(es) on which at least SELECT privilege is granted to current role::subject(s)"
        }
      },
      "description": "Authorization. Current."
    },
    "apiAuthorizationCode": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "REQUIRED. The authorization code generated by the\nauthorization server. The authorization code MUST expire\nshortly after it is issued to mitigate the risk of leaks.\nA maximum authorization code lifetime of 10 minutes is\nRECOMMENDED. The client MUST NOT use the authorization code\nmore than once. If an authorization code is used more than\nonce, the authorization server MUST deny the request and SHOULD\nrevoke (when possible) all tokens previously issued based on\nthat authorization code. The authorization code is bound to\nthe client identifier and redirection URI."
        },
        "state": {
          "type": "string",
          "description": "REQUIRED if the \"state\" parameter was present in the client\nauthorization request. The exact value received from the client.\n\n---------------------------------------------------------------------\n HTTP/1.1 302 Found\n  Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA\n  \u0026state=xyz"
        }
      }
    },
    "apiAuthorizationResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/apiErrorResponse"
        },
        "code": {
          "$ref": "#/definitions/apiAuthorizationCode"
        },
        "token": {
          "$ref": "#/definitions/apiAccessToken"
        }
      }
    },
    "apiCall": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "title": "[optional] !uuid ? channel.uuid : uuid"
        },
        "channel": {
          "$ref": "#/definitions/apiChannel"
        }
      }
    },
    "apiCaller": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "title": "[required] unique_id (channel.uuid)"
        },
        "proto": {
          "type": "string",
          "title": "[required] protocol; channel source: sip|sips|webrtc"
        },
        "origin": {
          "$ref": "#/definitions/apiCallerId",
          "description": "[optional] [From]: source",
          "title": "From:"
        },
        "caller": {
          "$ref": "#/definitions/apiCallerId",
          "title": "[required] leg[A] display; at least is the same as origin"
        },
        "callee": {
          "$ref": "#/definitions/apiCallerId",
          "title": "[optional] leg[B] display"
        },
        "ANI": {
          "type": "string",
          "title": "[optional] [A]utomatic[N]umber[I]dentification"
        },
        "direction": {
          "type": "string",
          "description": "[required] inbound | outbound",
          "title": "To:"
        },
        "destination": {
          "type": "string",
          "title": "[required] [To]: in most cases this is the number"
        },
        "transferred": {
          "type": "string",
          "title": "[optional] transfer source"
        },
        "created_at": {
          "type": "string",
          "format": "uint64",
          "description": "[required] !",
          "title": "Timing of stages"
        },
        "progress_at": {
          "type": "string",
          "format": "uint64",
          "title": "[optional]"
        },
        "progress_media_at": {
          "type": "string",
          "format": "uint64",
          "title": "[optional]"
        },
        "answered_at": {
          "type": "string",
          "format": "uint64",
          "title": "[optional]"
        },
        "bridged_at": {
          "type": "string",
          "format": "uint64",
          "title": "[optional]"
        },
        "hangup_at": {
          "type": "string",
          "format": "uint64",
          "title": "[optional] unlil hangup state reached"
        },
        "onhold_at": {
          "type": "string",
          "format": "uint64",
          "title": "[optional] last 'hold' at time"
        },
        "onhold_ms": {
          "type": "string",
          "format": "uint64",
          "title": "[optional] 'hold' time accumulated"
        },
        "commutation": {
          "type": "string",
          "description": "[optional] 'originator' | 'originatee' FIXME: 'bridge' ?",
          "title": "Other-Leg: oneof below or nothing"
        },
        "originator": {
          "$ref": "#/definitions/apiCaller",
          "title": "defines::leg[A]; thisis:leg[B]"
        },
        "originatee": {
          "$ref": "#/definitions/apiCaller",
          "title": "defines::leg[B]; thisis:leg[A]"
        }
      },
      "title": "The Caller profile"
    },
    "apiCallerId": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "number": {
          "type": "string"
        }
      },
      "description": "CallerId display value."
    },
    "apiCertificate": {
      "type": "object",
      "properties": {
        "serial": {
          "type": "string",
          "title": "serial number assigned (global::Customer-ID)"
        },
        "version": {
          "type": "string",
          "title": "version"
        },
        "validity": {
          "$ref": "#/definitions/apiValidity",
          "title": "int32 competitive = 4; // zero-based competitive sessions limit ?"
        },
        "license": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLicense"
          },
          "title": "grants issued"
        },
        "this_update": {
          "type": "string",
          "format": "int64",
          "title": "unix: issuer signed at"
        },
        "next_update": {
          "type": "string",
          "format": "int64",
          "title": "unix: signature expires; update required"
        },
        "valid": {
          "type": "boolean",
          "title": "validation status"
        },
        "domains": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "apiCertificateUsageResponse": {
      "type": "object",
      "properties": {
        "certificate": {
          "$ref": "#/definitions/apiCertificate",
          "title": "detailed"
        }
      }
    },
    "apiChannel": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "title": "[required] unique_id"
        },
        "proto": {
          "type": "string",
          "title": "[required] source; protocol"
        },
        "state": {
          "type": "string",
          "title": "[required] call_state"
        },
        "active": {
          "type": "string",
          "title": "[optional] answer_state"
        },
        "hangup": {
          "type": "string",
          "title": "[optional] hangup_cause"
        },
        "profile": {
          "$ref": "#/definitions/apiCaller",
          "title": "[required] profile in front of this channel"
        },
        "direction": {
          "type": "string",
          "title": "[required] inbound | outbound"
        }
      }
    },
    "apiClaim": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "apiCreateDeviceResponse": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/apiDevice"
        }
      }
    },
    "apiCreateDomainRequest": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/apiOrganization"
        },
        "superuser": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "title": "POST /domains"
    },
    "apiCreateDomainResponse": {
      "type": "object"
    },
    "apiCreateRoleRequest": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/apiRole",
          "title": "entity to be created"
        },
        "copy_id": {
          "type": "string",
          "format": "int64",
          "title": "----- Query parameters -----\nOptional. Source role unique identifier\nto copy access (+default) control list from"
        }
      }
    },
    "apiCreateRoleResponse": {
      "type": "object",
      "properties": {
        "created": {
          "$ref": "#/definitions/apiRole",
          "title": "entity to be created"
        }
      }
    },
    "apiCreateUserRequest": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/apiUser",
          "title": "user entity to be created"
        },
        "user_password": {
          "type": "string",
          "title": "cleartext passphrase"
        },
        "confirm_password": {
          "type": "string",
          "title": "cleartext passphrase"
        }
      }
    },
    "apiCreateUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/apiUser"
        }
      }
    },
    "apiCustomer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "serial number assigned (global::Customer-ID)"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "local created ms",
          "title": "string version = 2; // version\nlocal store details"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "last uploaded ms"
        },
        "revoked_at": {
          "type": "string",
          "format": "int64",
          "title": "local revoked ms"
        },
        "organization": {
          "type": "string",
          "title": "registration name"
        },
        "issued_at": {
          "type": "string",
          "format": "int64",
          "description": "[required] issuer(CA) created at",
          "title": "validity boundaries"
        },
        "not_before": {
          "type": "string",
          "format": "int64",
          "title": "[optional] valid from"
        },
        "not_after": {
          "type": "string",
          "format": "int64",
          "title": "[required] valid till"
        },
        "this_update": {
          "type": "string",
          "format": "int64",
          "description": "[optional]: issuer(CA) signed at",
          "title": "signature validity"
        },
        "next_update": {
          "type": "string",
          "format": "int64",
          "title": "[optional]: signature expires; update required after"
        },
        "verify": {
          "$ref": "#/definitions/apiVerification",
          "description": "[optional] validation results",
          "title": "Verification status"
        },
        "limit": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "description": "defines map[class]limit usage",
          "title": "extensions granted"
        },
        "license": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLicenseV1"
          },
          "description": "grants issued",
          "title": "int32 competitive = 13; // zero-based competitive sessions limit ?"
        },
        "dnsrv": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiObjectId"
          },
          "title": "[optional] domains"
        }
      }
    },
    "apiDeleteDeviceResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiDevice"
          }
        }
      }
    },
    "apiDeleteDomainResponse": {
      "type": "object"
    },
    "apiDeleteLDAPRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "catalog id"
        },
        "related_objects": {
          "type": "boolean",
          "title": "WITH objects bound to ?"
        }
      }
    },
    "apiDeleteOAuthServiceRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "permanent": {
          "type": "boolean"
        }
      }
    },
    "apiDeleteOAuthServiceResponse": {
      "type": "object"
    },
    "apiDeleteRoleResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "$ref": "#/definitions/apiRole"
        }
      }
    },
    "apiDeleteUsersResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiUser"
          }
        }
      }
    },
    "apiDevice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "object id"
        },
        "name": {
          "type": "string",
          "description": "display name",
          "title": "kind of\nDeviceType type = 19;"
        },
        "account": {
          "type": "string",
          "description": "username",
          "title": "credentials"
        },
        "password": {
          "type": "string",
          "title": "password"
        },
        "user": {
          "$ref": "#/definitions/apiUserId",
          "title": "[optional] The user that 'owns' the device;"
        },
        "logged_in": {
          "type": "string",
          "format": "int64",
          "title": "caller profile\n webitel.adt.caller caller = 4;"
        },
        "hotdesk": {
          "type": "boolean",
          "description": "act as a hotdesk",
          "title": "Hotdesk: this workstation aliases"
        },
        "hotdesks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "associated aliases"
        },
        "provision": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "provision extra data"
        },
        "brand": {
          "type": "string",
          "description": "vendor brand name",
          "title": "provision"
        },
        "model": {
          "type": "string"
        },
        "mac": {
          "type": "string",
          "title": "static"
        },
        "ip": {
          "type": "string"
        },
        "reged": {
          "type": "boolean",
          "title": "TODO: something like PresenceStatus instead of Registration\n repeated Registration contacts = 16;"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "created_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        },
        "deleted_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "deleted_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        }
      },
      "title": "Device profile"
    },
    "apiDeviceAudit": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/apiUserId",
          "title": "/devices/:id/audit related"
        },
        "device": {
          "$ref": "#/definitions/apiDeviceId",
          "title": "/users/:id/audit related"
        },
        "hotdesk": {
          "type": "string"
        },
        "logged_in": {
          "type": "string",
          "format": "int64"
        },
        "logged_out": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "Device login audit"
    },
    "apiDeviceAuditResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "search: limit {size}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiDeviceAudit"
          },
          "title": "audit_logs"
        }
      }
    },
    "apiDeviceId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Object ID"
        },
        "name": {
          "type": "string",
          "title": "Display Name"
        }
      },
      "title": "DeviceId lookup value"
    },
    "apiErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "error_description": {
          "type": "string"
        },
        "error_uri": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "title": "---------------------------------------------------------------------\n HTTP/1.1 302 Found\n  Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA\n  \u0026state=xyz"
        }
      }
    },
    "apiGenerateTfaKeysForNecessaryUsersResponse": {
      "type": "object",
      "properties": {
        "affected": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "apiGenerateUserTfaKeyResponse": {
      "type": "object",
      "properties": {
        "totp": {
          "$ref": "#/definitions/apiTfaUrl"
        }
      }
    },
    "apiGetCustomerResponse": {
      "type": "object",
      "properties": {
        "customer": {
          "$ref": "#/definitions/apiCustomer"
        }
      }
    },
    "apiGetUserTfaKeyResponse": {
      "type": "object",
      "properties": {
        "totp": {
          "$ref": "#/definitions/apiTfaUrl"
        }
      }
    },
    "apiGrantAccessRequestV1": {
      "type": "object",
      "properties": {
        "object": {
          "$ref": "#/definitions/apiObjectId",
          "title": "string class = 2;\nint64 object = 3; // class.object.id"
        },
        "grantee": {
          "type": "string",
          "format": "int64",
          "title": "grantee.role.id"
        },
        "grants": {
          "type": "string",
          "title": "repeated string privileges = 5; // [\"SEARCH\",\"MODIFY\",\"DELETE\",\"CREATE\"]\nbool grantable = 6; // WITH GRANT OPTION"
        }
      }
    },
    "apiGrantAccessResponse": {
      "type": "object"
    },
    "apiGrantCertificateResponse": {
      "type": "object"
    },
    "apiGrantRoleResponse": {
      "type": "object"
    },
    "apiLDAPCatalog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "identity\nint64 dc = 1;"
        },
        "name": {
          "type": "string",
          "title": "Meaningfull title name"
        },
        "url": {
          "type": "string",
          "description": "URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]",
          "title": "----- Connection Options -----"
        },
        "tls": {
          "$ref": "#/definitions/apiLDAPCatalogTLSConfig"
        },
        "bind": {
          "type": "string",
          "description": "authorization method e.g.: SIMPLE, SAML, NTLM, etc.",
          "title": "----- BIND: Authorization -----"
        },
        "base_dn": {
          "type": "string",
          "title": "base_dn, aka domain e.g.: 'dc=example,dc=org'"
        },
        "username": {
          "type": "string",
          "title": "bind_dn"
        },
        "password": {
          "type": "string",
          "title": "password"
        },
        "cron": {
          "type": "string",
          "description": "[CRON]OS SPEC ! github.com/robfig/cron/v3",
          "title": "----- RSYNC Processing -----\nint32  priority = 4;"
        },
        "sync": {
          "$ref": "#/definitions/apiLDAProcessOptions"
        },
        "entry_uuid": {
          "type": "string",
          "description": "entry unique id (except DN which may be updated)",
          "title": "----- DOMAIN: Entry model -----"
        },
        "entry_modify": {
          "type": "string",
          "title": "last modification timestamp attribute type"
        },
        "templates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLDAPTemplate"
          },
          "title": "// // ----- MAP: user(s) settings -----\nLDAPUsersMap users = 26; // DEPRECATED: Use Template(s) instead\nSYNC Object's search and mappings"
        },
        "process": {
          "$ref": "#/definitions/apiLDAProcess",
          "title": "Last OR Current SYNC process details"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "unix",
          "title": "basic: last operation details"
        },
        "created_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        }
      },
      "title": "LDAPCatalog profile"
    },
    "apiLDAPCatalogTLSConfig": {
      "type": "object",
      "properties": {
        "cert": {
          "type": "string",
          "format": "byte",
          "description": "PEM: base64",
          "title": "TODO: (!)"
        },
        "key": {
          "type": "string",
          "format": "byte",
          "title": "PEM: base64"
        },
        "ca": {
          "type": "string",
          "format": "byte",
          "title": "PEM: base64"
        }
      },
      "title": "TLS configuration options"
    },
    "apiLDAPControl": {
      "type": "object",
      "properties": {
        "controlType": {
          "type": "string",
          "title": "LDAPOID,"
        },
        "criticality": {
          "type": "boolean",
          "title": "BOOLEAN DEFAULT FALSE,"
        },
        "controlValue": {
          "type": "string",
          "title": "OCTET STRING OPTIONAL"
        }
      },
      "title": "https://datatracker.ietf.org/doc/html/rfc4511#section-4.1.11"
    },
    "apiLDAPObjentry": {
      "type": "object",
      "properties": {
        "entry": {
          "type": "object",
          "description": "map\u003cstring, string\u003e entry = 1;",
          "title": "LDAP Entry Attributes fetched"
        },
        "class": {
          "type": "string",
          "title": "Internal object class been associated with this LDAP .entry"
        },
        "object": {
          "type": "object",
          "title": "Internal object state; DUMP"
        },
        "proc": {
          "type": "string",
          "title": "Operation been performed: create|update|delete"
        },
        "warn": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "An error(s) if any occured\nNON-FATAL Warnings"
        },
        "errs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "FATAL Error(s). NON empty indicates that this process failed"
        }
      },
      "title": "LDAP entry object associatetions performed"
    },
    "apiLDAPSearchRequest": {
      "type": "object",
      "properties": {
        "catalog_id": {
          "type": "string",
          "format": "int64",
          "title": "----- connection -----\nOptional. ID of the preconfigured LDAP catalog"
        },
        "url": {
          "type": "string",
          "description": "URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]",
          "title": "Optional. URL to establish connection to LDAP catalog"
        },
        "tls": {
          "$ref": "#/definitions/apiLDAPSearchRequestTLSConfig"
        },
        "bind": {
          "type": "string",
          "description": "authorization method e.g.: SIMPLE, SAML, NTLM, etc.",
          "title": "----- BIND: Authorization -----"
        },
        "username": {
          "type": "string",
          "title": "bind_dn"
        },
        "password": {
          "type": "string",
          "title": "password"
        },
        "baseObject": {
          "type": "string",
          "title": "----- SearchRequest -----\nbaseObject [D]istinguished[N]ame"
        },
        "scope": {
          "type": "integer",
          "format": "int32",
          "title": "baseObject              (0),\nsingleLevel             (1),\nwholeSubtree            (2)"
        },
        "derefAliases": {
          "type": "integer",
          "format": "int32",
          "title": "neverDerefAliases       (0),\nderefInSearching        (1),\nderefFindingBaseObj     (2),\nderefAlways             (3)"
        },
        "sizeLimit": {
          "type": "string",
          "format": "int64",
          "title": "INTEGER (0 ..  maxInt),"
        },
        "timeLimit": {
          "type": "string",
          "format": "int64",
          "title": "INTEGER (0 ..  maxInt),"
        },
        "typesOnly": {
          "type": "boolean",
          "title": "BOOLEAN,"
        },
        "filter": {
          "type": "string",
          "title": "Filter,"
        },
        "attributes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "AttributeSelection"
        },
        "controls": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLDAPControl"
          },
          "title": "----- LDAPMessage -----\nControls NOT implemented yet !"
        }
      },
      "title": "https://datatracker.ietf.org/doc/html/rfc4511#section-4.5.1"
    },
    "apiLDAPSearchRequestTLSConfig": {
      "type": "object",
      "properties": {
        "PEM": {
          "type": "string",
          "format": "byte",
          "description": "base64",
          "title": "TODO: (!)"
        }
      },
      "title": "TLS configuration options"
    },
    "apiLDAPSearchResponse": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "title": "----- SearchResult (Entry|Reference) -----"
        },
        "resultCode": {
          "type": "integer",
          "format": "int32",
          "title": "----- LDAPResult -----"
        },
        "matchedDN": {
          "type": "string",
          "title": "LDAPDN,"
        },
        "diagnosticMessage": {
          "type": "string",
          "title": "LDAPString,"
        },
        "referral": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "[3] Referral OPTIONAL"
        },
        "controls": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLDAPControl"
          },
          "title": "----- LDAPMessage -----"
        }
      },
      "title": "https://datatracker.ietf.org/doc/html/rfc4511#section-4.5.2"
    },
    "apiLDAPTemplate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "ID unique"
        },
        "name": {
          "type": "string",
          "title": "Name this template"
        },
        "base_dn": {
          "type": "string",
          "title": "Optional. LDAP Search base entry DN"
        },
        "search": {
          "type": "string",
          "title": "Required. LDAP Search filter string"
        },
        "catalog": {
          "$ref": "#/definitions/apiObjectId",
          "title": "LDAPCatalog belongs to"
        },
        "enabled": {
          "type": "boolean",
          "title": "Optional. This Template is activated ?"
        },
        "role": {
          "type": "object",
          "title": "OPTIONAL. Role objclass fields mapping (Not implemented yet)"
        },
        "device": {
          "type": "object",
          "title": "OPTIONAL. Device objclass fields mapping"
        },
        "user": {
          "type": "object",
          "title": "OPTIONAL. User objclass fields mapping"
        },
        "agent": {
          "type": "object",
          "title": "OPTIONAL. Agent objclass fields mapping"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "unix",
          "title": "READONLY. Operational attributes"
        },
        "created_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        }
      },
      "title": "LDAPTemplate is an LDAP search entries to webitel objects transformation template"
    },
    "apiLDAPTemplateResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "result: {page} number"
        },
        "next": {
          "type": "boolean",
          "title": "result: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLDAPTemplate"
          }
        }
      }
    },
    "apiLDAProcess": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Readonly. Process unique identifier"
        },
        "options": {
          "$ref": "#/definitions/apiLDAProcessOptions",
          "title": "Readonly. Executed with options"
        },
        "execute_at": {
          "type": "string",
          "format": "int64",
          "title": "Readonly. Process start timestamp"
        },
        "execute_by": {
          "$ref": "#/definitions/apiRoleId",
          "title": "Optional. Start manually by the user or role"
        },
        "complete_at": {
          "type": "string",
          "format": "int64",
          "description": "Optional. If not \u003czero\u003e indicates that this process is completed."
        },
        "status": {
          "type": "string",
          "title": "Optional. Status description or an error if any occured"
        },
        "progress": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLDAPObjentry"
          },
          "title": "Optional. List of entries been already processed"
        }
      },
      "title": "LDAP synchronization process details"
    },
    "apiLDAProcessOptions": {
      "type": "object",
      "properties": {
        "link_existing_objects": {
          "type": "boolean",
          "title": "Allows to create links\nwith fetched LDAP entries\nfor manually created objects"
        },
        "reassign_device_users": {
          "type": "boolean",
          "title": "Allows to reassign device's owner user\ndue to preconfigured mapping LDAP template"
        },
        "timeout": {
          "type": "string",
          "format": "int64",
          "title": "Operation timeout. Not implemented yet"
        },
        "test": {
          "type": "boolean",
          "title": "Will NOT perform any operations on storage.\nTo review potential processing only"
        }
      }
    },
    "apiLDAProcessResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "result: {page} number"
        },
        "next": {
          "type": "boolean",
          "title": "result: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLDAProcess"
          }
        }
      }
    },
    "apiLicense": {
      "type": "object",
      "properties": {
        "serial": {
          "type": "string",
          "title": "serial number assigned (global::License-ID)"
        },
        "scope": {
          "type": "string",
          "title": "mandatory privilege codename, e.g.: DEVICE, MANAGER, OPERATOR"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "required: limit count (maximum allowed usage quantity)"
        },
        "validity": {
          "$ref": "#/definitions/apiValidity",
          "title": "optional"
        },
        "competitive": {
          "type": "boolean"
        },
        "users": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "users.id (grantees)"
        }
      }
    },
    "apiLicenseUsageResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "this page number !",
          "title": "----- Result paging ----- //"
        },
        "next": {
          "type": "boolean",
          "title": "next page exists ? more results ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLicenseV1"
          },
          "title": "size = (.next ? len(items) : undef (\u003e len(size)))\n----- Result entries ----- //"
        }
      }
    },
    "apiLicenseUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "license.id"
        },
        "prod": {
          "type": "string",
          "title": "license.prod"
        },
        "user": {
          "$ref": "#/definitions/apiObjectId",
          "title": "grant to::user"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "setof objclass grants"
        },
        "issued_at": {
          "type": "string",
          "format": "int64",
          "title": "not before"
        },
        "expires_at": {
          "type": "string",
          "format": "int64",
          "title": "not after"
        }
      },
      "title": "USAGE details"
    },
    "apiLicenseUsersResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "this page number !",
          "title": "----- Result paging ----- //"
        },
        "next": {
          "type": "boolean",
          "title": "next page exists ? more results ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiProductUser"
          },
          "title": "size = (.next ? len(items) : undef (\u003e len(size)))\n----- Result entries ----- //"
        }
      }
    },
    "apiLicenseV1": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "serial number assigned (global::License-ID)"
        },
        "not_before": {
          "type": "string",
          "format": "int64",
          "title": "optional"
        },
        "not_after": {
          "type": "string",
          "format": "int64",
          "title": "optional"
        },
        "product": {
          "type": "string",
          "title": "product name, e.g.: DEVICE, MANAGER, OPERATOR"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "list of known classes, \u0026this product grants mandatory access to, e.g.: 'users', 'roles', 'cc_agent', 'calendars', ..."
        },
        "competitive": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "title": "required: limit count (maximum allowed usage quantity)"
        },
        "remain": {
          "type": "integer",
          "format": "int32",
          "description": "available",
          "title": "operational attributes ...\nremain = limit - len(users)"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLicenseUser"
          },
          "title": "users.id (grantees)"
        },
        "status": {
          "$ref": "#/definitions/apiVerification"
        }
      }
    },
    "apiListAccessResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccessGrant"
          }
        }
      }
    },
    "apiListAccessResponseV1": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "region: paged result control response value"
        },
        "next": {
          "type": "boolean",
          "title": "indicate partial response: ( next || page \u003e 1 ? partial : full )"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiAccessRule"
          },
          "title": "endregion"
        }
      }
    },
    "apiListRegistrationsResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "search: limit {size}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiRegistration"
          },
          "title": "registered"
        }
      }
    },
    "apiLoginResponse": {
      "type": "object",
      "properties": {
        "authorization": {
          "$ref": "#/definitions/apiAccessToken"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiUserWarning"
          },
          "title": "Warning messages that may need localization"
        }
      }
    },
    "apiLogoutResponse": {
      "type": "object"
    },
    "apiLogoutUserResponse": {
      "type": "object"
    },
    "apiOAuthService": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "title": "display"
        },
        "domain": {
          "$ref": "#/definitions/apiObjectId"
        },
        "type": {
          "type": "string",
          "title": "well-known vendor; provider"
        },
        "logo": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Scopes to be requested"
        },
        "claims": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiClaim"
          },
          "description": "google.protobuf.Struct claims = 7;",
          "title": "Identity claims policy rules\nNOTE: Order matters"
        },
        "enabled": {
          "type": "boolean"
        },
        "client_id": {
          "type": "string"
        },
        "client_secret": {
          "type": "string"
        },
        "auth_url": {
          "type": "string",
          "title": "OAuth 2.0 Authorization Endpoint"
        },
        "token_url": {
          "type": "string",
          "title": "OAuth 2.0 Token Endpoint"
        },
        "userinfo_url": {
          "type": "string",
          "title": "OpenID Connect Userinfo Endpoint"
        },
        "discovery_url": {
          "type": "string",
          "title": "OpenID Connect Service Discovery"
        },
        "metadata": {
          "type": "object"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "created_by": {
          "$ref": "#/definitions/apiObjectId",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/apiObjectId",
          "title": "user"
        }
      },
      "title": "OAuth 2.0 Authentication [S]ervice [P]rovider Application Configuration"
    },
    "apiObjclass": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "class: object id",
          "title": "Inherit::ObjectClass"
        },
        "name": {
          "type": "string",
          "title": "class: display common name"
        },
        "class": {
          "type": "string",
          "title": "class: alphanumeric code name"
        },
        "abac": {
          "type": "boolean",
          "description": "[A]ttribute-[b]ased;  not implemented; next releases ...",
          "title": "Is [?]-[b]ased [A]ccess [C]ontrol *model enabled ?"
        },
        "obac": {
          "type": "boolean",
          "title": "[O]peration-[b]ased;  Mandatory: control access to object.class (alias: collection, section, etc.)"
        },
        "rbac": {
          "type": "boolean",
          "title": "[R]ecord-[b]ased; Discretionary: control access to object.entry (alias: resource, record, etc.)"
        },
        "access": {
          "type": "string",
          "description": "flags: [ CREATE | SELECT | UPDATE | DELETE ]",
          "title": "Extension: discretionary access control"
        }
      },
      "title": "AccessScope represents authorized access level\nto object class declaration within domain namespace"
    },
    "apiObjectClass": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "(class::object).id"
        },
        "class": {
          "type": "string",
          "title": "(class::object).name"
        },
        "abac": {
          "type": "boolean",
          "title": "[a]ttribute-[b]ased [a]ccess [c]ontrol"
        },
        "obac": {
          "type": "boolean",
          "title": "[o]peration-[b]ased [a]ccess [c]ontrol (from::collection.dal)"
        },
        "rbac": {
          "type": "boolean",
          "title": "[r]ecord-[b]ased [a]ccess [c]ontrol (from::resource.acl)"
        }
      }
    },
    "apiObjectId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "identifier"
        },
        "name": {
          "type": "string",
          "title": "display name"
        }
      }
    },
    "apiOrganization": {
      "type": "object",
      "properties": {
        "dc": {
          "type": "string",
          "format": "int64",
          "title": "component"
        },
        "domain": {
          "type": "string",
          "title": "FQDN"
        },
        "organization": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "locality": {
          "type": "string"
        },
        "stateOrProvince": {
          "type": "string"
        },
        "streetAddress": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "postalAddress": {
          "type": "string"
        },
        "telephoneNumber": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "createdBy": {
          "type": "string",
          "title": "user"
        },
        "updatedAt": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updatedBy": {
          "type": "string",
          "title": "user"
        }
      }
    },
    "apiPasswordExpiryWarning": {
      "type": "object",
      "properties": {
        "days_remaining": {
          "type": "string",
          "format": "int64",
          "title": "Days until password expires"
        },
        "expires_at": {
          "type": "string",
          "format": "int64",
          "title": "Unix timestamp when password expires"
        }
      }
    },
    "apiPermission": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "[required] e.g.: 'read', 'playback_record_file', ..."
        },
        "name": {
          "type": "string",
          "title": "[optional] e.g.: 'Select Any'"
        },
        "usage": {
          "type": "string",
          "title": "[optional] e.g.: 'Grants permission to select any objects'"
        }
      }
    },
    "apiPresenceStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "[required] tuple unique id; \u003ctrack\u003e",
          "title": "basic:latest"
        },
        "app": {
          "type": "string",
          "title": "[optional] service node identity"
        },
        "status": {
          "type": "string",
          "title": "[optional] unique set of \u003cenum:dnd|call|sip|wss\u003e; assume \u003coffline\u003e if blank; \u003cscope\u003e on request"
        },
        "note": {
          "type": "string",
          "title": "[optional] human readable comment"
        },
        "open": {
          "type": "integer",
          "format": "int32",
          "title": "[optional] positive value signify 'active'"
        },
        "closed": {
          "type": "boolean",
          "title": "[optional] signify \u003cstatus\u003e tuple gone from user's presence; equls to (open == 0)"
        },
        "contact": {
          "type": "string",
          "title": "[optional] communication \u003curl\u003e"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "title": "[optional] importance level of this within presentity's"
        },
        "sequence": {
          "type": "string",
          "format": "int64",
          "title": "[optional] this tuple (document) modifications version"
        },
        "expires": {
          "type": "string",
          "format": "int64",
          "title": "NOTE: \u003cdnd\u003e actualy has no expires until user manualy switch it off"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "[required] opened time"
        },
        "domain_id": {
          "type": "string",
          "format": "int64",
          "title": "[hidden] for cluster purpose"
        },
        "presence": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiPresenceStatus"
          },
          "description": "// FIXME: well-known types ?\r\n repeated Dialog  call = 9;\r\n repeated Sipreg  sip = 9;\r\n repeated Websock wss = 9;",
          "title": "detailed: -registered -tracking tuples"
        }
      },
      "title": "PresenceStatus PUBLISH"
    },
    "apiProductUser": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/apiObjectId",
          "title": "grant to::user"
        },
        "domain": {
          "$ref": "#/definitions/apiObjectId",
          "title": "grant to::domain"
        },
        "issued_at": {
          "type": "string",
          "format": "int64",
          "title": "not before"
        },
        "expires_at": {
          "type": "string",
          "format": "int64",
          "title": "not after"
        },
        "sessions": {
          "type": "integer",
          "format": "int32",
          "title": "User's active sessions count !"
        }
      },
      "title": "ProductUser GRANT details"
    },
    "apiReadClassResponse": {
      "type": "object",
      "properties": {
        "class": {
          "$ref": "#/definitions/apiObjectClass"
        }
      }
    },
    "apiReadDeviceResponse": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/apiDevice"
        }
      }
    },
    "apiReadDomainResponse": {
      "type": "object",
      "properties": {
        "domain": {
          "$ref": "#/definitions/apiOrganization"
        }
      }
    },
    "apiReadRoleResponse": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/apiRole"
        }
      }
    },
    "apiReadSessionResponse": {
      "type": "object",
      "properties": {
        "session": {
          "$ref": "#/definitions/apiSession"
        }
      }
    },
    "apiReadUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/apiUser"
        }
      }
    },
    "apiRegistration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "user": {
          "$ref": "#/definitions/apiUserId"
        },
        "device": {
          "$ref": "#/definitions/apiDeviceId"
        },
        "callid": {
          "type": "string"
        },
        "socket": {
          "type": "string",
          "title": "registrar: local side (host) e.g.:"
        },
        "contact": {
          "type": "string",
          "title": "binding_uri"
        },
        "received": {
          "type": "string",
          "title": "registrant: remote side (proxy)"
        },
        "instance": {
          "type": "string",
          "title": "?sip.instance= register contact option"
        },
        "user_agent": {
          "type": "string"
        },
        "expires_at": {
          "type": "string",
          "format": "int64"
        },
        "register_at": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "REGISTER SIP status"
    },
    "apiRevokeAccessResponse": {
      "type": "object"
    },
    "apiRevokeCertificateResponse": {
      "type": "object"
    },
    "apiRevokeRoleResponse": {
      "type": "object"
    },
    "apiRole": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "oid"
        },
        "name": {
          "type": "string",
          "title": "display common name"
        },
        "user": {
          "type": "boolean",
          "title": "READONLY. Report whether this Role refers to the internal User(=true) or Group(=false)"
        },
        "description": {
          "type": "string",
          "title": "short description"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiPermission"
          }
        },
        "members": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiObjectId"
          },
          "description": "users/roles",
          "title": "Caller caller = 4; // TOBE removed !!!\nmap\u003cint64, string\u003e users = 4;"
        },
        "metadata": {
          "type": "object",
          "title": "Optional. Metadata bound to this role by the third party integrations\nEach attribute of this object represents separate various data\nto be able to store and merge separate keys (documents)"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "created_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        },
        "deleted_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "deleted_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        }
      },
      "title": "Role represents group of users"
    },
    "apiRoleId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique Object IDentifier"
        },
        "name": {
          "type": "string",
          "title": "Display Name"
        },
        "user": {
          "type": "boolean",
          "title": "Optional. Indicates that this role ID refers\nto the internal user as the system administrative unit"
        }
      },
      "description": "RoleId lookup value."
    },
    "apiRoleMembersResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/RoleMember"
          }
        }
      }
    },
    "apiRoleMetadataResponse": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "title": "Optional. Partial metadata document key name"
        },
        "value": {
          "title": "Metadata value"
        }
      }
    },
    "apiSearchCallsResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiCall"
          }
        }
      }
    },
    "apiSearchCertificatesResponse": {
      "type": "object",
      "properties": {
        "certificates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiCertificate"
          }
        }
      }
    },
    "apiSearchClassesResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "search: limit {size}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiObjectClass"
          },
          "title": "list"
        }
      }
    },
    "apiSearchDeviceResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "search: limit {size}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiDevice"
          },
          "title": "devices"
        }
      }
    },
    "apiSearchDomainsResponse": {
      "type": "object",
      "properties": {
        "domains": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiOrganization"
          }
        }
      }
    },
    "apiSearchLDAPResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "result: {page} number"
        },
        "next": {
          "type": "boolean",
          "title": "result: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLDAPCatalog"
          }
        }
      }
    },
    "apiSearchOAuthServiceResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "result: {page} number"
        },
        "next": {
          "type": "boolean",
          "title": "result: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiOAuthService"
          }
        }
      }
    },
    "apiSearchPermissionResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "search: limit {size}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiPermission"
          },
          "title": "result entries"
        }
      }
    },
    "apiSearchRolesResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "select: offset {page}",
          "title": "pagedResultsControl response value"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "search: limit {size}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiRole"
          },
          "title": "roles"
        }
      }
    },
    "apiSearchSessionsResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "result: {page} number"
        },
        "next": {
          "type": "boolean",
          "title": "result: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiSession"
          },
          "title": "results"
        }
      }
    },
    "apiSearchUsersRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "description": "filter: .id = any({id}...)",
          "title": "----- Base Filters ---------------------------"
        },
        "not_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "title": "filter: .id \u003c\u003e all({not_ids}...)"
        },
        "q": {
          "type": "string",
          "description": "filter: (.name|.username|.extension|.status) ILIKE '{q}'",
          "title": "----- User-specific Filters ------------------"
        },
        "name": {
          "type": "string",
          "title": "filter: .name ILIKE '{name}'"
        },
        "status": {
          "type": "string",
          "title": "filter: .status ILIKE '{status}'"
        },
        "username": {
          "type": "string",
          "title": "filter: .username ILIKE '{username}'"
        },
        "extension": {
          "type": "string",
          "title": "filter: .extension LIKE '{extension}'"
        },
        "any": {
          "type": "boolean",
          "description": "filter: include 'deleted' ALSO ! (inactive)",
          "title": "----- View Modes -----------------------------\nNOTE: by default, search NOT 'deleted' objects ONLY"
        },
        "deleted": {
          "type": "boolean",
          "title": "filter: .deleted_at NOTNULL (view: RECYCLE)"
        },
        "presence": {
          "$ref": "#/definitions/SearchUsersRequestPresence"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "select: output (fields,...)",
          "title": "// navigation filter\nrepeated int64 roles = 7;\n----- Search Options -------------------------"
        },
        "sort": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "select: order by (fields,...)"
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "select: limit {size}"
        }
      }
    },
    "apiSearchUsersResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "search: limit {size}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiUser"
          },
          "title": "users"
        }
      }
    },
    "apiServerInfoResponse": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "format": "byte",
          "title": "int64 time = 1; // current timestamp (ms)"
        }
      }
    },
    "apiSession": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "session key"
        },
        "dc": {
          "type": "string",
          "format": "int64",
          "title": "current domain.dc component"
        },
        "domain": {
          "type": "string",
          "title": "session domain.name"
        },
        "user_id": {
          "type": "string",
          "format": "int64",
          "title": "current user.id"
        },
        "username": {
          "type": "string",
          "title": "session user-friendly role name"
        },
        "network_ip": {
          "type": "string",
          "title": "remote IP address; assigned while authorization"
        },
        "user_agent": {
          "type": "string",
          "title": "remote User-Agent; assigned while authorization"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "group.name(s)"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "permission.name(s)"
        },
        "accessed_at": {
          "type": "string",
          "format": "int64",
          "title": "unix: last seen"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "expires_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        }
      }
    },
    "apiSetStatusRequest": {
      "type": "object",
      "properties": {
        "publish": {
          "$ref": "#/definitions/apiUserPresence",
          "description": "BODY: partial modifications",
          "title": "int64 id = 1; // user.id"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "PATCH: partial attributes"
        }
      }
    },
    "apiSystemObjects": {
      "type": "string",
      "enum": [
        "contacts",
        "cc_list",
        "cc_bucket",
        "calendars",
        "devices",
        "cc_agent",
        "cc_team",
        "cc_resource",
        "cc_resource_group",
        "cc_queue",
        "roles",
        "users",
        "cognitive_profile"
      ],
      "default": "contacts"
    },
    "apiTfaUrl": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/apiUserId"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "apiToggleDefaultAccessResponse": {
      "type": "object",
      "properties": {
        "granted": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiAccessRule"
          }
        },
        "revoked": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiAccessRule"
          }
        }
      }
    },
    "apiUpdateAccessResponse": {
      "type": "object",
      "properties": {
        "granted": {
          "type": "string",
          "format": "int64",
          "title": "Affected rules count"
        },
        "revoked": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "apiUpdateAccessResponseV1": {
      "type": "object",
      "properties": {
        "granted": {
          "type": "string",
          "format": "int64",
          "title": "Affected rules count"
        },
        "revoked": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "apiUpdateCertificateResponse": {
      "type": "object",
      "properties": {
        "certificate": {
          "$ref": "#/definitions/apiCertificate",
          "title": "detailed"
        }
      }
    },
    "apiUpdateClassResponse": {
      "type": "object",
      "properties": {
        "class": {
          "$ref": "#/definitions/apiObjectClass",
          "title": "updated"
        }
      }
    },
    "apiUpdateCustomerResponse": {
      "type": "object",
      "properties": {
        "customer": {
          "$ref": "#/definitions/apiCustomer",
          "title": "detailed"
        }
      }
    },
    "apiUpdateDeviceResponse": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/apiDevice"
        }
      }
    },
    "apiUpdateDomainResponse": {
      "type": "object",
      "properties": {
        "domain": {
          "$ref": "#/definitions/apiOrganization"
        }
      }
    },
    "apiUpdatePasswordRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "old_password": {
          "type": "string",
          "title": "OLD"
        },
        "user_password": {
          "type": "string",
          "title": "NEW"
        },
        "confirm_password": {
          "type": "string",
          "title": "CONFIRM"
        },
        "username": {
          "type": "string",
          "title": "Username (when password expired)"
        },
        "domain": {
          "type": "string",
          "title": "Domain name required for user lookup when password expired"
        }
      }
    },
    "apiUpdatePasswordResponse": {
      "type": "object"
    },
    "apiUpdateRoleResponse": {
      "type": "object",
      "properties": {
        "updated": {
          "$ref": "#/definitions/apiRole"
        }
      }
    },
    "apiUpdateUserResponse": {
      "type": "object",
      "properties": {
        "updated": {
          "$ref": "#/definitions/apiUser"
        }
      }
    },
    "apiUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Object ID"
        },
        "name": {
          "type": "string",
          "title": "Caller-ID-Name: Display Name"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string",
          "title": "alphanumeric username (login)"
        },
        "password": {
          "type": "string"
        },
        "extension": {
          "type": "string",
          "title": "Caller-ID-Number:"
        },
        "presence": {
          "$ref": "#/definitions/apiUserPresence",
          "description": "string presence = 7; // unique set of \u003cuser\u003e presentity \u003cstatus:basic\u003e tuples open[ed]\n string status = 8; // short display status (short description)",
          "title": "CallerId caller = 5; // extension\nPresenceStatus presence = 8;"
        },
        "device": {
          "$ref": "#/definitions/apiObjectId",
          "title": "[optional] default device assigned ? WebRTC register ?"
        },
        "devices": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiObjectId"
          },
          "description": "[editable] list of unique `regular` devices, attached to this user",
          "title": "map\u003cint64, string\u003e devices = 13;"
        },
        "hotdesks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiObjectId"
          },
          "title": "[readonly] list of unique `hotdesk` devices, assigned to this user"
        },
        "profile": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "list of variables, assigned to this user as an environment unit"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiPermission"
          },
          "title": "set of operational permission grants"
        },
        "license": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLicenseUser"
          },
          "title": "list of unique licenses, granted to this user"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiObjectId"
          },
          "title": "roles, member of which is this user"
        },
        "totp_url": {
          "type": "string",
          "title": "[readonly][optional] one time password if setting (2fa) is enabled"
        },
        "contact": {
          "$ref": "#/definitions/apiObjectId",
          "description": "[optional] contact connected to this user",
          "title": "repeated Call calls = 13; // order by created_at\nrepeated Registration reged = 13; // order by register_last"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "created_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        },
        "deleted_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "deleted_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        },
        "chat_name": {
          "type": "string",
          "description": "The \"chat_name\" field is used to store the name displayed externally on the platform.\nFor example, \"chat_name\" is shown when an agent connects to chats with clients."
        },
        "force_password_change": {
          "type": "boolean",
          "description": "When set to true, the user will be required to change their password on next login."
        }
      },
      "description": "User profile."
    },
    "apiUserAccessToken": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "tokenKey::token_key"
        },
        "token": {
          "type": "string",
          "title": "tokenString::access_token"
        },
        "usage": {
          "type": "string",
          "title": "[optional] short usage description"
        },
        "user": {
          "$ref": "#/definitions/apiObjectId",
          "title": "[optional] output depends on API endpoint"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix::ms"
        },
        "created_by": {
          "$ref": "#/definitions/apiObjectId"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix::ms"
        },
        "updated_by": {
          "$ref": "#/definitions/apiObjectId"
        },
        "deleted_at": {
          "type": "string",
          "format": "int64",
          "title": "[optional] disabled at"
        },
        "deleted_by": {
          "$ref": "#/definitions/apiObjectId",
          "title": "[optional] disabled by"
        }
      },
      "description": "UserId lookup value."
    },
    "apiUserAccessTokenList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "string",
          "format": "int64"
        },
        "next": {
          "type": "boolean",
          "title": "is there more results ? next page is available ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiUserAccessToken"
          }
        }
      }
    },
    "apiUserId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Object ID"
        },
        "name": {
          "type": "string",
          "title": "Display Name"
        }
      },
      "description": "UserId lookup value."
    },
    "apiUserPresence": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "[required] user identity"
        },
        "status": {
          "type": "string",
          "title": "[optional] set of unique 'active' presentities {dnd,dlg,sip,wss}; assume {offline} if omitted"
        },
        "note": {
          "type": "string",
          "title": "[optional] human readable comment"
        },
        "expires": {
          "type": "integer",
          "format": "int32",
          "title": "[optional] \u003cnote\u003e will be cleaned up after seconds"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "[required] last activity time"
        }
      }
    },
    "apiUserSetting": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {}
      }
    },
    "apiUserWarning": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique identifier for the warning (e.g., \"app.password.expires_soon\")"
        },
        "detail": {
          "type": "string"
        },
        "warning_data": {
          "$ref": "#/definitions/apiWarningData"
        }
      }
    },
    "apiUserinfo": {
      "type": "object",
      "properties": {
        "dc": {
          "type": "string",
          "format": "int64",
          "title": "current domain component id"
        },
        "domain": {
          "type": "string",
          "title": "session domain.name"
        },
        "user_id": {
          "type": "string",
          "format": "int64",
          "title": "current user.id"
        },
        "name": {
          "type": "string",
          "title": "current user.id"
        },
        "username": {
          "type": "string",
          "title": "session end-user login"
        },
        "preferred_username": {
          "type": "string"
        },
        "extension": {
          "type": "string"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiObjclass"
          },
          "title": "map[class]dac"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiObjectId"
          },
          "title": "map[role]oid"
        },
        "license": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLicenseUser"
          },
          "title": "map[key]details"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiPermission"
          }
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "user last updated"
        },
        "expires_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        }
      },
      "title": "https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims"
    },
    "apiValidity": {
      "type": "object",
      "properties": {
        "not_before": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "not_after": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        }
      }
    },
    "apiVerification": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "invalid"
        },
        "notify": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "non-fatal warnings, e.g.:"
        }
      }
    },
    "apiWarningData": {
      "type": "object",
      "properties": {
        "password_expiry": {
          "$ref": "#/definitions/apiPasswordExpiryWarning"
        }
      }
    },
    "contactsAccessMode": {
      "type": "string",
      "enum": [
        "READ",
        "WRITE",
        "DELETE"
      ],
      "default": "READ",
      "title": "- READ: Can `fetch` record. [GET]\n - WRITE: Can `update` record. [PUT|PATCH]\n - DELETE: Can `delete` record. [DELETE]"
    },
    "contactsAddContactsToGroupRequest": {
      "type": "object",
      "properties": {
        "group_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "description": "The unique ID of the group."
        },
        "contact_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "description": "List of contact IDs to add to the group."
        }
      },
      "description": "Request message for adding contacts to a group."
    },
    "contactsCallEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "closed_at": {
          "type": "string",
          "format": "int64"
        },
        "duration": {
          "type": "string",
          "format": "int64"
        },
        "is_inbound": {
          "type": "boolean"
        },
        "is_missed": {
          "type": "boolean"
        },
        "participants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcontactsLookup"
          }
        },
        "gateway": {
          "$ref": "#/definitions/webitelcontactsLookup"
        },
        "flow_scheme": {
          "$ref": "#/definitions/webitelcontactsLookup"
        },
        "queue": {
          "$ref": "#/definitions/webitelcontactsLookup"
        },
        "is_detailed": {
          "type": "boolean"
        },
        "files": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsCallFile"
          }
        },
        "transcripts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsTranscriptLookup"
          }
        },
        "total_duration": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "contactsCallFile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "format": "int64"
        },
        "mime_type": {
          "type": "string"
        },
        "start_at": {
          "type": "string",
          "format": "int64"
        },
        "stop_at": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "contactsChatEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "closed_at": {
          "type": "string",
          "format": "int64"
        },
        "duration": {
          "type": "string",
          "format": "int64"
        },
        "is_inbound": {
          "type": "boolean"
        },
        "is_missed": {
          "type": "boolean"
        },
        "participants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcontactsLookup"
          }
        },
        "gateway": {
          "$ref": "#/definitions/webitelcontactsLookup"
        },
        "flow_scheme": {
          "$ref": "#/definitions/webitelcontactsLookup"
        },
        "queue": {
          "$ref": "#/definitions/webitelcontactsLookup"
        },
        "is_detailed": {
          "type": "boolean"
        }
      }
    },
    "contactsComment": {
      "type": "object",
      "example": {
        "id": "354",
        "etag": "FqaTCDLbhpaoUreL",
        "created_at": "1680268507698",
        "created_by": {
          "id": "34",
          "name": "John Doe"
        },
        "updated_at": "1680268507698",
        "updated_by": {
          "id": "34",
          "name": "John Doe"
        },
        "text": "This is a new note about the contact's recent activity. So ..."
      },
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the Comment. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "text": {
          "type": "string",
          "description": "Rich Text, multi-line[d] string value."
        },
        "format": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CommentFormat"
          },
          "description": "Styles of the text components."
        }
      },
      "title": "The Contact's internal Comment.\nOutput purpose only"
    },
    "contactsCommentList": {
      "type": "object",
      "example": {
        "data": [
          {
            "id": "354",
            "etag": "FqaTCDLbhpaoUreL",
            "created_at": "1680268507698",
            "created_by": {
              "id": "34",
              "name": "John Doe"
            },
            "updated_at": "1680516785357",
            "updated_by": {
              "id": "34",
              "name": "John Doe"
            },
            "text": "This is a new note about the contact's recent activity. So ..."
          },
          {
            "id": "357",
            "ver": "4",
            "etag": "FZiTxVgr41VPFxyu",
            "created_at": "1680268537698",
            "created_by": {
              "id": "56",
              "name": "Bruce Wayne"
            },
            "updated_at": "1680268563357",
            "updated_by": {
              "name": "Jane Lee (deleted)"
            },
            "text": "This contact may become a customer in a few days"
          }
        ],
        "page": 1,
        "next": true
      },
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsComment"
          },
          "description": "Comment dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "Comment dataset."
    },
    "contactsCondition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "The unique ID of the condition."
        },
        "expression": {
          "type": "string",
          "description": "The query or condition expression used to evaluate the group."
        },
        "group": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The ID of the static group that should be assigned if the condition is met."
        },
        "assignee": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The ID of the assignee that should be assigned if the condition is met (optional)."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who created this condition."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed the last update."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The timestamp (in milliseconds) of when the condition was created."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "The timestamp (in milliseconds) of the last update."
        }
      },
      "title": "Condition"
    },
    "contactsConditionList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "description": "Have more records."
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsCondition"
          },
          "description": "List of conditions."
        }
      },
      "description": "A list of Conditions."
    },
    "contactsContactGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "group": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Group of contacts associated."
        }
      },
      "description": "The Contact's Group association."
    },
    "contactsContactGroupList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsContactGroup"
          },
          "description": "Group dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "Contact groups dataset.\nNOTE: Edge represents connection between two nodes.\nSo this ContactGroupList.data are always subordinate to some contact.id."
    },
    "contactsContactList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcontactsContact"
          },
          "description": "Contact(s) dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "Contact dataset."
    },
    "contactsCreateDynamicGroupRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the dynamic group."
        },
        "description": {
          "type": "string",
          "description": "The description of the dynamic group."
        },
        "default_group": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Default static group to assign if no conditions are met."
        },
        "enabled": {
          "type": "boolean",
          "description": "Enabled status of the dynamic group: active/inactive."
        },
        "condition": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputDynamicCondition"
          },
          "description": "Input details for the dynamic group."
        }
      },
      "description": "Request message for creating a new dynamic group.",
      "required": [
        "name"
      ]
    },
    "contactsCreateGroupRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the group."
        },
        "description": {
          "type": "string",
          "description": "The description of the group."
        },
        "enabled": {
          "type": "boolean",
          "description": "The enabled status of the group."
        }
      },
      "description": "Request message for creating a new group.",
      "required": [
        "name"
      ]
    },
    "contactsDayTimeline": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsEvent"
          }
        },
        "day_timestamp": {
          "type": "string",
          "format": "int64"
        },
        "chats_count": {
          "type": "string",
          "format": "int64"
        },
        "calls_count": {
          "type": "string",
          "format": "int64"
        },
        "emails_count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "contactsDynamicCondition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "The unique ID of the condition."
        },
        "expression": {
          "type": "string",
          "description": "The query or condition expression used to evaluate the group."
        },
        "group": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The ID of the static group that should be assigned if the condition is met."
        },
        "assignee": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The ID of the assignee that should be assigned if the condition is met (optional)."
        }
      },
      "title": "Dynamic Group condition"
    },
    "contactsDynamicGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "The unique ID of the dynamic group. Never changes."
        },
        "name": {
          "type": "string",
          "description": "The name of the dynamic group."
        },
        "description": {
          "type": "string",
          "description": "The description of the dynamic group."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the group's creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last group update."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who created this dynamic group."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed the last update."
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsDynamicCondition"
          },
          "description": "List of dynamic conditions associated with the group."
        },
        "default_group": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Default static group to be assigned if no conditions are met."
        },
        "enabled": {
          "type": "boolean",
          "description": "Enabled status of the group: active or inactive."
        }
      },
      "title": "Dynamic Group"
    },
    "contactsDynamicGroupInput": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the dynamic group."
        },
        "description": {
          "type": "string",
          "description": "The description of the dynamic group."
        },
        "default_group": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Default static group to assign if no conditions are met."
        },
        "enabled": {
          "type": "boolean",
          "description": "Enabled status of the dynamic group: active/inactive."
        }
      },
      "description": "Input message for creating/updating a dynamic group."
    },
    "contactsDynamicGroupList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "description": "Have more records."
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsDynamicGroup"
          },
          "description": "List of dynamic groups."
        }
      },
      "description": "A list of Dynamic Groups."
    },
    "contactsEmailAddress": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates whether this phone number is default within other channels of the same type(phone)."
        },
        "verified": {
          "type": "boolean",
          "title": "Indicate whether Contact, as a Person, realy owns this associated phone number.\nIn other words: whether Contact is reachable thru this 'email' communication channel ?"
        },
        "email": {
          "type": "string",
          "description": "The email address."
        },
        "type": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "title": "The type of the email address.\nLookup value from CommunicationType dictionary.\nThe type can be custom or one of these predefined values:\n- home\n- work\n- other"
        }
      },
      "description": "The Contact's email address."
    },
    "contactsEmailEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "from": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "array of senders (email addresses)"
        },
        "to": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "array of receivers (email addresses)"
        },
        "sender": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "array of receivers (email addresses)"
        },
        "cc": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "array of ccs (email addresses)"
        },
        "is_inbound": {
          "type": "boolean",
          "title": "inbound/outbound email"
        },
        "subject": {
          "type": "string"
        },
        "body": {
          "type": "string",
          "title": "plain text of email"
        },
        "html": {
          "type": "string",
          "title": "html body of email"
        },
        "owner": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "title": "Agent who sent/accepted"
        },
        "attachments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcontactsAttachment"
          }
        },
        "profile": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "title": "email profile"
        },
        "is_detailed": {
          "type": "boolean",
          "title": "reserved for the open"
        }
      }
    },
    "contactsEmailList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsEmailAddress"
          },
          "description": "EmailAddress dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "Email dataset."
    },
    "contactsEmptyResponse": {
      "type": "object"
    },
    "contactsEvent": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/contactsTimelineEventType"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "chat": {
          "$ref": "#/definitions/contactsChatEvent"
        },
        "call": {
          "$ref": "#/definitions/contactsCallEvent"
        },
        "email": {
          "$ref": "#/definitions/contactsEmailEvent"
        }
      }
    },
    "contactsGetTimelineCounterResponse": {
      "type": "object",
      "properties": {
        "date_from": {
          "type": "string",
          "format": "int64",
          "title": "filter dates"
        },
        "date_to": {
          "type": "string",
          "format": "int64"
        },
        "chats_count": {
          "type": "string",
          "format": "int64",
          "title": "defined event types"
        },
        "calls_count": {
          "type": "string",
          "format": "int64"
        },
        "emails_count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "contactsGetTimelineResponse": {
      "type": "object",
      "properties": {
        "days": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsDayTimeline"
          }
        },
        "page": {
          "type": "string",
          "format": "int64"
        },
        "next": {
          "type": "boolean"
        }
      }
    },
    "contactsGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the group. Never changes."
        },
        "name": {
          "type": "string",
          "description": "The name of the group."
        },
        "description": {
          "type": "string",
          "description": "The description of the group."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the group's creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last group update."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who created this group."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed the last update."
        },
        "enabled": {
          "type": "boolean"
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsDynamicCondition"
          },
          "description": "List of dynamic conditions associated with the group."
        },
        "default_group": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Default static group to be assigned if no conditions are met."
        },
        "type": {
          "$ref": "#/definitions/contactsGroupType"
        },
        "contacts_size": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "Group of Contacts"
    },
    "contactsGroupList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "description": "Have more records."
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsGroup"
          },
          "description": "List of groups."
        }
      },
      "description": "A list of Groups."
    },
    "contactsGroupType": {
      "type": "string",
      "enum": [
        "GROUP_TYPE_UNSPECIFIED",
        "STATIC",
        "DYNAMIC"
      ],
      "default": "GROUP_TYPE_UNSPECIFIED",
      "description": "- GROUP_TYPE_UNSPECIFIED: Default value\n - STATIC: Static group\n - DYNAMIC: Dynamic group",
      "title": "Enum for Group Type"
    },
    "contactsIMClient": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "user": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "example": {
            "id": "596417343",
            "type": "telegram",
            "name": "John Doe"
          },
          "description": "External user which contacted to us.\nId will be from external service.\nName will be from external service."
        },
        "app": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "App (Text-Gateway) used to connect the IM client.\nId will be internal id of gateway.\nName will be name of the gateway."
        },
        "protocol": {
          "type": "string",
          "description": "Protocol used to connect the IM client."
        },
        "via": {
          "type": "string",
          "description": "[Via] App(-specific) peer(-id) to connect[from] the IM client."
        },
        "external_id": {
          "type": "string",
          "description": "External user id."
        }
      },
      "description": "A contact's [I]nstant[M]essaging client."
    },
    "contactsIMClientList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsIMClient"
          },
          "description": "IMClient dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      }
    },
    "contactsImageSize": {
      "type": "object",
      "properties": {
        "width": {
          "type": "integer",
          "format": "int32",
          "title": "Image width"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "title": "Image height"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "Size in bytes"
        }
      }
    },
    "contactsInputComment": {
      "type": "object",
      "example": {
        "text": "This is a new note about the contact's recent activity. So ..."
      },
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resorce."
        },
        "text": {
          "type": "string",
          "description": "NEW Text of the comment."
        },
        "format": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CommentFormat"
          },
          "description": "NEW Text components styling format."
        }
      },
      "required": [
        "text"
      ]
    },
    "contactsInputCondition": {
      "type": "object",
      "properties": {
        "expression": {
          "type": "string",
          "description": "The query or condition expression used to evaluate the group."
        },
        "group": {
          "type": "string",
          "format": "int64",
          "description": "The ID of the static group that should be assigned if the condition is met."
        },
        "assignee": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The ID of the assignee that should be assigned if the condition is met (optional)."
        },
        "position": {
          "$ref": "#/definitions/contactsPosition",
          "description": "The position of the condition in the group."
        }
      },
      "description": "Input message for creating/updating a condition."
    },
    "contactsInputContact": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resorce."
        },
        "name": {
          "$ref": "#/definitions/contactsInputName",
          "title": "The Contact's name. Singleton"
        },
        "about": {
          "type": "string",
          "description": "BIO. Short description about the Contact person.\nOPTIONAL. Multi-lined text."
        },
        "photos": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputPhoto"
          },
          "description": "Output only. The Contact's photo(s).",
          "readOnly": true
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputLabel"
          },
          "description": "The Contact's associated label(s)."
        },
        "emails": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputEmailAddress"
          },
          "description": "The Contact's email address(es)."
        },
        "phones": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputPhoneNumber"
          },
          "description": "The Contact's phone numbers."
        },
        "managers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputManager"
          },
          "description": "The Contact's internal manager(s)."
        },
        "comments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputComment"
          },
          "description": "Publish NEW comment(s) for this Contact."
        },
        "languages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputLanguage"
          },
          "description": "A Contact's locale preference(s)."
        },
        "timezones": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputTimezone"
          },
          "description": "The Contact's timezone preference(s)."
        },
        "imclients": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputIMClient"
          },
          "description": "The contact's [I]nstant[M]essaging clients."
        },
        "variables": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputVariable"
          },
          "description": "Arbitrary client data that is populated by clients."
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputContactGroup"
          },
          "description": "The Contact's associated group(s)."
        }
      },
      "description": "The Contact principal input."
    },
    "contactsInputContactGroup": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resource."
        },
        "group": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Group of contacts associated."
        }
      },
      "description": "An input of the Contact's groups.",
      "required": [
        "etag"
      ]
    },
    "contactsInputDynamicCondition": {
      "type": "object",
      "properties": {
        "expression": {
          "type": "string",
          "description": "The query or condition expression used to evaluate the group."
        },
        "group": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The ID of the static group that should be assigned if the condition is met."
        },
        "assignee": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The ID of the assignee that should be assigned if the condition is met (optional)."
        }
      },
      "title": "Dynamic Group condition"
    },
    "contactsInputEmailAddress": {
      "type": "object",
      "example": {
        "etag": "1679792219687",
        "verified": false,
        "primary": true,
        "email": "user@domain",
        "type": {
          "name": "personal"
        }
      },
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resorce."
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates whether this phone number is default within other channels of the same type(phone)."
        },
        "verified": {
          "type": "boolean",
          "title": "Indicate whether Contact, as a Person, realy owns this associated phone number.\nIn other words: whether Contact is reachable thru this 'email' communication channel ?"
        },
        "email": {
          "type": "string",
          "description": "The email address."
        },
        "type": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "title": "The type of the email address.\nLookup value from CommunicationType dictionary.\nThe type can be custom or one of these predefined values:\n- home\n- work\n- other"
        }
      },
      "description": "Input of the Contact's email address.",
      "required": [
        "email"
      ]
    },
    "contactsInputGroup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The new name of the group."
        },
        "description": {
          "type": "string",
          "description": "The new description of the group."
        },
        "enabled": {
          "type": "boolean",
          "description": "The new enabled status of the group."
        }
      },
      "title": "Input message for creating/updating a group"
    },
    "contactsInputIMClient": {
      "type": "object",
      "properties": {
        "protocol": {
          "type": "string"
        },
        "created_by": {
          "type": "string",
          "description": "Id of Agent created this IM client."
        },
        "external_user": {
          "type": "string",
          "title": "External user id"
        },
        "gateway_id": {
          "type": "string",
          "description": "App (Text-Gateway) used to connect the IM client."
        },
        "via": {
          "type": "string",
          "description": "[Via] App(-specific) peer(-id) to connect[from] the IM client."
        }
      },
      "description": "Input of the contact IM client."
    },
    "contactsInputLabel": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resorce."
        },
        "label": {
          "type": "string",
          "description": "REQUIRED. Hashtag value;\nNOTE: Keep in mind, hashtags are not case-sensitive,\nbut adding capital letters does make them easier to read:\n#MakeAWish vs. #makeawish."
        }
      },
      "description": "A Contact's associated Tag.\nOutput purpose only.",
      "required": [
        "tag"
      ]
    },
    "contactsInputLanguage": {
      "type": "object",
      "example": {
        "primary": false,
        "tag": "uk"
      },
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing association."
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates whether this association must be default\namong others of the same type."
        },
        "tag": {
          "type": "string",
          "title": "NEW, well-formed IETF BCP 47 language tag representing the locale.\nhttps://www.rfc-editor.org/info/bcp47"
        }
      },
      "description": "An input of the Contact's language.",
      "required": [
        "etag"
      ]
    },
    "contactsInputManager": {
      "type": "object",
      "example": {
        "primary": true,
        "user": {
          "id": "357",
          "name": "Bruce Wayne"
        }
      },
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resource."
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates whether this association must be default among others."
        },
        "user": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Responsible User."
        }
      },
      "required": [
        "etag"
      ]
    },
    "contactsInputName": {
      "type": "object",
      "properties": {
        "verified": {
          "type": "boolean",
          "description": "Indicate whether Contact, as a Person, realy owns this associated name."
        },
        "given_name": {
          "type": "string",
          "title": "OPTIONAL. Given name(s) or first name(s) of the End-User.\nNote that in some cultures, people can have multiple given names;\nall can be present, with the names being separated by space characters.\nhttps://openid.net/specs/openid-connect-core-1_0.html#StandardClaims #given_name"
        },
        "middle_name": {
          "type": "string",
          "description": "OPTIONAL. Middle name(s) of the End-User.\nNote that in some cultures, people can have multiple middle names;\nall can be present, with the names being separated by space characters.\nAlso note that in some cultures, middle names are not used."
        },
        "family_name": {
          "type": "string",
          "title": "OPTIONAL. Surname(s) or last name(s) of the End-User.\nNote that in some cultures, people can have multiple family names or no family name;\nall can be present, with the names being separated by space characters.\nhttps://openid.net/specs/openid-connect-core-1_0.html#StandardClaims #family_name"
        },
        "common_name": {
          "type": "string",
          "description": "REQUIRED. End-User's full name in displayable form\nincluding all name parts, possibly including titles and suffixes,\nordered according to the End-User's locale and preferences."
        }
      }
    },
    "contactsInputPhoneNumber": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resorce."
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates whether this phone number is default within other channels of the same type(phone)."
        },
        "verified": {
          "type": "boolean",
          "title": "Indicate whether Contact, as a Person, realy owns this associated phone number.\nIn other words: whether Contact is reachable thru this 'phone' communication channel ?"
        },
        "number": {
          "type": "string",
          "description": "The phone number."
        },
        "type": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "title": "The type of the phone number.\nReference on CommunicationType dictionary.\nUsed for outbound routing while dialup a phone number.\nThe type can be custom or one of these predefined values:\n- home\n- work\n- mobile\n- homeFax\n- workFax\n- otherFax\n- pager\n- workMobile\n- workPager\n- main\n- googleVoice\n- other"
        }
      },
      "description": "Input of the contact phone number.",
      "required": [
        "number"
      ]
    },
    "contactsInputPhoto": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing association."
        },
        "primary": {
          "type": "boolean",
          "description": "True if the photo is a default photo; false if the photo is a user-provided photo."
        },
        "photo_id": {
          "type": "string",
          "format": "int64",
          "title": "File unique ID within 'storage' service"
        },
        "photo_url": {
          "type": "string",
          "title": "The URL of the photo.\nYou can change the desired size by appending\na query parameter sz={size} at the end of the url,\nwhere {size} is the size in pixels.\nExample: https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50"
        }
      },
      "description": "Input of the photo.",
      "required": [
        "file_url"
      ]
    },
    "contactsInputTimezone": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resource."
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates whether this association must be default among others."
        },
        "timezone": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timezone dictionary reference value associated."
        }
      },
      "description": "An input of the Contact's timezones.",
      "required": [
        "etag"
      ]
    },
    "contactsInputVariable": {
      "type": "object",
      "example": {
        "key": "var_rename",
        "value": [
          "string_item",
          [
            3,
            7
          ],
          false,
          null
        ]
      },
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resorce."
        },
        "key": {
          "type": "string",
          "description": "NEW Key.",
          "pattern": "^\\w+$"
        },
        "value": {
          "description": "NEW Value."
        }
      },
      "description": "Input of the Contact's variable.",
      "required": [
        "key"
      ]
    },
    "contactsLabelInfo": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "Label tag.\n\nCount of sources.\nint32 count = 2;\n Sources of Contacts assigned.\nrepeated string sources = 3;"
        }
      },
      "title": "LabelInfo about the Label's tag"
    },
    "contactsLabelList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcontactsLabel"
          },
          "description": "Label(s) dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page number of partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "LabelList dataset.\nNOTE: Edge represents connection between two nodes.\nSo this ContactLabels.data are always subordinate to some contact.id."
    },
    "contactsLabelTags": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsLabelInfo"
          },
          "title": "Labels info dataset"
        },
        "sources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcontactsLookup"
          },
          "title": "Contact sources dataset"
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page number of partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Next page available ?"
        }
      },
      "description": "LabelTags dataset list of label's info."
    },
    "contactsLanguage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates whether this association is the default\namong others of the same type."
        },
        "tag": {
          "type": "string",
          "title": "The well-formed IETF BCP 47 language tag representing the locale.\nhttps://www.rfc-editor.org/info/bcp47"
        },
        "code": {
          "type": "string",
          "title": "uk              ; golang.org/x/text/language.MustParse(s).Base()"
        },
        "lang": {
          "type": "string",
          "title": "Ukrainian       ; golang.org/x/text/language/display.English.Languages().Name(tag)"
        },
        "name": {
          "type": "string",
          "title": "українська      ; golang.org/x/text/language/display.Self().Name(tag)"
        },
        "region": {
          "type": "string",
          "title": "UA              ; golang.org/x/text/language.MustParse(s).Region()"
        },
        "script": {
          "type": "string",
          "title": "Cyrl; (Cyrillic); golang.org/x/text/language.MustParse(s).Script()"
        }
      },
      "description": "A Contact's locale preference.\nOutput purpose only."
    },
    "contactsLanguageList": {
      "type": "object",
      "example": {
        "data": [
          {
            "id": "7",
            "ver": "3",
            "etag": "FqaTCDLbhpaoUreL",
            "created_at": "1680268507698",
            "created_by": {
              "id": "34",
              "name": "John Doe"
            },
            "updated_at": "1680516785357",
            "updated_by": {
              "name": "Jane Lee (deleted)"
            },
            "primary": true,
            "tag": "uk-UA",
            "code": "uk",
            "lang": "Ukrainian",
            "name": "українська",
            "region": "UA",
            "script": "Cyrl"
          }
        ],
        "page": 1,
        "next": true
      },
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsLanguage"
          },
          "description": "Page of the Contact's Language(s) dataset."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page number of partial result dataset records."
        },
        "next": {
          "type": "boolean",
          "title": "Next indicate whether there are more result records(page+) available.\nIf set - next page is available with query ?size=$(data.length)\u0026page=$(page++)"
        }
      },
      "description": "LabelsData\nNOTE: Edge represents connection between two nodes.\nSo this ContactLabels.data are always subordinate to some contact.id."
    },
    "contactsLocateConditionResponse": {
      "type": "object",
      "properties": {
        "condition": {
          "$ref": "#/definitions/contactsCondition"
        }
      },
      "description": "Response message for locating a condition by ID."
    },
    "contactsLocateDynamicGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/contactsDynamicGroup"
        }
      },
      "description": "Response message for locating a dynamic group by ID."
    },
    "contactsLocateGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/contactsGroup",
          "description": "The located group."
        }
      },
      "description": "Response message for locating a group."
    },
    "contactsManager": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates whether this association is the default\namong others of the same type."
        },
        "user": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Responsible User."
        }
      },
      "description": "Manager. The Contact's responsible User."
    },
    "contactsManagerList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsManager"
          },
          "description": "Manager dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "Manager dataset."
    },
    "contactsMediaAttribute": {
      "type": "object",
      "properties": {
        "image": {
          "$ref": "#/definitions/MediaAttributeImage"
        },
        "audio": {
          "$ref": "#/definitions/MediaAttributeAudio"
        },
        "video": {
          "$ref": "#/definitions/MediaAttributeVideo"
        },
        "filename": {
          "type": "string"
        }
      }
    },
    "contactsMediaFile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "File unique ID"
        },
        "date": {
          "type": "string",
          "format": "int64",
          "title": "Creation date; timestamp(milli)"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "title": "Size in bytes"
        },
        "type": {
          "type": "string",
          "title": "MIME type"
        },
        "data": {
          "type": "string",
          "format": "byte",
          "title": "Binary content"
        },
        "hash": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "md5, sha256, ..",
          "title": "Check sum, dependent on unique ID"
        },
        "meta": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsMediaAttribute"
          },
          "title": "File attributes metadata"
        },
        "thumb": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsImageSize"
          },
          "title": "Thumbnails"
        },
        "video_thumb": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsVideoSize"
          },
          "title": "Video Thumbnails"
        }
      }
    },
    "contactsName": {
      "type": "object",
      "properties": {
        "verified": {
          "type": "boolean",
          "description": "Indicate whether Contact, as a Person, realy owns this associated name."
        },
        "given_name": {
          "type": "string",
          "title": "OPTIONAL. Given name(s) or first name(s) of the End-User.\nNote that in some cultures, people can have multiple given names;\nall can be present, with the names being separated by space characters.\nhttps://openid.net/specs/openid-connect-core-1_0.html#StandardClaims #given_name"
        },
        "middle_name": {
          "type": "string",
          "description": "OPTIONAL. Middle name(s) of the End-User.\nNote that in some cultures, people can have multiple middle names;\nall can be present, with the names being separated by space characters.\nAlso note that in some cultures, middle names are not used."
        },
        "family_name": {
          "type": "string",
          "title": "OPTIONAL. Surname(s) or last name(s) of the End-User.\nNote that in some cultures, people can have multiple family names or no family name;\nall can be present, with the names being separated by space characters.\nhttps://openid.net/specs/openid-connect-core-1_0.html#StandardClaims #family_name"
        },
        "common_name": {
          "type": "string",
          "description": "REQUIRED. End-User's full name in displayable form\nincluding all name parts, possibly including titles and suffixes,\nordered according to the End-User's locale and preferences."
        }
      },
      "description": "A contact's name.\nIf the name is a mononym, the family name is empty.\n\nInspired:\nhttps://openid.net/specs/openid-connect-core-1_0.html#StandardClaims\nhttps://developers.google.com/people/api/rest/v1/people#name"
    },
    "contactsPhoneList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsPhoneNumber"
          },
          "description": "PhoneNumber dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "PhoneNumber dataset."
    },
    "contactsPhoneNumber": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates whether this phone number is default within other channels of the same type(phone)."
        },
        "verified": {
          "type": "boolean",
          "title": "Indicate whether Contact, as a Person, realy owns this associated phone number.\nIn other words: whether Contact is reachable thru this 'phone' communication channel ?"
        },
        "number": {
          "type": "string",
          "description": "The phone number."
        },
        "type": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "title": "The type of the phone number.\nReference on CommunicationType dictionary.\nUsed for outbound routing while dialup a phone number.\nThe type can be custom or one of these predefined values:\n- home\n- work\n- mobile\n- homeFax\n- workFax\n- otherFax\n- pager\n- workMobile\n- workPager\n- main\n- googleVoice\n- other"
        }
      },
      "description": "The Contact's phone number."
    },
    "contactsPhoto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "primary": {
          "type": "boolean",
          "description": "True if the photo is a default photo; false if the photo is a user-provided photo."
        },
        "photo_id": {
          "type": "string",
          "format": "int64",
          "title": "File unique ID within 'storage' service"
        },
        "photo_url": {
          "type": "string",
          "title": "The URL of the photo.\nYou can change the desired size by appending\na query parameter sz={size} at the end of the url,\nwhere {size} is the size in pixels.\nExample: https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50"
        }
      },
      "description": "A contact's photo.\nA picture shown next to the contact's name\nto help others recognize the contact."
    },
    "contactsPhotoList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsPhoto"
          },
          "description": "Photo dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "Photo dataset."
    },
    "contactsPosition": {
      "type": "object",
      "properties": {
        "cond_up": {
          "type": "string",
          "format": "int64",
          "title": "The current position of the condition in the list.\nif we set zero (0) index position -- set only cond_down -- cond_up should be ZERO"
        },
        "cond_down": {
          "type": "string",
          "format": "int64",
          "title": "The target position where the condition should be moved.\nif we set last (n) index position -- set only cond_up -- cond_down should be ZERO"
        }
      },
      "description": "Position details for conditions in the group."
    },
    "contactsTimeRange": {
      "type": "object",
      "properties": {
        "since": {
          "type": "string",
          "format": "int64",
          "description": "Since timestamp(milli). Not before."
        },
        "until": {
          "type": "string",
          "format": "int64",
          "description": "Until timestamp(milli). Not after."
        }
      }
    },
    "contactsTimelineEventType": {
      "type": "string",
      "enum": [
        "chat",
        "call",
        "email"
      ],
      "default": "chat"
    },
    "contactsTimezone": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates whether this association is the default\namong others of the same type."
        },
        "timezone": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timezone dictionary reference value associated."
        }
      },
      "description": "A Contact's timezone preference."
    },
    "contactsTimezoneList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsTimezone"
          },
          "description": "Timezone dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "Timezone dataset.\nNOTE: Edge represents connection between two nodes.\nSo this ContactTimezones.data are always subordinate to some contact.id."
    },
    "contactsTranscriptLookup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "locale": {
          "type": "string"
        },
        "file": {
          "$ref": "#/definitions/webitelcontactsLookup"
        }
      }
    },
    "contactsUploadMediaResponse": {
      "type": "object",
      "properties": {
        "file": {
          "$ref": "#/definitions/contactsMediaFile",
          "title": "START|COMPLETE"
        },
        "data": {
          "$ref": "#/definitions/UploadMediaResponseProgress",
          "title": "PROGRESS"
        }
      }
    },
    "contactsVariable": {
      "type": "object",
      "example": {
        "id": "6",
        "ver": "2",
        "etag": "FqaTCDLbhpaoUreL",
        "created_at": "1680268507698",
        "created_by": {
          "id": "34",
          "name": "John Doe"
        },
        "updated_at": "1680516785357",
        "updated_by": {
          "name": "Ja Lee (deleted)"
        },
        "key": "var_complex",
        "value": {
          "inner_var": null,
          "value_arr": [
            "string",
            [
              null
            ],
            false,
            1
          ]
        }
      },
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "key": {
          "type": "string",
          "description": "Key name of the variable."
        },
        "value": {
          "description": "JSON value of the variable."
        }
      },
      "description": "The Contact's variable.\nArbitrary data that is populated by users or clients.\nDuplicate keys and values are allowed."
    },
    "contactsVariableList": {
      "type": "object",
      "example": {
        "data": [
          {
            "id": "4",
            "etag": "FqaTCDLbhpaoUreL",
            "created_at": "1680268507698",
            "created_by": {
              "id": "34",
              "name": "John Doe"
            },
            "updated_at": "1680268507698",
            "updated_by": {
              "id": "34",
              "name": "John Doe"
            },
            "key": "my_string",
            "value": "string_value"
          },
          {
            "id": "6",
            "ver": "2",
            "etag": "ogTsuZAIA1CcEZGC",
            "created_at": "1680268507698",
            "created_by": {
              "id": "34",
              "name": "John Doe"
            },
            "updated_at": "1680516785357",
            "updated_by": {
              "name": "Ja Lee (deleted)"
            },
            "key": "var_complex",
            "value": {
              "inner_var": null,
              "value_arr": [
                "string",
                [
                  null
                ],
                false,
                1
              ]
            }
          }
        ],
        "page": 1,
        "next": true
      },
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsVariable"
          },
          "description": "Variable dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "Variable dataset."
    },
    "contactsVideoSize": {
      "type": "object",
      "properties": {
        "width": {
          "type": "integer",
          "format": "int64",
          "title": "Video width"
        },
        "height": {
          "type": "integer",
          "format": "int64",
          "title": "Video height"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "title": "File size in bytes"
        },
        "start_ts": {
          "type": "integer",
          "format": "int64",
          "title": "Timestamp that should be shown as static preview to the user (seconds)"
        }
      },
      "title": "Animated profile picture in MPEG4 format"
    },
    "dataDataset": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/protodataStruct",
          "description": "Type of the dataset record."
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "description": "List of the dataset page records."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Current page number."
        },
        "next": {
          "type": "boolean",
          "title": "Next page available?"
        }
      },
      "description": "Dataset records page view."
    },
    "dataField": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Field [code] name.\n\ncode"
        },
        "name": {
          "type": "string",
          "description": "Title of the field. Lang specific.\n\ntitle"
        },
        "hint": {
          "type": "string",
          "description": "Short description. Default: {name}."
        },
        "kind": {
          "$ref": "#/definitions/typeKind",
          "description": "Required. The field type."
        },
        "bool": {
          "$ref": "#/definitions/typeBool"
        },
        "int32": {
          "$ref": "#/definitions/typeInt"
        },
        "int64": {
          "$ref": "#/definitions/typeInt"
        },
        "int": {
          "$ref": "#/definitions/typeInt"
        },
        "uint32": {
          "$ref": "#/definitions/typeUint"
        },
        "uint64": {
          "$ref": "#/definitions/typeUint"
        },
        "uint": {
          "$ref": "#/definitions/typeUint"
        },
        "float32": {
          "$ref": "#/definitions/typeFloat"
        },
        "float64": {
          "$ref": "#/definitions/typeFloat"
        },
        "float": {
          "$ref": "#/definitions/typeFloat"
        },
        "binary": {
          "$ref": "#/definitions/typeBinary"
        },
        "lookup": {
          "$ref": "#/definitions/datatypeLookup"
        },
        "string": {
          "$ref": "#/definitions/typeText"
        },
        "richtext": {
          "$ref": "#/definitions/typeText"
        },
        "datetime": {
          "$ref": "#/definitions/typeDatetime"
        },
        "duration": {
          "$ref": "#/definitions/typeDuration"
        },
        "default": {
          "description": "The `default` expression will be used in `INSERT` operation\nthat does not specify a value for the field.\n\nIf there is no default for a field, then the default is null.",
          "title": "[ ON INSERT ONLY ]"
        },
        "always": {
          "description": "Always signifies that the field value will be computed on any write (INSERT OR UPDATE) operations.\nThe field cannot be written to, and when read the result of the last generated expression will be returned.\n\nThe generation expression can refer to other columns in the table, but not other generated columns. Any functions and operators used must be immutable. References to other tables are not allowed.",
          "title": "[ ON INSERT OR UPDATE ]"
        },
        "readonly": {
          "type": "boolean",
          "description": "Optional. Disable any write (INSERT OR UPDATE) operations.\nREADONLY signifies that the field value will be always computed on any write (INSERT OR UPDATE) operations.\nIf selected, the `default` value MUST be specified.\n\nFIXME: Is base field ? [ id, created_, updated_ ]"
        },
        "required": {
          "type": "boolean",
          "title": "Optional. Do NOT allow NULL values !"
        },
        "disabled": {
          "type": "boolean",
          "title": "Optional. Disable data read operation. (selection)"
        },
        "hidden": {
          "type": "boolean",
          "title": "Is hidden (system) field ?\nDo NOT display on the `view` card ?"
        }
      },
      "description": "Field of the struct."
    },
    "dataIndex": {
      "type": "object",
      "properties": {
        "unique": {
          "type": "boolean",
          "description": "Indicates whether set of [fields] MUST be UNIQUE within [type]."
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A set of [struct.fields.id] to INDEX within [type] dataset."
        },
        "include": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A set of [struct.fields.id] to INCLUDE beside the [fields] index."
        }
      },
      "description": "INDEX [struct.fields]."
    },
    "dataInputDictionary": {
      "type": "object",
      "example": {
        "repo": "countries",
        "name": "Countries",
        "about": "Dataset of countries we are working with ..",
        "fields": [
          {
            "id": "code",
            "name": "Code",
            "hint": "+3(80)",
            "kind": "int32",
            "int32": {
              "min": "10",
              "max": "9999"
            },
            "required": true
          },
          {
            "id": "name",
            "name": "Country",
            "hint": "Country name",
            "kind": "string",
            "string": {
              "max": 64
            },
            "required": true
          },
          {
            "id": "capital",
            "name": "Capital city",
            "kind": "lookup",
            "lookup": {
              "id": "name",
              "name": "name",
              "type": "dictionaries/cities"
            }
          },
          {
            "id": "created_at",
            "name": "Creation Date",
            "kind": "datetime",
            "datetime": {
              "part": "full",
              "time": "s"
            },
            "default": "$(timestamp)",
            "readonly": true
          },
          {
            "id": "created_by",
            "name": "Author",
            "kind": "lookup",
            "lookup": {
              "id": "id",
              "name": "name",
              "type": "users"
            },
            "default": "$(user)",
            "readonly": true
          },
          {
            "id": "updated_at",
            "name": "Last Modified",
            "kind": "datetime",
            "datetime": {
              "part": "full",
              "time": "s"
            },
            "always": "$(timestamp)",
            "readonly": true
          },
          {
            "id": "updated_by",
            "name": "Editor",
            "kind": "lookup",
            "lookup": {
              "type": "users"
            },
            "always": "$(user)",
            "readonly": true
          }
        ],
        "primary": "code",
        "display": "name",
        "indexes": {
          "code": {
            "unique": true
          },
          "capital_city": {
            "unique": true,
            "fields": [
              "capital"
            ]
          }
        }
      },
      "properties": {
        "repo": {
          "type": "string",
          "description": "string id = 1; // The [type] name (singular form), e.g.: `country`.\n\nRepository (dataset) name (plural form), e.g.: `countries`."
        },
        "name": {
          "type": "string",
          "description": "A User-friendly [type.id] name ; lang: specific."
        },
        "about": {
          "type": "string",
          "title": "Short description"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/dataField"
          },
          "title": "Fields definitions"
        },
        "primary": {
          "type": "string",
          "description": "Required. Primary [fields.id] key.\nUsed as [lookup].id setting for this [struct] type."
        },
        "display": {
          "type": "string",
          "description": "Required. Display [fields.id] key.\nUsed as [lookup].name setting for this [struct] type."
        },
        "indexes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/dataIndex"
          },
          "description": "INDEX fields."
        },
        "administered": {
          "type": "boolean",
          "title": "Administer access control ? Enable RbAC ?"
        }
      }
    },
    "dataInputExtension": {
      "type": "object",
      "example": {
        "fields": [
          {
            "id": "country",
            "name": "Country",
            "kind": "lookup",
            "lookup": {
              "id": "code",
              "name": "name",
              "type": "/dictionaries/countries"
            },
            "required": true
          },
          {
            "id": "city",
            "name": "City",
            "kind": "lookup",
            "lookup": {
              "id": "id",
              "name": "name",
              "type": "/dictionaries/cities?code={country.code}"
            }
          }
        ],
        "indexes": {
          "country": {},
          "city": {}
        }
      },
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/dataField"
          },
          "title": "Fields definitions"
        },
        "indices": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/dataIndex"
          },
          "title": "INDEX Fields"
        }
      }
    },
    "dataLookupValue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Required. Unique Identifier."
        },
        "name": {
          "type": "string",
          "description": "Readonly. Display name."
        },
        "type": {
          "type": "string",
          "description": "Optional. Reference type."
        }
      }
    },
    "dataStructList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protodataStruct"
          },
          "description": "List of `Struct` types."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page number of results."
        },
        "next": {
          "type": "boolean",
          "title": "Next page available ?"
        }
      },
      "description": "Dataset of structured types."
    },
    "datatypeLookup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "[Readonly]. Dataset title."
        },
        "path": {
          "type": "string",
          "description": "[Required]. Reference dataset relative path\ne.g.: \"contacts\", \"dictionaries/cities\".\n(lookup).{`type`} value relation."
        },
        "primary": {
          "type": "string",
          "description": "[Readonly]. Primary dataset field.\n(lookup).{`id`} value relation."
        },
        "display": {
          "type": "string",
          "description": "[Readonly]. Display dataset field.\n(lookup).{`name`} value relation."
        },
        "query": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. Query dataset filters ...\nmap \u003c filter, template \u003e"
        },
        "violation": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "[ \"not_found\", \"too_much_records\" ]"
        }
      },
      "description": "Lookup ( REFERENCE ) type descriptor.\nSimplified [webitel.custom.Struct] options."
    },
    "knowledgebaseArticle": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "READONLY. Operational attributes\nVersion of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelknowledgebaseLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelknowledgebaseLookup",
          "description": "The user who performed last Update."
        },
        "space_id": {
          "type": "string",
          "format": "int64",
          "description": "Space ID associated with."
        },
        "state": {
          "type": "boolean",
          "description": "Indicates the state of the article."
        },
        "text": {
          "type": "string",
          "description": "The text content of the article."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tags associated with the article."
        },
        "title": {
          "type": "string",
          "description": "The title of the article."
        },
        "parent_article": {
          "type": "string",
          "format": "int64",
          "description": "The parent article ID."
        },
        "has_children": {
          "type": "boolean",
          "description": "Indicates that the article has children."
        },
        "pinned": {
          "type": "boolean",
          "description": "Indicates that the article is pinned on the top of list."
        }
      }
    },
    "knowledgebaseArticleList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/knowledgebaseArticle"
          },
          "description": "Article dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "Article dataset.\nNOTE: Edge represents connection between two nodes.\nSo this spaceArticles.data are always subordinate to some space.id."
    },
    "knowledgebaseArticleVersion": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "title": {
          "type": "string",
          "description": "The title of the article."
        },
        "text": {
          "type": "string",
          "description": "The text content of the article."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelknowledgebaseLookup",
          "description": "The user who loaded this attachment."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update."
        },
        "parent_article": {
          "type": "string",
          "format": "int64",
          "description": "The parent article ID."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tags associated with the article."
        },
        "space_id": {
          "type": "string",
          "format": "int64",
          "description": "Space ID associated with."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        }
      }
    },
    "knowledgebaseArticleVersionList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/knowledgebaseArticleVersion"
          }
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      }
    },
    "knowledgebaseAttachmentList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelknowledgebaseAttachment"
          },
          "description": "Attachment dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      }
    },
    "knowledgebaseCombined": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id of the record (article or space)"
        },
        "name": {
          "type": "string",
          "title": "Display name of the record (article or space)"
        },
        "type": {
          "type": "string",
          "title": "Type of the record: article/space"
        }
      }
    },
    "knowledgebaseCombinedList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/knowledgebaseCombined"
          }
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      }
    },
    "knowledgebaseInputArticle": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resource."
        },
        "space_id": {
          "type": "string",
          "format": "int64",
          "description": "[VALUE]: --------------------------------------\nSpace ID associated with."
        },
        "state": {
          "type": "boolean",
          "description": "Indicates if article is active and actual."
        },
        "text": {
          "type": "string",
          "description": "The text content of the article."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tags associated with the article."
        },
        "title": {
          "type": "string",
          "description": "The title of the article."
        },
        "parent_article": {
          "type": "string",
          "format": "int64",
          "description": "The parent article ID."
        },
        "pinned": {
          "type": "boolean",
          "description": "Indicates that the article is pinned on the top of list."
        }
      },
      "description": "An input of the Space's Articles.",
      "required": [
        "etag"
      ]
    },
    "knowledgebaseInputSpace": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resorce."
        },
        "name": {
          "type": "string",
          "description": "Represents the name of the knowledge base space."
        },
        "home_page": {
          "type": "string",
          "description": "BIO. Short description about the space.\nOPTIONAL. Multi-lined text."
        },
        "state": {
          "type": "boolean",
          "description": "The state of the space."
        }
      },
      "description": "The Space principal input."
    },
    "knowledgebaseSpace": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "READONLY. Operational attributes\nVersion of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "mode": {
          "type": "string",
          "description": "[R]ecord[b]ased[A]ccess[C]ontrol mode granted."
        },
        "domain": {
          "$ref": "#/definitions/webitelknowledgebaseLookup",
          "description": "READONLY. The space's metadata."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The timestamp when the space was created (in Unix time)."
        },
        "created_by": {
          "$ref": "#/definitions/webitelknowledgebaseLookup",
          "description": "The user who created the space."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "The timestamp when the space was last updated (in Unix time)."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelknowledgebaseLookup",
          "description": "The user who last updated the space."
        },
        "name": {
          "type": "string",
          "description": "The name of the space."
        },
        "home_page": {
          "type": "string",
          "description": "BIO. Short description about the space."
        },
        "state": {
          "type": "boolean",
          "description": "The state of the space."
        },
        "has_children": {
          "type": "boolean",
          "description": "Indicates if the space has children."
        }
      }
    },
    "knowledgebaseSpaceList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/knowledgebaseSpace"
          },
          "description": "Space(s) dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      }
    },
    "knowledgebaseTagsList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelknowledgebaseTag"
          }
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "next": {
          "type": "boolean"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "protodataStruct": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Deprecated. Use `repo` instead. The [type] name (singular form), e.g.: `country`."
        },
        "repo": {
          "type": "string",
          "description": "Repository (dataset) name (plural form), e.g.: `countries`."
        },
        "name": {
          "type": "string",
          "description": "A User-friendly [id] name ; lang: specific."
        },
        "path": {
          "type": "string",
          "description": "Readonly. Relative path to access the dataset APIs, e.g.: `dictionaries/countries`."
        },
        "about": {
          "type": "string",
          "description": "Optional. Short description."
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/dataField"
          },
          "description": "Fields of the struct type."
        },
        "primary": {
          "type": "string",
          "description": "Required. Primary [fields.id] key.\nUsed as [lookup].id setting for this [struct] type."
        },
        "display": {
          "type": "string",
          "description": "Required. Display [fields.id] key.\nUsed as [lookup].name setting for this [struct] type."
        },
        "indexes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/dataIndex"
          },
          "description": "INDEX fields.\n\nExtension extension = 15;"
        },
        "readonly": {
          "type": "boolean",
          "title": "Readonly. Is [ system / custom ] type ?\nNOTE: Custom [types.repo] are always prefixed with `/dictionaries`"
        },
        "extendable": {
          "type": "boolean",
          "description": "// Extension fields type.\n Extension extension = 23;",
          "title": "Readonly. System- type(s) support only !"
        },
        "administered": {
          "type": "boolean",
          "title": "Administer access control ? Enable RbAC ?"
        },
        "objclass": {
          "type": "string",
          "description": "Readonly. RbAC objclass identity."
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/dataLookupValue"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/dataLookupValue"
        }
      },
      "description": "Type of the Structure.\n\nint64 dc = 0;"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of\n[google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized\nby the client."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "typeBinary": {
      "type": "object",
      "properties": {
        "max_bytes": {
          "type": "integer",
          "format": "int64"
        },
        "violation": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "typeBool": {
      "type": "object",
      "title": "no constraints"
    },
    "typeDatetime": {
      "type": "object",
      "properties": {
        "zone": {
          "type": "string",
          "description": "Timezone associated.\nDefault: `UTC`."
        },
        "epoch": {
          "type": "number",
          "format": "double",
          "description": "Epoch timestamp.\nIf zero - UNIX epoch (1970-01-01 00:00:00) will be used."
        },
        "format": {
          "type": "string",
          "title": "Display format.\nSee [layouts](https://pkg.go.dev/time#pkg-constants) for details.\nDefault: `Mon, 02 Jan 2006 15:04:05 -0700`; [time.RFC1123Z]"
        }
      },
      "description": "Datetime type settings.\n\nenum Part {\n   full = 0; // date \u0026 time\n   date = 1; // date only ; YYYY-MM-DD\n   time = 2; // time only ; HH:mm:ss[.pres]\n }\n Part part = 1; // part of: [ date \u0026| time ]\n enum Stamp {\n   s  =  0; // seconds\n   ms =  1; // [milli]seconds ; E+3\n   mc =  2; // [micro]seconds ; E+6\n   ns =  3; // [nano]seconds  ; E+9\n   m  = -1; // minutes\n   h  = -2; // hours\n }\n Stamp time = 2; // time precision\n string zone = 3; // ??? [ Europe/Kyiv | +03:00 ]"
    },
    "typeDuration": {
      "type": "object",
      "properties": {
        "min": {
          "type": "string",
          "format": "int64"
        },
        "max": {
          "type": "string",
          "format": "int64"
        },
        "violation": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "format": {
          "type": "string",
          "title": "Display format.\nTODO: `hh:mm:ss.ms`"
        }
      },
      "title": "Duration"
    },
    "typeFloat": {
      "type": "object",
      "properties": {
        "frac": {
          "type": "integer",
          "format": "int64",
          "title": "fractional part precision"
        },
        "min": {
          "type": "number",
          "format": "double"
        },
        "max": {
          "type": "number",
          "format": "double"
        },
        "violation": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "typeInt": {
      "type": "object",
      "properties": {
        "min": {
          "type": "string",
          "format": "int64"
        },
        "max": {
          "type": "string",
          "format": "int64"
        },
        "violation": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "DESIGN. Custom error(s) on spec. constraint violation.\nmap \u003c constraint, template \u003e to produce [status.message].\n{\n  \"min\": \"country code {value} MUST contain at least 2 digits\"\n  \"max\": \"country code {value} MAY contain at most 4 digits\"\n}"
        }
      }
    },
    "typeKind": {
      "type": "string",
      "enum": [
        "none",
        "list",
        "bool",
        "int",
        "int32",
        "int64",
        "uint",
        "uint32",
        "uint64",
        "float",
        "float32",
        "float64",
        "binary",
        "lookup",
        "string",
        "richtext",
        "datetime",
        "duration"
      ],
      "default": "none",
      "description": "Kind of primitive data types.\n\n - none: option allow_alias = true;\n - list: [array]\n - int: int32\n - uint: uint32\n - float: float32\n - datetime: date \u0026| time"
    },
    "typeText": {
      "type": "object",
      "properties": {
        "max_bytes": {
          "type": "integer",
          "format": "int64"
        },
        "max_chars": {
          "type": "integer",
          "format": "int64"
        },
        "multiline": {
          "type": "boolean"
        },
        "violation": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "// accept format\n string accept_regex = 7;\n // equality strategy\n bool ignore_case = 8;"
        }
      }
    },
    "typeUint": {
      "type": "object",
      "properties": {
        "min": {
          "type": "string",
          "format": "uint64"
        },
        "max": {
          "type": "string",
          "format": "uint64"
        },
        "violation": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "webitelcontactsAttachment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "url": {
          "type": "string"
        },
        "mime": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "webitelcontactsContact": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "READONLY. Operational attributes\nVersion of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "mode": {
          "type": "string",
          "description": "[R]ecord[b]ased[A]ccess[C]ontrol mode granted."
        },
        "domain": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "READONLY. The contact's metadata."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "title": "user"
        },
        "user": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "title": "user connected to the contact"
        },
        "name": {
          "$ref": "#/definitions/contactsName",
          "description": "The Contact's name.\nThis field is a singleton for Contact sources."
        },
        "about": {
          "type": "string",
          "description": "BIO. Short description about the Contact person.\nOPTIONAL. Multi-lined text."
        },
        "labels": {
          "$ref": "#/definitions/contactsLabelList",
          "description": "The Contact's associated tag(s)."
        },
        "emails": {
          "$ref": "#/definitions/contactsEmailList",
          "description": "The Contact's email address(es)."
        },
        "phones": {
          "$ref": "#/definitions/contactsPhoneList",
          "description": "The Contact's phone numbers."
        },
        "photos": {
          "$ref": "#/definitions/contactsPhotoList",
          "description": "Output only. The Contact's photo(s).",
          "readOnly": true
        },
        "managers": {
          "$ref": "#/definitions/contactsManagerList",
          "description": "The Contact's internal manager(s)."
        },
        "comments": {
          "$ref": "#/definitions/contactsCommentList",
          "description": "The Contact's internal comment(s)."
        },
        "languages": {
          "$ref": "#/definitions/contactsLanguageList",
          "description": "A Contact's locale preference(s)."
        },
        "timezones": {
          "$ref": "#/definitions/contactsTimezoneList",
          "description": "The Contact's timezone preference(s)."
        },
        "groups": {
          "$ref": "#/definitions/contactsContactGroupList",
          "description": "The Contact's associated group(s)."
        },
        "imclients": {
          "$ref": "#/definitions/contactsIMClientList",
          "description": "The contact's [I]nstant[M]essaging clients."
        },
        "variables": {
          "$ref": "#/definitions/contactsVariableList",
          "description": "Arbitrary client data that is populated by clients.\nDuplicate keys and values are allowed."
        }
      },
      "description": "The Contact principal source.\nOUTPUT purpose only."
    },
    "webitelcontactsLabel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "label": {
          "type": "string",
          "description": "REQUIRED. Tag value;\nNOTE: Keep in mind, hashtags are not case-sensitive,\nbut adding capital letters does make them easier to read:\n#MakeAWish vs. #makeawish."
        }
      },
      "description": "A Contact's associated Tag.\nOutput purpose only."
    },
    "webitelcontactsLookup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Reference Object unique ID."
        },
        "type": {
          "type": "string",
          "description": "Reference Object well-known type."
        },
        "name": {
          "type": "string",
          "description": "Reference Object display name."
        }
      },
      "description": "Lookup reference information.\nSimplified search filter to uniquely identify related object."
    },
    "webitelknowledgebaseAttachment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "title": {
          "type": "string",
          "description": "The title of the article."
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the attachment."
        },
        "uploaded_by": {
          "$ref": "#/definitions/webitelknowledgebaseLookup",
          "description": "The user who loaded this attachment."
        }
      }
    },
    "webitelknowledgebaseLookup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Reference Object unique ID."
        },
        "type": {
          "type": "string",
          "description": "Reference Object well-known type."
        },
        "name": {
          "type": "string",
          "description": "Reference Object display name."
        }
      },
      "description": "Lookup reference information.\nSimplified search filter to uniquely identify related object."
    },
    "webitelknowledgebaseTag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the tag."
        }
      }
    }
  },
  "securityDefinitions": {
    "AccessToken": {
      "type": "apiKey",
      "name": "X-Webitel-Access",
      "in": "header"
    }
  },
  "security": [
    {
      "AccessToken": []
    }
  ]
}
