{
  "swagger": "2.0",
  "info": {
    "title": "Webitel Contacts ReSTfull API",
    "version": "v23.10",
    "contact": {
      "name": "Webitel LLC",
      "url": "https://www.webitel.com",
      "email": "support@webitel.com"
    },
    "license": {
      "name": "MIT"
    }
  },
  "tags": [
    {
      "name": "AccessStore"
    },
    {
      "name": "Auth"
    },
    {
      "name": "Classes"
    },
    {
      "name": "Customers"
    },
    {
      "name": "Devices"
    },
    {
      "name": "Domains"
    },
    {
      "name": "LDAP"
    },
    {
      "name": "OAuth2Federation"
    },
    {
      "name": "Permissions"
    },
    {
      "name": "Presence"
    },
    {
      "name": "Roles"
    },
    {
      "name": "UserAccessTokens"
    },
    {
      "name": "UserSettings"
    },
    {
      "name": "TwoFactorAuthentication"
    },
    {
      "name": "Users"
    }
  ],
  "host": "nx.webitel.org",
  "basePath": "/api",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/acl/{object.name}/{object.id}": {
      "get": {
        "summary": "default: TODO: indicate objclass=default as a default rights repo",
        "operationId": "AccessStore_ListDefaultAccess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.ListAccessResponseV1"
            }
          }
        },
        "parameters": [
          {
            "name": "object.name",
            "description": "display name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "object.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "grantor",
            "description": "--- filters ---\n\n[optional] [FROM] each rule owner is any of role(s) id; user -or- role",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "grantee",
            "description": "[optional] [TO] subject role(s) id; user -or- role",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "granted",
            "description": "[xrwdxrwd] [R]ecord-[b]ased-[A]ccess-[C]ontrol level check(!)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "[optional] [TO] subject.name ILIKE ?q=; user -or- role",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "----- Select Options -------------------------\n\nattributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "size",
            "description": "pagedResultsControl\n\ndefault: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "default: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "AccessStore"
        ]
      }
    },
    "/acl/{object.name}/{object.id}/grantor/{grantor}": {
      "patch": {
        "summary": "Same as UpdateAccess except for DEFAULT access control system",
        "operationId": "AccessStore_ToggleDefaultAccess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.ToggleDefaultAccessResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "object.name",
            "description": "display name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "object.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "grantor",
            "description": "[FOR] creator user/role",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.AccessStore.ToggleDefaultAccessBody"
            }
          }
        ],
        "tags": [
          "AccessStore"
        ]
      }
    },
    "/customer": {
      "get": {
        "summary": "rpc GetCertificate(CertificateUsageRequest) returns (CertificateUsageResponse) {}",
        "operationId": "Customers_GetCustomer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.GetCustomerResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Available Filters\n\nshow by customer id; serial number (uuid)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "valid",
            "description": "show if valid only!",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "domain.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Request Controls\n\nserial,",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "put": {
        "operationId": "Customers_UpdateCustomer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.UpdateCustomerResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "organization",
            "description": "[optional] e.g.: Example Org.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "logo_picture",
            "description": "[optional] logo source image",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "certificate",
            "description": "[optional] raw bytes protobuf::base64.RawStdEncoding != certificate::base64.StdEncoding",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "revoke",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/customer/{customer_id}/license": {
      "get": {
        "operationId": "Customers_LicenseUsage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LicenseUsageResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "description": "----- Search Options ----- //\n\ndefault: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "default: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "set of output fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "user.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "domain.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "by serial number(s)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "product",
            "description": "by product name(s)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "valid",
            "description": "view: all|valid|grantable\n\nshow: available to be granted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "q",
            "description": "filter: term of search",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/customer/{id}": {
      "get": {
        "summary": "rpc GetCertificate(CertificateUsageRequest) returns (CertificateUsageResponse) {}",
        "operationId": "Customers_GetCustomer2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.GetCustomerResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Available Filters\n\nshow by customer id; serial number (uuid)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "valid",
            "description": "show if valid only!",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "domain.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Request Controls\n\nserial,",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/devices": {
      "get": {
        "operationId": "Devices_SearchDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.SearchDeviceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "size",
            "description": "----- Select Options -------------------------\n\ndefault: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "default: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "ids",
            "description": "----- Search Basic Filters ---------------------------\n\nselection: by unique identifier",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "term-of-search: lookup[name,account,hotdesk,brand,model,mac,ip]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "case-ignore substring match: ILIKE '*' - any; '?' - one",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "access",
            "description": "[M]andatory[A]ccess[C]ontrol: with access mode (action) granted!",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "account",
            "description": "----- Device-Specific Filters ----------------\n\nsubstring like '%name%'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "hotdesk",
            "description": "filter: has hotdesk (=pattern); is hotdesk (=*)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user.id",
            "description": "Object ID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "Display Name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "mac",
            "description": "filter: by MAC address",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ip",
            "description": "filter: by IP address",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Devices"
        ]
      },
      "delete": {
        "operationId": "Devices_DeleteDevice2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.DeleteDeviceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "description": "bulk",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "permanent",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Devices"
        ]
      },
      "post": {
        "operationId": "Devices_CreateDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.CreateDeviceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "device",
            "description": "string password = 2;",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.Device"
            }
          }
        ],
        "tags": [
          "Devices"
        ]
      }
    },
    "/devices/{device.id}": {
      "put": {
        "operationId": "Devices_UpdateDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.UpdateDeviceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "device.id",
            "description": "object id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "device",
            "description": "Device profile",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "display name",
                  "title": "kind of\nDeviceType type = 19;"
                },
                "account": {
                  "type": "string",
                  "description": "username",
                  "title": "credentials"
                },
                "password": {
                  "type": "string",
                  "title": "password"
                },
                "user": {
                  "$ref": "#/definitions/api.UserId",
                  "title": "[optional] The user that 'owns' the device;"
                },
                "logged_in": {
                  "type": "string",
                  "format": "int64",
                  "title": "caller profile\n webitel.adt.caller caller = 4;"
                },
                "hotdesk": {
                  "type": "boolean",
                  "description": "act as a hotdesk",
                  "title": "Hotdesk: this workstation aliases"
                },
                "hotdesks": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "associated aliases"
                },
                "provision": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "provision extra data"
                },
                "brand": {
                  "type": "string",
                  "description": "vendor brand name",
                  "title": "provision"
                },
                "model": {
                  "type": "string"
                },
                "mac": {
                  "type": "string",
                  "title": "static"
                },
                "ip": {
                  "type": "string"
                },
                "reged": {
                  "type": "boolean",
                  "title": "TODO: something like PresenceStatus instead of Registration\n repeated Registration contacts = 16;"
                },
                "created_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "created_by": {
                  "$ref": "#/definitions/api.UserId",
                  "title": "user"
                },
                "updated_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "updated_by": {
                  "$ref": "#/definitions/api.UserId",
                  "title": "user"
                },
                "deleted_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "deleted_by": {
                  "$ref": "#/definitions/api.UserId",
                  "title": "user"
                }
              },
              "title": "Device profile"
            }
          },
          {
            "name": "fields",
            "description": "PATCH: partial update",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Devices"
        ]
      },
      "patch": {
        "operationId": "Devices_UpdateDevice2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.UpdateDeviceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "device.id",
            "description": "object id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "device",
            "description": "Device profile",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "display name",
                  "title": "kind of\nDeviceType type = 19;"
                },
                "account": {
                  "type": "string",
                  "description": "username",
                  "title": "credentials"
                },
                "password": {
                  "type": "string",
                  "title": "password"
                },
                "user": {
                  "$ref": "#/definitions/api.UserId",
                  "title": "[optional] The user that 'owns' the device;"
                },
                "logged_in": {
                  "type": "string",
                  "format": "int64",
                  "title": "caller profile\n webitel.adt.caller caller = 4;"
                },
                "hotdesk": {
                  "type": "boolean",
                  "description": "act as a hotdesk",
                  "title": "Hotdesk: this workstation aliases"
                },
                "hotdesks": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "associated aliases"
                },
                "provision": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "provision extra data"
                },
                "brand": {
                  "type": "string",
                  "description": "vendor brand name",
                  "title": "provision"
                },
                "model": {
                  "type": "string"
                },
                "mac": {
                  "type": "string",
                  "title": "static"
                },
                "ip": {
                  "type": "string"
                },
                "reged": {
                  "type": "boolean",
                  "title": "TODO: something like PresenceStatus instead of Registration\n repeated Registration contacts = 16;"
                },
                "created_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "created_by": {
                  "$ref": "#/definitions/api.UserId",
                  "title": "user"
                },
                "updated_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "updated_by": {
                  "$ref": "#/definitions/api.UserId",
                  "title": "user"
                },
                "deleted_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "deleted_by": {
                  "$ref": "#/definitions/api.UserId",
                  "title": "user"
                }
              },
              "title": "Device profile"
            }
          },
          {
            "name": "fields",
            "description": "PATCH: partial update",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Devices"
        ]
      }
    },
    "/devices/{device.id}/registered": {
      "get": {
        "operationId": "Devices_ListRegistrations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.ListRegistrationsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "device.id",
            "description": "Object ID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.id",
            "description": "Object ID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "Display Name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "device.name",
            "description": "Display Name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Devices"
        ]
      }
    },
    "/devices/{device.id}/users/audit": {
      "get": {
        "summary": "----- Details (1:M) ----------------------------------------------",
        "operationId": "Devices_SearchDeviceAudit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.DeviceAuditResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "device.id",
            "description": "Object ID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.id",
            "description": "Object ID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "Display Name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "device.name",
            "description": "Display Name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "time_from",
            "description": "Filter: timing range (optional)\n\nunix milliseconds",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "time_till",
            "description": "unix milliseconds",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "Search Options",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Devices"
        ]
      }
    },
    "/devices/{id}": {
      "get": {
        "operationId": "Devices_ReadDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.ReadDeviceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "output selection",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Devices"
        ]
      },
      "delete": {
        "operationId": "Devices_DeleteDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.DeleteDeviceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "permanent",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "ids",
            "description": "bulk",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Devices"
        ]
      }
    },
    "/domain": {
      "get": {
        "operationId": "Domains_ReadDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.ReadDomainResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dc",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Domains"
        ]
      },
      "delete": {
        "operationId": "Domains_DeleteDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.DeleteDomainResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dc",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Domains"
        ]
      }
    },
    "/domains": {
      "get": {
        "operationId": "Domains_SearchDomains",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.SearchDomainsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "description": "like",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "attrs",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Domains"
        ]
      },
      "post": {
        "operationId": "Domains_CreateDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.CreateDomainResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.CreateDomainRequest"
            }
          }
        ],
        "tags": [
          "Domains"
        ]
      }
    },
    "/domains/{dc}": {
      "get": {
        "operationId": "Domains_ReadDomain2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.ReadDomainResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "dc",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Domains"
        ]
      },
      "delete": {
        "operationId": "Domains_DeleteDomain2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.DeleteDomainResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "dc",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Domains"
        ]
      }
    },
    "/domains/{domain.dc}": {
      "put": {
        "operationId": "Domains_UpdateDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.UpdateDomainResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "domain.dc",
            "description": "component",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.Domains.UpdateDomainBody"
            }
          }
        ],
        "tags": [
          "Domains"
        ]
      },
      "patch": {
        "operationId": "Domains_UpdateDomain2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.UpdateDomainResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "domain.dc",
            "description": "component",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.Domains.UpdateDomainBody"
            }
          }
        ],
        "tags": [
          "Domains"
        ]
      }
    },
    "/ldap": {
      "get": {
        "summary": "Search for LDAP directories ...",
        "operationId": "LDAP_SearchLDAPCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.SearchLDAPResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\n\nselection: by unique identifier",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "term-of-search: lookup[name]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "case-ignore substring match: ILIKE '*' - any; '?' - one",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "access",
            "description": "[M]andatory[A]ccess[C]ontrol: with access mode (action) granted!",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "delete": {
        "summary": "Delete LDAP profile(s) ...",
        "operationId": "LDAP_DeleteLDAPCatalog2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LDAPCatalog"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.DeleteLDAPRequest"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "post": {
        "summary": "Create LDAP profile",
        "operationId": "LDAP_CreateLDAPCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LDAPCatalog"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.LDAPCatalog"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/search": {
      "get": {
        "summary": "LDAPSearch performs LDAP Search operation ...",
        "operationId": "LDAP_LDAPSearch4",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LDAPSearchResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "----- connection -----\nOptional. ID of the preconfigured LDAP catalog",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "url",
            "description": "Optional. URL to establish connection to LDAP catalog\n\nURL e.g.: [(ldap|ldapi|ldaps)://]host[:port]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tls.PEM",
            "description": "TODO: (!)\n\nbase64",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "bind",
            "description": "----- BIND: Authorization -----\n\nauthorization method e.g.: SIMPLE, SAML, NTLM, etc.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "description": "bind_dn",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "description": "password",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseObject",
            "description": "----- SearchRequest -----\nbaseObject [D]istinguished[N]ame",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "baseObject              (0),\nsingleLevel             (1),\nwholeSubtree            (2)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "derefAliases",
            "description": "neverDerefAliases       (0),\nderefInSearching        (1),\nderefFindingBaseObj     (2),\nderefAlways             (3)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sizeLimit",
            "description": "INTEGER (0 ..  maxInt),",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "timeLimit",
            "description": "INTEGER (0 ..  maxInt),",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "typesOnly",
            "description": "BOOLEAN,",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter",
            "description": "Filter,",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "attributes",
            "description": "AttributeSelection",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "post": {
        "summary": "LDAPSearch performs LDAP Search operation ...",
        "operationId": "LDAP_LDAPSearch3",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LDAPSearchResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.LDAPSearchRequest"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{catalog.id}": {
      "put": {
        "summary": "Update LDAP profile details",
        "operationId": "LDAP_UpdateLDAPCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LDAPCatalog"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog.id",
            "description": "identity\nint64 dc = 1;",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.LDAP.UpdateLDAPCatalogBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "patch": {
        "summary": "Update LDAP profile details",
        "operationId": "LDAP_UpdateLDAPCatalog2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LDAPCatalog"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog.id",
            "description": "identity\nint64 dc = 1;",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.LDAP.UpdateLDAPCatalogBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{catalog.id}/templates": {
      "post": {
        "operationId": "LDAP_CreateLDAPTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LDAPTemplate"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.LDAP.CreateLDAPTemplateBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{catalog_id}/rsync": {
      "get": {
        "summary": "(ResyncLDAPResponse) {",
        "operationId": "LDAP_SearchLDAProcess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LDAProcessResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "REQUIRED. Parent LDAP catalog IDentifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\nOPTIONAL. Search process by unique .id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "OPTIONAL. Filter(s) SET",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "template",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "objclass",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "failed",
            "description": "WITH .errs",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "enabled",
            "description": "created|updated",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "disabled",
            "description": "deleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "post": {
        "summary": "Resync LDAP directory catalog changes ...",
        "description": "(ResyncLDAPResponse) {",
        "operationId": "LDAP_ResyncLDAPCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LDAProcess"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "LDAP Catalog unique IDentifier to sync with\n\ncatalog_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.LDAP.ResyncLDAPCatalogBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{catalog_id}/rsync/{id}": {
      "get": {
        "summary": "(ResyncLDAPResponse) {",
        "operationId": "LDAP_LocateLDAProcess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LDAProcess"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "REQUIRED. Parent LDAP catalog IDentifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\nOPTIONAL. Search process by unique .id",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "OPTIONAL. Filter(s) SET",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "template",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "objclass",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "failed",
            "description": "WITH .errs",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "enabled",
            "description": "created|updated",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "disabled",
            "description": "deleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{catalog_id}/search": {
      "get": {
        "summary": "LDAPSearch performs LDAP Search operation ...",
        "operationId": "LDAP_LDAPSearch2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LDAPSearchResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "----- connection -----\nOptional. ID of the preconfigured LDAP catalog",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "url",
            "description": "Optional. URL to establish connection to LDAP catalog\n\nURL e.g.: [(ldap|ldapi|ldaps)://]host[:port]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tls.PEM",
            "description": "TODO: (!)\n\nbase64",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "bind",
            "description": "----- BIND: Authorization -----\n\nauthorization method e.g.: SIMPLE, SAML, NTLM, etc.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "description": "bind_dn",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "description": "password",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseObject",
            "description": "----- SearchRequest -----\nbaseObject [D]istinguished[N]ame",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "baseObject              (0),\nsingleLevel             (1),\nwholeSubtree            (2)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "derefAliases",
            "description": "neverDerefAliases       (0),\nderefInSearching        (1),\nderefFindingBaseObj     (2),\nderefAlways             (3)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sizeLimit",
            "description": "INTEGER (0 ..  maxInt),",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "timeLimit",
            "description": "INTEGER (0 ..  maxInt),",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "typesOnly",
            "description": "BOOLEAN,",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter",
            "description": "Filter,",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "attributes",
            "description": "AttributeSelection",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "post": {
        "summary": "LDAPSearch performs LDAP Search operation ...",
        "operationId": "LDAP_LDAPSearch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LDAPSearchResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "----- connection -----\nOptional. ID of the preconfigured LDAP catalog",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.LDAP.LDAPSearchBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{catalog_id}/templates": {
      "get": {
        "operationId": "LDAP_SearchLDAPTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LDAPTemplateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "REQUIRED. Parent LDAP catalog IDentifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\nOPTIONAL. Search templates by .id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "OPTIONAL. Filter(s) SET",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "base_dn",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "objclass",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "disabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "delete": {
        "operationId": "LDAP_DeleteLDAPTemplate2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LDAPTemplateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "REQUIRED. Parent LDAP catalog IDentifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.LDAP.DeleteLDAPTemplateBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{catalog_id}/templates/{id}": {
      "get": {
        "operationId": "LDAP_LocateLDAPTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LDAPTemplate"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "REQUIRED. Parent LDAP catalog IDentifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\nOPTIONAL. Search templates by .id",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "OPTIONAL. Filter(s) SET",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "base_dn",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "objclass",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "disabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "delete": {
        "operationId": "LDAP_DeleteLDAPTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LDAPTemplateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "REQUIRED. Parent LDAP catalog IDentifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\nOPTIONAL. Search templates by .id",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.LDAP.DeleteLDAPTemplateBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{id}": {
      "get": {
        "summary": "Read LDAP catalog profile by .id",
        "operationId": "LDAP_LocateLDAPCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LDAPCatalog"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\n\nselection: by unique identifier",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "term-of-search: lookup[name]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "case-ignore substring match: ILIKE '*' - any; '?' - one",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "access",
            "description": "[M]andatory[A]ccess[C]ontrol: with access mode (action) granted!",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "delete": {
        "summary": "Delete LDAP profile(s) ...",
        "operationId": "LDAP_DeleteLDAPCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LDAPCatalog"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "catalog id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "related_objects",
            "description": "WITH objects bound to ?",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{template.catalog.id}/templates/{template.id}": {
      "put": {
        "operationId": "LDAP_UpdateLDAPTemplate2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LDAPTemplate"
            }
          }
        },
        "parameters": [
          {
            "name": "template.catalog.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "template.id",
            "description": "ID unique",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.LDAP.UpdateLDAPTemplateBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "patch": {
        "operationId": "LDAP_UpdateLDAPTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LDAPTemplate"
            }
          }
        },
        "parameters": [
          {
            "name": "template.catalog.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "template.id",
            "description": "ID unique",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.LDAP.UpdateLDAPTemplateBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/license": {
      "get": {
        "operationId": "Customers_LicenseUsage2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LicenseUsageResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "size",
            "description": "----- Search Options ----- //\n\ndefault: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "default: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "set of output fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "user.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "domain.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "by serial number(s)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "product",
            "description": "by product name(s)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "valid",
            "description": "view: all|valid|grantable\n\nshow: available to be granted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "q",
            "description": "filter: term of search",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/oauth/apps": {
      "get": {
        "operationId": "OAuth2Federation_SearchOAuthService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.SearchOAuthServiceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\n\nselection: by unique identifier",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "term-of-search: lookup[name]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "case-ignore substring match: ILIKE '*' - any; '?' - one",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "access",
            "description": "[M]andatory[A]ccess[C]ontrol: with access mode (action) granted!",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "enabled",
            "description": "----- OAuthService-Specific Filters ----------------",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "OAuth2Federation"
        ]
      },
      "delete": {
        "operationId": "OAuth2Federation_DeleteOAuthService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.DeleteOAuthServiceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.DeleteOAuthServiceRequest"
            }
          }
        ],
        "tags": [
          "OAuth2Federation"
        ]
      },
      "post": {
        "operationId": "OAuth2Federation_CreateOAuthService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.OAuthService"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.OAuthService"
            }
          }
        ],
        "tags": [
          "OAuth2Federation"
        ]
      }
    },
    "/oauth/apps/{changes.id}": {
      "put": {
        "operationId": "OAuth2Federation_UpdateOAuthService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.OAuthService"
            }
          }
        },
        "parameters": [
          {
            "name": "changes.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.OAuth2Federation.UpdateOAuthServiceBody"
            }
          }
        ],
        "tags": [
          "OAuth2Federation"
        ]
      },
      "patch": {
        "operationId": "OAuth2Federation_UpdateOAuthService2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.OAuthService"
            }
          }
        },
        "parameters": [
          {
            "name": "changes.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.OAuth2Federation.UpdateOAuthServiceBody"
            }
          }
        ],
        "tags": [
          "OAuth2Federation"
        ]
      }
    },
    "/oauth/apps/{id}": {
      "get": {
        "operationId": "OAuth2Federation_LocateOAuthService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.OAuthService"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\n\nselection: by unique identifier",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "term-of-search: lookup[name]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "case-ignore substring match: ILIKE '*' - any; '?' - one",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "access",
            "description": "[M]andatory[A]ccess[C]ontrol: with access mode (action) granted!",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "enabled",
            "description": "----- OAuthService-Specific Filters ----------------",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "OAuth2Federation"
        ]
      },
      "delete": {
        "operationId": "OAuth2Federation_DeleteOAuthService2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.DeleteOAuthServiceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.OAuth2Federation.DeleteOAuthServiceBody"
            }
          }
        ],
        "tags": [
          "OAuth2Federation"
        ]
      }
    },
    "/objclass": {
      "get": {
        "operationId": "Classes_SearchClasses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.SearchClassesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "description": "TO BE REMOVED // bound to session.domain.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "class",
            "description": "[filter]: like '%class%'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "int64 id = 3;  // [filter]: obj.id = id\ncontrols\n\noutput",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "sort: \"field\" asc; \"!field\" desc",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "description": "page number",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Classes"
        ]
      }
    },
    "/objclass/{class.id}": {
      "put": {
        "operationId": "Classes_UpdateClass",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.UpdateClassResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "class.id",
            "description": "(class::object).id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.Classes.UpdateClassBody"
            }
          }
        ],
        "tags": [
          "Classes"
        ]
      },
      "patch": {
        "operationId": "Classes_UpdateClass2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.UpdateClassResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "class.id",
            "description": "(class::object).id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.Classes.UpdateClassBody"
            }
          }
        ],
        "tags": [
          "Classes"
        ]
      }
    },
    "/objclass/{id}": {
      "get": {
        "operationId": "Classes_ReadClass",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.ReadClassResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "[filter]: obj.id = id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "class",
            "description": "[filter]: like '%class%'",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Classes"
        ]
      }
    },
    "/permissions": {
      "get": {
        "summary": "GetPermissions list available from application",
        "operationId": "Permissions_GetPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.SearchPermissionResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "q",
            "description": "TermOfSearch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "= ANY(id)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "not",
            "description": "\u003c\u003e ANY(not)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "controls\n\noutput",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "sort: \"field\" asc; \"!field\" desc",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "description": "page number",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Permissions"
        ]
      }
    },
    "/presence": {
      "patch": {
        "summary": "set(presence) (notify, error)",
        "description": "(UserPresence) {",
        "operationId": "Presence_SetStatus2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.PresenceStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.SetStatusRequest"
            }
          }
        ],
        "tags": [
          "Presence"
        ]
      }
    },
    "/products": {
      "get": {
        "operationId": "Customers_LicenseUsage3",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LicenseUsageResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "size",
            "description": "----- Search Options ----- //\n\ndefault: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "default: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "set of output fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "user.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "domain.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "by serial number(s)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "product",
            "description": "by product name(s)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "valid",
            "description": "view: all|valid|grantable\n\nshow: available to be granted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "q",
            "description": "filter: term of search",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/products/{id}/users": {
      "get": {
        "operationId": "Customers_LicenseUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LicenseUsersResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "----- Search Filters ----- //\n\nREQUIRED Product ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "description": "----- Search Options ----- //\n\ndefault: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "default: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "set of output fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "filter: term of search (username)",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/roles": {
      "get": {
        "operationId": "Roles_SearchRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.SearchRolesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "description": "----- Role-specific Filters ----------------- //\n\nfilter: .id = any(:ids...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "description": "filter: group name like",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user.id",
            "description": "Object ID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "Display Name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "description": "filter: term of search (name, description)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "bool admin = 4;  // filter: where CURRENT user is 'ADMIN' of\ncontrols\n\noutput",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "sort: \"field\" asc; \"!field\" desc",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "description": "page number",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "operationId": "Roles_CreateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.CreateRoleResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.CreateRoleRequest"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/roles/metadata": {
      "get": {
        "operationId": "Roles_RoleMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.RoleMetadataResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Optional. Unique ID of metadata role owner",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "key",
            "description": "Optional. Partial metadata document key name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "merge.null_value",
            "description": "Represents a null value.\n\n - NULL_VALUE: Null value.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NULL_VALUE"
            ],
            "default": "NULL_VALUE"
          },
          {
            "name": "merge.number_value",
            "description": "Represents a double value.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "merge.string_value",
            "description": "Represents a string value.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "merge.bool_value",
            "description": "Represents a boolean value.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "merge.struct_value",
            "description": "Represents a structured value.",
            "in": "query",
            "required": false,
            "type": "object"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/roles/objects/{object}/records/{record.id}": {
      "get": {
        "operationId": "Roles_SearchRecordAvailableRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.SearchRolesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "object",
            "description": "bool admin = 4;  // filter: where CURRENT user is 'ADMIN' of\nREQUIRED !",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "contacts",
              "cc_list",
              "cc_bucket",
              "calendars",
              "devices",
              "cc_agent",
              "cc_team",
              "cc_resource",
              "cc_resource_group",
              "cc_queue",
              "roles",
              "users",
              "cognitive_profile"
            ]
          },
          {
            "name": "record.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "ids",
            "description": "----- Role-specific Filters ----------------- //\n\nfilter: .id = any(:ids...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "description": "filter: group name like",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user.id",
            "description": "Object ID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "Display Name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "description": "filter: term of search (name, description)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "record.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "controls\n\noutput",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "sort: \"field\" asc; \"!field\" desc",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "description": "page number",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/roles/{id}": {
      "get": {
        "operationId": "Roles_ReadRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.ReadRoleResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "role.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "select projection\n\nselect: output (fields,...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Roles"
        ]
      },
      "delete": {
        "operationId": "Roles_DeleteRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.DeleteRoleResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "DELETE /roles/{id}",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "ids",
            "description": "POST /roles/delete {\"ids\"}",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "permanent",
            "description": "deleteOrMark 'deleted' ?",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/roles/{role.id}": {
      "put": {
        "operationId": "Roles_UpdateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.UpdateRoleResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "role.id",
            "description": "oid",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.Roles.UpdateRoleBody"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      },
      "patch": {
        "operationId": "Roles_UpdateRole2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.UpdateRoleResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "role.id",
            "description": "oid",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.Roles.UpdateRoleBody"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/signup": {
      "post": {
        "summary": "Signup new domain with superior access token",
        "operationId": "Auth_Signup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LoginResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "description": "domain name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "description": "username",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "description": "user password",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "scope request control",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "certificate",
            "description": "license/certificate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "mobile",
            "description": "OPTIONAL. Mobile device /login request ?",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Auth"
        ]
      }
    },
    "/srvinfo": {
      "get": {
        "operationId": "Customers_ServerInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.ServerInfoResponse"
            }
          }
        },
        "tags": [
          "Customers"
        ]
      }
    },
    "/user": {
      "get": {
        "operationId": "Users_ReadUser2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.ReadUserResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "partial output",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/user/settings/{key}": {
      "get": {
        "summary": "GET /user/settings/{key=*}",
        "operationId": "UserSettings_GetUserSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.UserSetting"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "UserSettings"
        ]
      },
      "put": {
        "summary": "Create -or- Update",
        "description": "PUT /user/settings/{key=*}\nContent-Type: application/json; charset=utf-8\n\n${value=.body}",
        "operationId": "UserSettings_SetUserSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.UserSetting"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "value",
            "in": "body",
            "required": true,
            "schema": {}
          }
        ],
        "tags": [
          "UserSettings"
        ]
      }
    },
    "/userinfo": {
      "get": {
        "summary": "The UserInfo Endpoint is an OAuth 2.0 Protected Resource that returns Claims about the authenticated End-User.",
        "operationId": "Auth_UserInfo2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.Userinfo"
            }
          }
        },
        "parameters": [
          {
            "name": "access_token",
            "description": "string id_token = 2;",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ]
      },
      "post": {
        "summary": "The UserInfo Endpoint is an OAuth 2.0 Protected Resource that returns Claims about the authenticated End-User.",
        "operationId": "Auth_UserInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.Userinfo"
            }
          }
        },
        "parameters": [
          {
            "name": "access_token",
            "description": "string id_token = 2;",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ]
      }
    },
    "/users": {
      "get": {
        "operationId": "Users_SearchUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.SearchUsersResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "----- Base Filters ---------------------------\n\nfilter: .id = any({id}...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "not_id",
            "description": "filter: .id \u003c\u003e all({not_ids}...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "----- User-specific Filters ------------------\n\nfilter: (.name|.username|.extension|.status) ILIKE '{q}'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "filter: .name ILIKE '{name}'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "filter: .status ILIKE '{status}'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "description": "filter: .username ILIKE '{username}'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "extension",
            "description": "filter: .extension LIKE '{extension}'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "any",
            "description": "----- View Modes -----------------------------\nNOTE: by default, search NOT 'deleted' objects ONLY\n\nfilter: include 'deleted' ALSO ! (inactive)",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "deleted",
            "description": "filter: .deleted_at NOTNULL (view: RECYCLE)",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "presence.status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "presence.note",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "// navigation filter\nrepeated int64 roles = 7;\n----- Search Options -------------------------\n\nselect: output (fields,...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "select: order by (fields,...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "description": "select: offset {page}",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "select: limit {size}",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "operationId": "Users_DeleteUsers2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.DeleteUsersResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "selection",
            "description": "MANY /users .ids=[id,...]",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "description": "ONE /users/{id}",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "permanent",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "post": {
        "operationId": "Users_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.CreateUserResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.CreateUserRequest"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/search": {
      "post": {
        "operationId": "Users_SearchUsers2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.SearchUsersResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.SearchUsersRequest"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "Users_ReadUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.ReadUserResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "partial output",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "operationId": "Users_DeleteUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.DeleteUsersResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ONE /users/{id}",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "selection",
            "description": "MANY /users .ids=[id,...]",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "permanent",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}/logout": {
      "post": {
        "operationId": "Users_LogoutUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.LogoutUserResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.Users.LogoutUserBody"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{publish.id}/presence": {
      "patch": {
        "summary": "set(presence) (notify, error)",
        "description": "(UserPresence) {",
        "operationId": "Presence_SetStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.PresenceStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "publish.id",
            "description": "[required] user identity",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.Presence.SetStatusBody"
            }
          }
        ],
        "tags": [
          "Presence"
        ]
      }
    },
    "/users/{token.user.id}/tokens": {
      "post": {
        "operationId": "UserAccessTokens_AddUserAccessToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.UserAccessToken"
            }
          }
        },
        "parameters": [
          {
            "name": "token.user.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "token",
            "description": "processing\n------------\ntoken.user.id // [required] authorization\ntoken.usage   // [optional] short description",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "title": "tokenKey::token_key"
                },
                "token": {
                  "type": "string",
                  "title": "tokenString::access_token"
                },
                "usage": {
                  "type": "string",
                  "title": "[optional] short usage description"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "title": "display name"
                    }
                  },
                  "title": "[optional] output depends on API endpoint"
                },
                "created_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix::ms"
                },
                "created_by": {
                  "$ref": "#/definitions/api.ObjectId"
                },
                "updated_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix::ms"
                },
                "updated_by": {
                  "$ref": "#/definitions/api.ObjectId"
                },
                "deleted_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "[optional] disabled at"
                },
                "deleted_by": {
                  "$ref": "#/definitions/api.ObjectId",
                  "title": "[optional] disabled by"
                }
              },
              "title": "processing\n------------\ntoken.user.id // [required] authorization\ntoken.usage   // [optional] short description"
            }
          },
          {
            "name": "enable",
            "description": "ObjectId user = 1; // [required]\n string usage = 2;  // [optional] usage description\n bool enable = 3;",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "UserAccessTokens"
        ]
      }
    },
    "/users/{update.user.id}/tokens/{update.id}": {
      "put": {
        "operationId": "UserAccessTokens_UpdateUserAccessToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.UserAccessToken"
            }
          }
        },
        "parameters": [
          {
            "name": "update.user.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "update.id",
            "description": "tokenKey::token_key",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "update",
            "description": "[required] identification + modifications(about)",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "title": "tokenString::access_token"
                },
                "usage": {
                  "type": "string",
                  "title": "[optional] short usage description"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "title": "display name"
                    }
                  },
                  "title": "[optional] output depends on API endpoint"
                },
                "created_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix::ms"
                },
                "created_by": {
                  "$ref": "#/definitions/api.ObjectId"
                },
                "updated_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix::ms"
                },
                "updated_by": {
                  "$ref": "#/definitions/api.ObjectId"
                },
                "deleted_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "[optional] disabled at"
                },
                "deleted_by": {
                  "$ref": "#/definitions/api.ObjectId",
                  "title": "[optional] disabled by"
                }
              },
              "title": "[required] identification + modifications(about)"
            }
          },
          {
            "name": "fields",
            "description": "[optional] PATCH implementation",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "enable",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "UserAccessTokens"
        ]
      },
      "patch": {
        "operationId": "UserAccessTokens_UpdateUserAccessToken2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.UserAccessToken"
            }
          }
        },
        "parameters": [
          {
            "name": "update.user.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "update.id",
            "description": "tokenKey::token_key",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "update",
            "description": "[required] identification + modifications(about)",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "title": "tokenString::access_token"
                },
                "usage": {
                  "type": "string",
                  "title": "[optional] short usage description"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "title": "display name"
                    }
                  },
                  "title": "[optional] output depends on API endpoint"
                },
                "created_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix::ms"
                },
                "created_by": {
                  "$ref": "#/definitions/api.ObjectId"
                },
                "updated_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix::ms"
                },
                "updated_by": {
                  "$ref": "#/definitions/api.ObjectId"
                },
                "deleted_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "[optional] disabled at"
                },
                "deleted_by": {
                  "$ref": "#/definitions/api.ObjectId",
                  "title": "[optional] disabled by"
                }
              },
              "title": "[required] identification + modifications(about)"
            }
          },
          {
            "name": "fields",
            "description": "[optional] PATCH implementation",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "enable",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "UserAccessTokens"
        ]
      }
    },
    "/users/{user.id}": {
      "put": {
        "operationId": "Users_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.UpdateUserResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user.id",
            "description": "Object ID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.Users.UpdateUserBody"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{user.id}/tokens": {
      "get": {
        "operationId": "UserAccessTokens_ListUserAccessToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.UserAccessTokenList"
            }
          }
        },
        "parameters": [
          {
            "name": "user.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "description": "int32 page = 2;\nint64 size = 3;\n\n.usage ILIKE :q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "----- Search Options -------------------------\n\nselect: output (fields,...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "select: order by (fields,...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "description": "select: offset {page}",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "select: limit {size}",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "UserAccessTokens"
        ]
      }
    },
    "/users/{user.id}/tokens/{id}": {
      "get": {
        "operationId": "UserAccessTokens_GetUserAccessToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.UserAccessToken"
            }
          }
        },
        "parameters": [
          {
            "name": "user.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "description": "tokenKey::uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserAccessTokens"
        ]
      },
      "delete": {
        "operationId": "UserAccessTokens_DeleteUserAccessToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.UserAccessToken"
            }
          }
        },
        "parameters": [
          {
            "name": "user.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "description": "tokenKey::uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserAccessTokens"
        ]
      }
    },
    "/users/{user_id}/2fa": {
      "get": {
        "summary": "GetUserTfaKey locates the secret for user and returns it as a TOTP url",
        "operationId": "TwoFactorAuthentication_GetUserTfaKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.GetUserTfaKeyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "TwoFactorAuthentication"
        ]
      },
      "post": {
        "summary": "GenerateUserTfaKey generates new or regenerates secret for the concrete user",
        "operationId": "TwoFactorAuthentication_GenerateUserTfaKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.GenerateUserTfaKeyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "TwoFactorAuthentication"
        ]
      }
    },
    "/{object.name}/{object.id}/acl": {
      "get": {
        "operationId": "AccessStore_ListObjectAccess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.ListAccessResponseV1"
            }
          }
        },
        "parameters": [
          {
            "name": "object.name",
            "description": "display name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "object.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "grantor",
            "description": "--- filters ---\n\n[optional] [FROM] each rule owner is any of role(s) id; user -or- role",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "grantee",
            "description": "[optional] [TO] subject role(s) id; user -or- role",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "granted",
            "description": "[xrwdxrwd] [R]ecord-[b]ased-[A]ccess-[C]ontrol level check(!)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "[optional] [TO] subject.name ILIKE ?q=; user -or- role",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "----- Select Options -------------------------\n\nattributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "size",
            "description": "pagedResultsControl\n\ndefault: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "default: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "AccessStore"
        ]
      },
      "patch": {
        "summary": "TODO: replace with GrantAccess API, to become command like GRANT REVOKE ... with empty access rights string",
        "operationId": "AccessStore_ToggleObjectAccess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api.UpdateAccessResponseV1"
            }
          }
        },
        "parameters": [
          {
            "name": "object.name",
            "description": "display name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "object.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "list",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/api.GrantAccessRequestV1"
              }
            }
          }
        ],
        "tags": [
          "AccessStore"
        ]
      }
    }
  },
  "definitions": {
    "api.AccessRule": {
      "type": "object",
      "properties": {
        "grantor": {
          "$ref": "#/definitions/api.RoleId",
          "description": "[WHO]: operational; current user NEED to be rechecked !!!",
          "title": "ObjectId object = 1;"
        },
        "grantee": {
          "$ref": "#/definitions/api.RoleId",
          "title": "[WHOM]: required; NEED to be rechecked !!!"
        },
        "granted": {
          "type": "string",
          "title": "[WHAT]: full: [xrwdxrwd]; privileges: [----xrwd]; grantable: [xrwd----]"
        }
      }
    },
    "api.AccessStore.ToggleDefaultAccessBody": {
      "type": "object",
      "properties": {
        "object": {
          "type": "object",
          "title": "[ON] objclass (either: by entity .id -or- class .name)"
        },
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.GrantAccessRequestV1"
          },
          "description": "list of changes ...\n\n[TO] (GRANT/REVOKE)"
        }
      }
    },
    "api.AccessToken": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string",
          "description": "REQUIRED. The access token issued by the authorization server."
        },
        "token_type": {
          "type": "string",
          "description": "REQUIRED. The type of the token issued. Value is case insensitive."
        },
        "expires_in": {
          "type": "integer",
          "format": "int32",
          "description": "RECOMMENDED. The lifetime in seconds of the access token."
        },
        "refresh_token": {
          "type": "string",
          "description": "OPTIONAL. The refresh token, which can be used to obtain\nnew access tokens using the same authorization grant."
        },
        "state": {
          "type": "string",
          "description": "OPTIONAL, if identical to the scope requested by the client;\notherwise, REQUIRED. The scope of the access token.\nrepeated string scope = 5 [ json_name = \"scope\" ];\nREQUIRED if the \"state\" parameter was present in the client\nauthorization request. The exact value received from the client."
        }
      },
      "title": "OAuth 2.0 Access Token Response compatible"
    },
    "api.Claim": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "api.Classes.UpdateClassBody": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "title": "TO BE REMOVED // bound to session.domain.id"
        },
        "class": {
          "type": "object",
          "properties": {
            "class": {
              "type": "string",
              "title": "(class::object).name"
            },
            "abac": {
              "type": "boolean",
              "title": "[a]ttribute-[b]ased [a]ccess [c]ontrol"
            },
            "obac": {
              "type": "boolean",
              "title": "[o]peration-[b]ased [a]ccess [c]ontrol (from::collection.dal)"
            },
            "rbac": {
              "type": "boolean",
              "title": "[r]ecord-[b]ased [a]ccess [c]ontrol (from::resource.acl)"
            }
          }
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "PATCH: partial update"
        }
      }
    },
    "api.CreateDeviceResponse": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/api.Device"
        }
      }
    },
    "api.CreateDomainRequest": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/api.Organization"
        },
        "superuser": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "title": "POST /domains"
    },
    "api.CreateDomainResponse": {
      "type": "object"
    },
    "api.CreateRoleRequest": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/api.Role",
          "title": "entity to be created"
        },
        "copy_id": {
          "type": "string",
          "format": "int64",
          "title": "----- Query parameters -----\nOptional. Source role unique identifier\nto copy access (+default) control list from"
        }
      }
    },
    "api.CreateRoleResponse": {
      "type": "object",
      "properties": {
        "created": {
          "$ref": "#/definitions/api.Role",
          "title": "entity to be created"
        }
      }
    },
    "api.CreateUserRequest": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/api.User",
          "title": "user entity to be created"
        },
        "user_password": {
          "type": "string",
          "title": "cleartext passphrase"
        },
        "confirm_password": {
          "type": "string",
          "title": "cleartext passphrase"
        }
      }
    },
    "api.CreateUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/api.User"
        }
      }
    },
    "api.Customer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "serial number assigned (global::Customer-ID)"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "local created ms",
          "title": "string version = 2; // version\nlocal store details"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "last uploaded ms"
        },
        "revoked_at": {
          "type": "string",
          "format": "int64",
          "title": "local revoked ms"
        },
        "organization": {
          "type": "string",
          "title": "registration name"
        },
        "issued_at": {
          "type": "string",
          "format": "int64",
          "description": "[required] issuer(CA) created at",
          "title": "validity boundaries"
        },
        "not_before": {
          "type": "string",
          "format": "int64",
          "title": "[optional] valid from"
        },
        "not_after": {
          "type": "string",
          "format": "int64",
          "title": "[required] valid till"
        },
        "this_update": {
          "type": "string",
          "format": "int64",
          "description": "[optional]: issuer(CA) signed at",
          "title": "signature validity"
        },
        "next_update": {
          "type": "string",
          "format": "int64",
          "title": "[optional]: signature expires; update required after"
        },
        "verify": {
          "$ref": "#/definitions/api.Verification",
          "description": "[optional] validation results",
          "title": "Verification status"
        },
        "limit": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "description": "defines map[class]limit usage",
          "title": "extensions granted"
        },
        "license": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.LicenseV1"
          },
          "description": "grants issued",
          "title": "int32 competitive = 13; // zero-based competitive sessions limit ?"
        },
        "dnsrv": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.ObjectId"
          },
          "title": "[optional] domains"
        }
      }
    },
    "api.DeleteDeviceResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.Device"
          }
        }
      }
    },
    "api.DeleteDomainResponse": {
      "type": "object"
    },
    "api.DeleteLDAPRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "catalog id"
        },
        "related_objects": {
          "type": "boolean",
          "title": "WITH objects bound to ?"
        }
      }
    },
    "api.DeleteOAuthServiceRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "permanent": {
          "type": "boolean"
        }
      }
    },
    "api.DeleteOAuthServiceResponse": {
      "type": "object"
    },
    "api.DeleteRoleResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "$ref": "#/definitions/api.Role"
        }
      }
    },
    "api.DeleteUsersResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.User"
          }
        }
      }
    },
    "api.Device": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "object id"
        },
        "name": {
          "type": "string",
          "description": "display name",
          "title": "kind of\nDeviceType type = 19;"
        },
        "account": {
          "type": "string",
          "description": "username",
          "title": "credentials"
        },
        "password": {
          "type": "string",
          "title": "password"
        },
        "user": {
          "$ref": "#/definitions/api.UserId",
          "title": "[optional] The user that 'owns' the device;"
        },
        "logged_in": {
          "type": "string",
          "format": "int64",
          "title": "caller profile\n webitel.adt.caller caller = 4;"
        },
        "hotdesk": {
          "type": "boolean",
          "description": "act as a hotdesk",
          "title": "Hotdesk: this workstation aliases"
        },
        "hotdesks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "associated aliases"
        },
        "provision": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "provision extra data"
        },
        "brand": {
          "type": "string",
          "description": "vendor brand name",
          "title": "provision"
        },
        "model": {
          "type": "string"
        },
        "mac": {
          "type": "string",
          "title": "static"
        },
        "ip": {
          "type": "string"
        },
        "reged": {
          "type": "boolean",
          "title": "TODO: something like PresenceStatus instead of Registration\n repeated Registration contacts = 16;"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "created_by": {
          "$ref": "#/definitions/api.UserId",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/api.UserId",
          "title": "user"
        },
        "deleted_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "deleted_by": {
          "$ref": "#/definitions/api.UserId",
          "title": "user"
        }
      },
      "title": "Device profile"
    },
    "api.DeviceAudit": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/api.UserId",
          "title": "/devices/:id/audit related"
        },
        "device": {
          "$ref": "#/definitions/api.DeviceId",
          "title": "/users/:id/audit related"
        },
        "hotdesk": {
          "type": "string"
        },
        "logged_in": {
          "type": "string",
          "format": "int64"
        },
        "logged_out": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "Device login audit"
    },
    "api.DeviceAuditResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "search: limit {size}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.DeviceAudit"
          },
          "title": "audit_logs"
        }
      }
    },
    "api.DeviceId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Object ID"
        },
        "name": {
          "type": "string",
          "title": "Display Name"
        }
      },
      "title": "DeviceId lookup value"
    },
    "api.Domains.UpdateDomainBody": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "object",
          "properties": {
            "domain": {
              "type": "string",
              "title": "FQDN"
            },
            "organization": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "locality": {
              "type": "string"
            },
            "stateOrProvince": {
              "type": "string"
            },
            "streetAddress": {
              "type": "string"
            },
            "postalCode": {
              "type": "string"
            },
            "postalAddress": {
              "type": "string"
            },
            "telephoneNumber": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "createdAt": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "createdBy": {
              "type": "string",
              "title": "user"
            },
            "updatedAt": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "updatedBy": {
              "type": "string",
              "title": "user"
            }
          }
        }
      },
      "title": "PUT /domain/{domain.dc}"
    },
    "api.GenerateTfaKeysForNecessaryUsersResponse": {
      "type": "object",
      "properties": {
        "affected": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "api.GenerateUserTfaKeyResponse": {
      "type": "object",
      "properties": {
        "totp": {
          "$ref": "#/definitions/api.TfaUrl"
        }
      }
    },
    "api.GetCustomerResponse": {
      "type": "object",
      "properties": {
        "customer": {
          "$ref": "#/definitions/api.Customer"
        }
      }
    },
    "api.GetUserTfaKeyResponse": {
      "type": "object",
      "properties": {
        "totp": {
          "$ref": "#/definitions/api.TfaUrl"
        }
      }
    },
    "api.GrantAccessRequestV1": {
      "type": "object",
      "properties": {
        "object": {
          "$ref": "#/definitions/api.ObjectId",
          "title": "string class = 2;\nint64 object = 3; // class.object.id"
        },
        "grantee": {
          "type": "string",
          "format": "int64",
          "title": "grantee.role.id"
        },
        "grants": {
          "type": "string",
          "title": "repeated string privileges = 5; // [\"SEARCH\",\"MODIFY\",\"DELETE\",\"CREATE\"]\nbool grantable = 6; // WITH GRANT OPTION"
        }
      }
    },
    "api.GrantRoleResponse": {
      "type": "object"
    },
    "api.LDAP.CreateLDAPTemplateBody": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "ID unique"
        },
        "name": {
          "type": "string",
          "title": "Name this template"
        },
        "base_dn": {
          "type": "string",
          "title": "Optional. LDAP Search base entry DN"
        },
        "search": {
          "type": "string",
          "title": "Required. LDAP Search filter string"
        },
        "catalog": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "display name"
            }
          },
          "title": "LDAPCatalog belongs to"
        },
        "enabled": {
          "type": "boolean",
          "title": "Optional. This Template is activated ?"
        },
        "role": {
          "type": "object",
          "title": "OPTIONAL. Role objclass fields mapping (Not implemented yet)"
        },
        "device": {
          "type": "object",
          "title": "OPTIONAL. Device objclass fields mapping"
        },
        "user": {
          "type": "object",
          "title": "OPTIONAL. User objclass fields mapping"
        },
        "agent": {
          "type": "object",
          "title": "OPTIONAL. Agent objclass fields mapping"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "unix",
          "title": "READONLY. Operational attributes"
        },
        "created_by": {
          "$ref": "#/definitions/api.UserId",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/api.UserId",
          "title": "user"
        }
      },
      "title": "LDAPTemplate is an LDAP search entries to webitel objects transformation template"
    },
    "api.LDAP.DeleteLDAPTemplateBody": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "default: 1",
          "title": "----- Select Options -------------------------"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "default: 16"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "attributes list"
        },
        "sort": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;"
        },
        "id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "title": "----- Search Basic Filters ---------------------------\nOPTIONAL. Search templates by .id"
        },
        "q": {
          "type": "string",
          "title": "OPTIONAL. Filter(s) SET"
        },
        "name": {
          "type": "string"
        },
        "base_dn": {
          "type": "string"
        },
        "objclass": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        }
      }
    },
    "api.LDAP.LDAPSearchBody": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]",
          "title": "Optional. URL to establish connection to LDAP catalog"
        },
        "tls": {
          "$ref": "#/definitions/api.LDAPSearchRequest.TLSConfig"
        },
        "bind": {
          "type": "string",
          "description": "authorization method e.g.: SIMPLE, SAML, NTLM, etc.",
          "title": "----- BIND: Authorization -----"
        },
        "username": {
          "type": "string",
          "title": "bind_dn"
        },
        "password": {
          "type": "string",
          "title": "password"
        },
        "baseObject": {
          "type": "string",
          "title": "----- SearchRequest -----\nbaseObject [D]istinguished[N]ame"
        },
        "scope": {
          "type": "integer",
          "format": "int32",
          "title": "baseObject              (0),\nsingleLevel             (1),\nwholeSubtree            (2)"
        },
        "derefAliases": {
          "type": "integer",
          "format": "int32",
          "title": "neverDerefAliases       (0),\nderefInSearching        (1),\nderefFindingBaseObj     (2),\nderefAlways             (3)"
        },
        "sizeLimit": {
          "type": "string",
          "format": "int64",
          "title": "INTEGER (0 ..  maxInt),"
        },
        "timeLimit": {
          "type": "string",
          "format": "int64",
          "title": "INTEGER (0 ..  maxInt),"
        },
        "typesOnly": {
          "type": "boolean",
          "title": "BOOLEAN,"
        },
        "filter": {
          "type": "string",
          "title": "Filter,"
        },
        "attributes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "AttributeSelection"
        },
        "controls": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.LDAPControl"
          },
          "title": "----- LDAPMessage -----\nControls NOT implemented yet !"
        }
      },
      "title": "https://datatracker.ietf.org/doc/html/rfc4511#section-4.5.1"
    },
    "api.LDAP.ResyncLDAPCatalogBody": {
      "type": "object",
      "properties": {
        "options": {
          "$ref": "#/definitions/api.LDAProcessOptions",
          "title": "Options"
        }
      }
    },
    "api.LDAP.UpdateLDAPCatalogBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Fields for partial update. PATCH"
        },
        "catalog": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "Meaningfull title name"
            },
            "url": {
              "type": "string",
              "description": "URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]",
              "title": "----- Connection Options -----"
            },
            "tls": {
              "$ref": "#/definitions/api.LDAPCatalog.TLSConfig"
            },
            "bind": {
              "type": "string",
              "description": "authorization method e.g.: SIMPLE, SAML, NTLM, etc.",
              "title": "----- BIND: Authorization -----"
            },
            "base_dn": {
              "type": "string",
              "title": "base_dn, aka domain e.g.: 'dc=example,dc=org'"
            },
            "username": {
              "type": "string",
              "title": "bind_dn"
            },
            "password": {
              "type": "string",
              "title": "password"
            },
            "cron": {
              "type": "string",
              "description": "[CRON]OS SPEC ! github.com/robfig/cron/v3",
              "title": "----- RSYNC Processing -----\nint32  priority = 4;"
            },
            "sync": {
              "$ref": "#/definitions/api.LDAProcessOptions"
            },
            "entry_uuid": {
              "type": "string",
              "description": "entry unique id (except DN which may be updated)",
              "title": "----- DOMAIN: Entry model -----"
            },
            "entry_modify": {
              "type": "string",
              "title": "last modification timestamp attribute type"
            },
            "templates": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/api.LDAPTemplate"
              },
              "title": "// // ----- MAP: user(s) settings -----\nLDAPUsersMap users = 26; // DEPRECATED: Use Template(s) instead\nSYNC Object's search and mappings"
            },
            "process": {
              "$ref": "#/definitions/api.LDAProcess",
              "title": "Last OR Current SYNC process details"
            },
            "created_at": {
              "type": "string",
              "format": "int64",
              "description": "unix",
              "title": "basic: last operation details"
            },
            "created_by": {
              "$ref": "#/definitions/api.UserId",
              "title": "user"
            },
            "updated_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "updated_by": {
              "$ref": "#/definitions/api.UserId",
              "title": "user"
            }
          },
          "description": "LDAP Catalog changes.",
          "title": "LDAP Catalog changes."
        }
      }
    },
    "api.LDAP.UpdateLDAPTemplateBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "OPTIONAL. Fields for partial update. PATCH"
        },
        "template": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "Name this template"
            },
            "base_dn": {
              "type": "string",
              "title": "Optional. LDAP Search base entry DN"
            },
            "search": {
              "type": "string",
              "title": "Required. LDAP Search filter string"
            },
            "catalog": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "title": "display name"
                }
              },
              "title": "LDAPCatalog belongs to"
            },
            "enabled": {
              "type": "boolean",
              "title": "Optional. This Template is activated ?"
            },
            "role": {
              "type": "object",
              "title": "OPTIONAL. Role objclass fields mapping (Not implemented yet)"
            },
            "device": {
              "type": "object",
              "title": "OPTIONAL. Device objclass fields mapping"
            },
            "user": {
              "type": "object",
              "title": "OPTIONAL. User objclass fields mapping"
            },
            "agent": {
              "type": "object",
              "title": "OPTIONAL. Agent objclass fields mapping"
            },
            "created_at": {
              "type": "string",
              "format": "int64",
              "description": "unix",
              "title": "READONLY. Operational attributes"
            },
            "created_by": {
              "$ref": "#/definitions/api.UserId",
              "title": "user"
            },
            "updated_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "updated_by": {
              "$ref": "#/definitions/api.UserId",
              "title": "user"
            }
          },
          "description": "Template changes.",
          "title": "Template changes."
        }
      }
    },
    "api.LDAPCatalog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "identity\nint64 dc = 1;"
        },
        "name": {
          "type": "string",
          "title": "Meaningfull title name"
        },
        "url": {
          "type": "string",
          "description": "URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]",
          "title": "----- Connection Options -----"
        },
        "tls": {
          "$ref": "#/definitions/api.LDAPCatalog.TLSConfig"
        },
        "bind": {
          "type": "string",
          "description": "authorization method e.g.: SIMPLE, SAML, NTLM, etc.",
          "title": "----- BIND: Authorization -----"
        },
        "base_dn": {
          "type": "string",
          "title": "base_dn, aka domain e.g.: 'dc=example,dc=org'"
        },
        "username": {
          "type": "string",
          "title": "bind_dn"
        },
        "password": {
          "type": "string",
          "title": "password"
        },
        "cron": {
          "type": "string",
          "description": "[CRON]OS SPEC ! github.com/robfig/cron/v3",
          "title": "----- RSYNC Processing -----\nint32  priority = 4;"
        },
        "sync": {
          "$ref": "#/definitions/api.LDAProcessOptions"
        },
        "entry_uuid": {
          "type": "string",
          "description": "entry unique id (except DN which may be updated)",
          "title": "----- DOMAIN: Entry model -----"
        },
        "entry_modify": {
          "type": "string",
          "title": "last modification timestamp attribute type"
        },
        "templates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.LDAPTemplate"
          },
          "title": "// // ----- MAP: user(s) settings -----\nLDAPUsersMap users = 26; // DEPRECATED: Use Template(s) instead\nSYNC Object's search and mappings"
        },
        "process": {
          "$ref": "#/definitions/api.LDAProcess",
          "title": "Last OR Current SYNC process details"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "unix",
          "title": "basic: last operation details"
        },
        "created_by": {
          "$ref": "#/definitions/api.UserId",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/api.UserId",
          "title": "user"
        }
      },
      "title": "LDAPCatalog profile"
    },
    "api.LDAPCatalog.TLSConfig": {
      "type": "object",
      "properties": {
        "cert": {
          "type": "string",
          "format": "byte",
          "description": "PEM: base64",
          "title": "TODO: (!)"
        },
        "key": {
          "type": "string",
          "format": "byte",
          "title": "PEM: base64"
        },
        "ca": {
          "type": "string",
          "format": "byte",
          "title": "PEM: base64"
        }
      },
      "title": "TLS configuration options"
    },
    "api.LDAPControl": {
      "type": "object",
      "properties": {
        "controlType": {
          "type": "string",
          "title": "LDAPOID,"
        },
        "criticality": {
          "type": "boolean",
          "title": "BOOLEAN DEFAULT FALSE,"
        },
        "controlValue": {
          "type": "string",
          "title": "OCTET STRING OPTIONAL"
        }
      },
      "title": "https://datatracker.ietf.org/doc/html/rfc4511#section-4.1.11"
    },
    "api.LDAPObjentry": {
      "type": "object",
      "properties": {
        "entry": {
          "type": "object",
          "description": "map\u003cstring, string\u003e entry = 1;",
          "title": "LDAP Entry Attributes fetched"
        },
        "class": {
          "type": "string",
          "title": "Internal object class been associated with this LDAP .entry"
        },
        "object": {
          "type": "object",
          "title": "Internal object state; DUMP"
        },
        "proc": {
          "type": "string",
          "title": "Operation been performed: create|update|delete"
        },
        "warn": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "An error(s) if any occured\nNON-FATAL Warnings"
        },
        "errs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "FATAL Error(s). NON empty indicates that this process failed"
        }
      },
      "title": "LDAP entry object associatetions performed"
    },
    "api.LDAPSearchRequest": {
      "type": "object",
      "properties": {
        "catalog_id": {
          "type": "string",
          "format": "int64",
          "title": "----- connection -----\nOptional. ID of the preconfigured LDAP catalog"
        },
        "url": {
          "type": "string",
          "description": "URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]",
          "title": "Optional. URL to establish connection to LDAP catalog"
        },
        "tls": {
          "$ref": "#/definitions/api.LDAPSearchRequest.TLSConfig"
        },
        "bind": {
          "type": "string",
          "description": "authorization method e.g.: SIMPLE, SAML, NTLM, etc.",
          "title": "----- BIND: Authorization -----"
        },
        "username": {
          "type": "string",
          "title": "bind_dn"
        },
        "password": {
          "type": "string",
          "title": "password"
        },
        "baseObject": {
          "type": "string",
          "title": "----- SearchRequest -----\nbaseObject [D]istinguished[N]ame"
        },
        "scope": {
          "type": "integer",
          "format": "int32",
          "title": "baseObject              (0),\nsingleLevel             (1),\nwholeSubtree            (2)"
        },
        "derefAliases": {
          "type": "integer",
          "format": "int32",
          "title": "neverDerefAliases       (0),\nderefInSearching        (1),\nderefFindingBaseObj     (2),\nderefAlways             (3)"
        },
        "sizeLimit": {
          "type": "string",
          "format": "int64",
          "title": "INTEGER (0 ..  maxInt),"
        },
        "timeLimit": {
          "type": "string",
          "format": "int64",
          "title": "INTEGER (0 ..  maxInt),"
        },
        "typesOnly": {
          "type": "boolean",
          "title": "BOOLEAN,"
        },
        "filter": {
          "type": "string",
          "title": "Filter,"
        },
        "attributes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "AttributeSelection"
        },
        "controls": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.LDAPControl"
          },
          "title": "----- LDAPMessage -----\nControls NOT implemented yet !"
        }
      },
      "title": "https://datatracker.ietf.org/doc/html/rfc4511#section-4.5.1"
    },
    "api.LDAPSearchRequest.TLSConfig": {
      "type": "object",
      "properties": {
        "PEM": {
          "type": "string",
          "format": "byte",
          "description": "base64",
          "title": "TODO: (!)"
        }
      },
      "title": "TLS configuration options"
    },
    "api.LDAPSearchResponse": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "title": "----- SearchResult (Entry|Reference) -----"
        },
        "resultCode": {
          "type": "integer",
          "format": "int32",
          "title": "----- LDAPResult -----"
        },
        "matchedDN": {
          "type": "string",
          "title": "LDAPDN,"
        },
        "diagnosticMessage": {
          "type": "string",
          "title": "LDAPString,"
        },
        "referral": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "[3] Referral OPTIONAL"
        },
        "controls": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.LDAPControl"
          },
          "title": "----- LDAPMessage -----"
        }
      },
      "title": "https://datatracker.ietf.org/doc/html/rfc4511#section-4.5.2"
    },
    "api.LDAPTemplate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "ID unique"
        },
        "name": {
          "type": "string",
          "title": "Name this template"
        },
        "base_dn": {
          "type": "string",
          "title": "Optional. LDAP Search base entry DN"
        },
        "search": {
          "type": "string",
          "title": "Required. LDAP Search filter string"
        },
        "catalog": {
          "$ref": "#/definitions/api.ObjectId",
          "title": "LDAPCatalog belongs to"
        },
        "enabled": {
          "type": "boolean",
          "title": "Optional. This Template is activated ?"
        },
        "role": {
          "type": "object",
          "title": "OPTIONAL. Role objclass fields mapping (Not implemented yet)"
        },
        "device": {
          "type": "object",
          "title": "OPTIONAL. Device objclass fields mapping"
        },
        "user": {
          "type": "object",
          "title": "OPTIONAL. User objclass fields mapping"
        },
        "agent": {
          "type": "object",
          "title": "OPTIONAL. Agent objclass fields mapping"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "unix",
          "title": "READONLY. Operational attributes"
        },
        "created_by": {
          "$ref": "#/definitions/api.UserId",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/api.UserId",
          "title": "user"
        }
      },
      "title": "LDAPTemplate is an LDAP search entries to webitel objects transformation template"
    },
    "api.LDAPTemplateResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "result: {page} number"
        },
        "next": {
          "type": "boolean",
          "title": "result: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.LDAPTemplate"
          }
        }
      }
    },
    "api.LDAProcess": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Readonly. Process unique identifier"
        },
        "options": {
          "$ref": "#/definitions/api.LDAProcessOptions",
          "title": "Readonly. Executed with options"
        },
        "execute_at": {
          "type": "string",
          "format": "int64",
          "title": "Readonly. Process start timestamp"
        },
        "execute_by": {
          "$ref": "#/definitions/api.RoleId",
          "title": "Optional. Start manually by the user or role"
        },
        "complete_at": {
          "type": "string",
          "format": "int64",
          "description": "Optional. If not \u003czero\u003e indicates that this process is completed."
        },
        "status": {
          "type": "string",
          "title": "Optional. Status description or an error if any occured"
        },
        "progress": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.LDAPObjentry"
          },
          "title": "Optional. List of entries been already processed"
        }
      },
      "title": "LDAP synchronization process details"
    },
    "api.LDAProcessOptions": {
      "type": "object",
      "properties": {
        "link_existing_objects": {
          "type": "boolean",
          "title": "Allows to create links\nwith fetched LDAP entries\nfor manually created objects"
        },
        "reassign_device_users": {
          "type": "boolean",
          "title": "Allows to reassign device's owner user\ndue to preconfigured mapping LDAP template"
        },
        "timeout": {
          "type": "string",
          "format": "int64",
          "title": "Operation timeout. Not implemented yet"
        },
        "test": {
          "type": "boolean",
          "title": "Will NOT perform any operations on storage.\nTo review potential processing only"
        }
      }
    },
    "api.LDAProcessResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "result: {page} number"
        },
        "next": {
          "type": "boolean",
          "title": "result: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.LDAProcess"
          }
        }
      }
    },
    "api.LicenseUsageResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "this page number !",
          "title": "----- Result paging ----- //"
        },
        "next": {
          "type": "boolean",
          "title": "next page exists ? more results ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.LicenseV1"
          },
          "title": "size = (.next ? len(items) : undef (\u003e len(size)))\n----- Result entries ----- //"
        }
      }
    },
    "api.LicenseUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "license.id"
        },
        "prod": {
          "type": "string",
          "title": "license.prod"
        },
        "user": {
          "$ref": "#/definitions/api.ObjectId",
          "title": "grant to::user"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "setof objclass grants"
        },
        "issued_at": {
          "type": "string",
          "format": "int64",
          "title": "not before"
        },
        "expires_at": {
          "type": "string",
          "format": "int64",
          "title": "not after"
        }
      },
      "title": "USAGE details"
    },
    "api.LicenseUsersResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "this page number !",
          "title": "----- Result paging ----- //"
        },
        "next": {
          "type": "boolean",
          "title": "next page exists ? more results ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.ProductUser"
          },
          "title": "size = (.next ? len(items) : undef (\u003e len(size)))\n----- Result entries ----- //"
        }
      }
    },
    "api.LicenseV1": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "serial number assigned (global::License-ID)"
        },
        "not_before": {
          "type": "string",
          "format": "int64",
          "title": "optional"
        },
        "not_after": {
          "type": "string",
          "format": "int64",
          "title": "optional"
        },
        "product": {
          "type": "string",
          "title": "product name, e.g.: DEVICE, MANAGER, OPERATOR"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "list of known classes, \u0026this product grants mandatory access to, e.g.: 'users', 'roles', 'cc_agent', 'calendars', ..."
        },
        "competitive": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "title": "required: limit count (maximum allowed usage quantity)"
        },
        "remain": {
          "type": "integer",
          "format": "int32",
          "description": "available",
          "title": "operational attributes ...\nremain = limit - len(users)"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.LicenseUser"
          },
          "title": "users.id (grantees)"
        },
        "status": {
          "$ref": "#/definitions/api.Verification"
        }
      }
    },
    "api.ListAccessResponseV1": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "region: paged result control response value"
        },
        "next": {
          "type": "boolean",
          "title": "indicate partial response: ( next || page \u003e 1 ? partial : full )"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.AccessRule"
          },
          "title": "endregion"
        }
      }
    },
    "api.ListRegistrationsResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "search: limit {size}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.Registration"
          },
          "title": "registered"
        }
      }
    },
    "api.LoginResponse": {
      "type": "object",
      "properties": {
        "authorization": {
          "$ref": "#/definitions/api.AccessToken"
        }
      }
    },
    "api.LogoutUserResponse": {
      "type": "object"
    },
    "api.OAuth2Federation.DeleteOAuthServiceBody": {
      "type": "object",
      "properties": {
        "permanent": {
          "type": "boolean"
        }
      }
    },
    "api.OAuth2Federation.UpdateOAuthServiceBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Fields for partial update. PATCH"
        },
        "changes": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "display"
            },
            "domain": {
              "$ref": "#/definitions/api.ObjectId"
            },
            "type": {
              "type": "string",
              "title": "well-known vendor; provider"
            },
            "logo": {
              "type": "string"
            },
            "scopes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Scopes to be requested"
            },
            "claims": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/api.Claim"
              },
              "description": "google.protobuf.Struct claims = 7;",
              "title": "Identity claims policy rules\nNOTE: Order matters"
            },
            "enabled": {
              "type": "boolean"
            },
            "client_id": {
              "type": "string"
            },
            "client_secret": {
              "type": "string"
            },
            "auth_url": {
              "type": "string",
              "title": "OAuth 2.0 Authorization Endpoint"
            },
            "token_url": {
              "type": "string",
              "title": "OAuth 2.0 Token Endpoint"
            },
            "userinfo_url": {
              "type": "string",
              "title": "OpenID Connect Userinfo Endpoint"
            },
            "discovery_url": {
              "type": "string",
              "title": "OpenID Connect Service Discovery"
            },
            "metadata": {
              "type": "object"
            },
            "created_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "created_by": {
              "$ref": "#/definitions/api.ObjectId",
              "title": "user"
            },
            "updated_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "updated_by": {
              "$ref": "#/definitions/api.ObjectId",
              "title": "user"
            }
          },
          "description": "Configuration changes.",
          "title": "Configuration changes."
        }
      }
    },
    "api.OAuthService": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "title": "display"
        },
        "domain": {
          "$ref": "#/definitions/api.ObjectId"
        },
        "type": {
          "type": "string",
          "title": "well-known vendor; provider"
        },
        "logo": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Scopes to be requested"
        },
        "claims": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.Claim"
          },
          "description": "google.protobuf.Struct claims = 7;",
          "title": "Identity claims policy rules\nNOTE: Order matters"
        },
        "enabled": {
          "type": "boolean"
        },
        "client_id": {
          "type": "string"
        },
        "client_secret": {
          "type": "string"
        },
        "auth_url": {
          "type": "string",
          "title": "OAuth 2.0 Authorization Endpoint"
        },
        "token_url": {
          "type": "string",
          "title": "OAuth 2.0 Token Endpoint"
        },
        "userinfo_url": {
          "type": "string",
          "title": "OpenID Connect Userinfo Endpoint"
        },
        "discovery_url": {
          "type": "string",
          "title": "OpenID Connect Service Discovery"
        },
        "metadata": {
          "type": "object"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "created_by": {
          "$ref": "#/definitions/api.ObjectId",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/api.ObjectId",
          "title": "user"
        }
      },
      "title": "OAuth 2.0 Authentication [S]ervice [P]rovider Application Configuration"
    },
    "api.Objclass": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "class: object id",
          "title": "Inherit::ObjectClass"
        },
        "name": {
          "type": "string",
          "title": "class: display common name"
        },
        "class": {
          "type": "string",
          "title": "class: alphanumeric code name"
        },
        "abac": {
          "type": "boolean",
          "description": "[A]ttribute-[b]ased;  not implemented; next releases ...",
          "title": "Is [?]-[b]ased [A]ccess [C]ontrol *model enabled ?"
        },
        "obac": {
          "type": "boolean",
          "title": "[O]peration-[b]ased;  Mandatory: control access to object.class (alias: collection, section, etc.)"
        },
        "rbac": {
          "type": "boolean",
          "title": "[R]ecord-[b]ased; Discretionary: control access to object.entry (alias: resource, record, etc.)"
        },
        "access": {
          "type": "string",
          "description": "flags: [ CREATE | SELECT | UPDATE | DELETE ]",
          "title": "Extension: discretionary access control"
        }
      },
      "title": "AccessScope represents authorized access level\nto object class declaration within domain namespace"
    },
    "api.ObjectClass": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "(class::object).id"
        },
        "class": {
          "type": "string",
          "title": "(class::object).name"
        },
        "abac": {
          "type": "boolean",
          "title": "[a]ttribute-[b]ased [a]ccess [c]ontrol"
        },
        "obac": {
          "type": "boolean",
          "title": "[o]peration-[b]ased [a]ccess [c]ontrol (from::collection.dal)"
        },
        "rbac": {
          "type": "boolean",
          "title": "[r]ecord-[b]ased [a]ccess [c]ontrol (from::resource.acl)"
        }
      }
    },
    "api.ObjectId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "identifier"
        },
        "name": {
          "type": "string",
          "title": "display name"
        }
      }
    },
    "api.Organization": {
      "type": "object",
      "properties": {
        "dc": {
          "type": "string",
          "format": "int64",
          "title": "component"
        },
        "domain": {
          "type": "string",
          "title": "FQDN"
        },
        "organization": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "locality": {
          "type": "string"
        },
        "stateOrProvince": {
          "type": "string"
        },
        "streetAddress": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "postalAddress": {
          "type": "string"
        },
        "telephoneNumber": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "createdBy": {
          "type": "string",
          "title": "user"
        },
        "updatedAt": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updatedBy": {
          "type": "string",
          "title": "user"
        }
      }
    },
    "api.Permission": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "[required] e.g.: 'read', 'playback_record_file', ..."
        },
        "name": {
          "type": "string",
          "title": "[optional] e.g.: 'Select Any'"
        },
        "usage": {
          "type": "string",
          "title": "[optional] e.g.: 'Grants permission to select any objects'"
        }
      }
    },
    "api.Presence.SetStatusBody": {
      "type": "object",
      "properties": {
        "publish": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "title": "[optional] set of unique 'active' presentities {dnd,dlg,sip,wss}; assume {offline} if omitted"
            },
            "note": {
              "type": "string",
              "title": "[optional] human readable comment"
            },
            "expires": {
              "type": "integer",
              "format": "int32",
              "title": "[optional] \u003cnote\u003e will be cleaned up after seconds"
            },
            "timestamp": {
              "type": "string",
              "format": "int64",
              "title": "[required] last activity time"
            }
          },
          "description": "BODY: partial modifications",
          "title": "int64 id = 1; // user.id"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "PATCH: partial attributes"
        }
      }
    },
    "api.PresenceStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "[required] tuple unique id; \u003ctrack\u003e",
          "title": "basic:latest"
        },
        "app": {
          "type": "string",
          "title": "[optional] service node identity"
        },
        "status": {
          "type": "string",
          "title": "[optional] unique set of \u003cenum:dnd|call|sip|wss\u003e; assume \u003coffline\u003e if blank; \u003cscope\u003e on request"
        },
        "note": {
          "type": "string",
          "title": "[optional] human readable comment"
        },
        "open": {
          "type": "integer",
          "format": "int32",
          "title": "[optional] positive value signify 'active'"
        },
        "closed": {
          "type": "boolean",
          "title": "[optional] signify \u003cstatus\u003e tuple gone from user's presence; equls to (open == 0)"
        },
        "contact": {
          "type": "string",
          "title": "[optional] communication \u003curl\u003e"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "title": "[optional] importance level of this within presentity's"
        },
        "sequence": {
          "type": "string",
          "format": "int64",
          "title": "[optional] this tuple (document) modifications version"
        },
        "expires": {
          "type": "string",
          "format": "int64",
          "title": "NOTE: \u003cdnd\u003e actualy has no expires until user manualy switch it off"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "[required] opened time"
        },
        "domain_id": {
          "type": "string",
          "format": "int64",
          "title": "[hidden] for cluster purpose"
        },
        "presence": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.PresenceStatus"
          },
          "description": "// FIXME: well-known types ?\r\n repeated Dialog  call = 9;\r\n repeated Sipreg  sip = 9;\r\n repeated Websock wss = 9;",
          "title": "detailed: -registered -tracking tuples"
        }
      },
      "title": "PresenceStatus PUBLISH"
    },
    "api.ProductUser": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/api.ObjectId",
          "title": "grant to::user"
        },
        "domain": {
          "$ref": "#/definitions/api.ObjectId",
          "title": "grant to::domain"
        },
        "issued_at": {
          "type": "string",
          "format": "int64",
          "title": "not before"
        },
        "expires_at": {
          "type": "string",
          "format": "int64",
          "title": "not after"
        },
        "sessions": {
          "type": "integer",
          "format": "int32",
          "title": "User's active sessions count !"
        }
      },
      "title": "ProductUser GRANT details"
    },
    "api.ReadClassResponse": {
      "type": "object",
      "properties": {
        "class": {
          "$ref": "#/definitions/api.ObjectClass"
        }
      }
    },
    "api.ReadDeviceResponse": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/api.Device"
        }
      }
    },
    "api.ReadDomainResponse": {
      "type": "object",
      "properties": {
        "domain": {
          "$ref": "#/definitions/api.Organization"
        }
      }
    },
    "api.ReadRoleResponse": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/api.Role"
        }
      }
    },
    "api.ReadUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/api.User"
        }
      }
    },
    "api.Registration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "user": {
          "$ref": "#/definitions/api.UserId"
        },
        "device": {
          "$ref": "#/definitions/api.DeviceId"
        },
        "callid": {
          "type": "string"
        },
        "socket": {
          "type": "string",
          "title": "registrar: local side (host) e.g.:"
        },
        "contact": {
          "type": "string",
          "title": "binding_uri"
        },
        "received": {
          "type": "string",
          "title": "registrant: remote side (proxy)"
        },
        "instance": {
          "type": "string",
          "title": "?sip.instance= register contact option"
        },
        "user_agent": {
          "type": "string"
        },
        "expires_at": {
          "type": "string",
          "format": "int64"
        },
        "register_at": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "REGISTER SIP status"
    },
    "api.RevokeRoleResponse": {
      "type": "object"
    },
    "api.Role": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "oid"
        },
        "name": {
          "type": "string",
          "title": "display common name"
        },
        "user": {
          "type": "boolean",
          "title": "READONLY. Report whether this Role refers to the internal User(=true) or Group(=false)"
        },
        "description": {
          "type": "string",
          "title": "short description"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.Permission"
          }
        },
        "members": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.ObjectId"
          },
          "description": "users/roles",
          "title": "Caller caller = 4; // TOBE removed !!!\nmap\u003cint64, string\u003e users = 4;"
        },
        "metadata": {
          "type": "object",
          "title": "Optional. Metadata bound to this role by the third party integrations\nEach attribute of this object represents separate various data\nto be able to store and merge separate keys (documents)"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "created_by": {
          "$ref": "#/definitions/api.UserId",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/api.UserId",
          "title": "user"
        },
        "deleted_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "deleted_by": {
          "$ref": "#/definitions/api.UserId",
          "title": "user"
        }
      },
      "title": "Role represents group of users"
    },
    "api.Role.Member": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "user.id"
        },
        "name": {
          "type": "string",
          "title": "user.name"
        },
        "admin": {
          "type": "boolean",
          "title": "admin of the group ?"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "created_by": {
          "type": "string",
          "title": "user.[id|name]"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "type": "string",
          "title": "user"
        }
      }
    },
    "api.RoleId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique Object IDentifier"
        },
        "name": {
          "type": "string",
          "title": "Display Name"
        },
        "user": {
          "type": "boolean",
          "title": "Optional. Indicates that this role ID refers\nto the internal user as the system administrative unit"
        }
      },
      "description": "RoleId lookup value."
    },
    "api.RoleMembersResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.Role.Member"
          }
        }
      }
    },
    "api.RoleMetadataResponse": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "title": "Optional. Partial metadata document key name"
        },
        "value": {
          "title": "Metadata value"
        }
      }
    },
    "api.Roles.UpdateRoleBody": {
      "type": "object",
      "properties": {
        "role": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "display common name"
            },
            "user": {
              "type": "boolean",
              "title": "READONLY. Report whether this Role refers to the internal User(=true) or Group(=false)"
            },
            "description": {
              "type": "string",
              "title": "short description"
            },
            "permissions": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/api.Permission"
              }
            },
            "members": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/api.ObjectId"
              },
              "description": "users/roles",
              "title": "Caller caller = 4; // TOBE removed !!!\nmap\u003cint64, string\u003e users = 4;"
            },
            "metadata": {
              "type": "object",
              "title": "Optional. Metadata bound to this role by the third party integrations\nEach attribute of this object represents separate various data\nto be able to store and merge separate keys (documents)"
            },
            "created_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "created_by": {
              "$ref": "#/definitions/api.UserId",
              "title": "user"
            },
            "updated_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "updated_by": {
              "$ref": "#/definitions/api.UserId",
              "title": "user"
            },
            "deleted_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "deleted_by": {
              "$ref": "#/definitions/api.UserId",
              "title": "user"
            }
          },
          "title": "modifications"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "partial changes"
        }
      }
    },
    "api.SearchClassesResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "search: limit {size}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.ObjectClass"
          },
          "title": "list"
        }
      }
    },
    "api.SearchDeviceResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "search: limit {size}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.Device"
          },
          "title": "devices"
        }
      }
    },
    "api.SearchDomainsResponse": {
      "type": "object",
      "properties": {
        "domains": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.Organization"
          }
        }
      }
    },
    "api.SearchLDAPResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "result: {page} number"
        },
        "next": {
          "type": "boolean",
          "title": "result: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.LDAPCatalog"
          }
        }
      }
    },
    "api.SearchOAuthServiceResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "result: {page} number"
        },
        "next": {
          "type": "boolean",
          "title": "result: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.OAuthService"
          }
        }
      }
    },
    "api.SearchPermissionResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "search: limit {size}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.Permission"
          },
          "title": "result entries"
        }
      }
    },
    "api.SearchRolesResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "select: offset {page}",
          "title": "pagedResultsControl response value"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "search: limit {size}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.Role"
          },
          "title": "roles"
        }
      }
    },
    "api.SearchUsersRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "description": "filter: .id = any({id}...)",
          "title": "----- Base Filters ---------------------------"
        },
        "not_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "title": "filter: .id \u003c\u003e all({not_ids}...)"
        },
        "q": {
          "type": "string",
          "description": "filter: (.name|.username|.extension|.status) ILIKE '{q}'",
          "title": "----- User-specific Filters ------------------"
        },
        "name": {
          "type": "string",
          "title": "filter: .name ILIKE '{name}'"
        },
        "status": {
          "type": "string",
          "title": "filter: .status ILIKE '{status}'"
        },
        "username": {
          "type": "string",
          "title": "filter: .username ILIKE '{username}'"
        },
        "extension": {
          "type": "string",
          "title": "filter: .extension LIKE '{extension}'"
        },
        "any": {
          "type": "boolean",
          "description": "filter: include 'deleted' ALSO ! (inactive)",
          "title": "----- View Modes -----------------------------\nNOTE: by default, search NOT 'deleted' objects ONLY"
        },
        "deleted": {
          "type": "boolean",
          "title": "filter: .deleted_at NOTNULL (view: RECYCLE)"
        },
        "presence": {
          "$ref": "#/definitions/api.SearchUsersRequest.Presence"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "select: output (fields,...)",
          "title": "// navigation filter\nrepeated int64 roles = 7;\n----- Search Options -------------------------"
        },
        "sort": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "select: order by (fields,...)"
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "select: limit {size}"
        }
      }
    },
    "api.SearchUsersRequest.Presence": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "note": {
          "type": "string"
        }
      },
      "title": "simplified presence filter params"
    },
    "api.SearchUsersResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "search: limit {size}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.User"
          },
          "title": "users"
        }
      }
    },
    "api.ServerInfoResponse": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "format": "byte",
          "title": "int64 time = 1; // current timestamp (ms)"
        }
      }
    },
    "api.SetStatusRequest": {
      "type": "object",
      "properties": {
        "publish": {
          "$ref": "#/definitions/api.UserPresence",
          "description": "BODY: partial modifications",
          "title": "int64 id = 1; // user.id"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "PATCH: partial attributes"
        }
      }
    },
    "api.SystemObjects": {
      "type": "string",
      "enum": [
        "contacts",
        "cc_list",
        "cc_bucket",
        "calendars",
        "devices",
        "cc_agent",
        "cc_team",
        "cc_resource",
        "cc_resource_group",
        "cc_queue",
        "roles",
        "users",
        "cognitive_profile"
      ],
      "default": "contacts"
    },
    "api.TfaUrl": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/api.UserId"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "api.ToggleDefaultAccessResponse": {
      "type": "object",
      "properties": {
        "granted": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.AccessRule"
          }
        },
        "revoked": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.AccessRule"
          }
        }
      }
    },
    "api.UpdateAccessResponseV1": {
      "type": "object",
      "properties": {
        "granted": {
          "type": "string",
          "format": "int64",
          "title": "Affected rules count"
        },
        "revoked": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "api.UpdateClassResponse": {
      "type": "object",
      "properties": {
        "class": {
          "$ref": "#/definitions/api.ObjectClass",
          "title": "updated"
        }
      }
    },
    "api.UpdateCustomerResponse": {
      "type": "object",
      "properties": {
        "customer": {
          "$ref": "#/definitions/api.Customer",
          "title": "detailed"
        }
      }
    },
    "api.UpdateDeviceResponse": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/api.Device"
        }
      }
    },
    "api.UpdateDomainResponse": {
      "type": "object",
      "properties": {
        "domain": {
          "$ref": "#/definitions/api.Organization"
        }
      }
    },
    "api.UpdateRoleResponse": {
      "type": "object",
      "properties": {
        "updated": {
          "$ref": "#/definitions/api.Role"
        }
      }
    },
    "api.UpdateUserResponse": {
      "type": "object",
      "properties": {
        "updated": {
          "$ref": "#/definitions/api.User"
        }
      }
    },
    "api.User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Object ID"
        },
        "name": {
          "type": "string",
          "title": "Caller-ID-Name: Display Name"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string",
          "title": "alphanumeric username (login)"
        },
        "password": {
          "type": "string"
        },
        "extension": {
          "type": "string",
          "title": "Caller-ID-Number:"
        },
        "presence": {
          "$ref": "#/definitions/api.UserPresence",
          "description": "string presence = 7; // unique set of \u003cuser\u003e presentity \u003cstatus:basic\u003e tuples open[ed]\n string status = 8; // short display status (short description)",
          "title": "CallerId caller = 5; // extension\nPresenceStatus presence = 8;"
        },
        "device": {
          "$ref": "#/definitions/api.ObjectId",
          "title": "[optional] default device assigned ? WebRTC register ?"
        },
        "devices": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.ObjectId"
          },
          "description": "[editable] list of unique `regular` devices, attached to this user",
          "title": "map\u003cint64, string\u003e devices = 13;"
        },
        "hotdesks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.ObjectId"
          },
          "title": "[readonly] list of unique `hotdesk` devices, assigned to this user"
        },
        "profile": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "list of variables, assigned to this user as an environment unit"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.Permission"
          },
          "title": "set of operational permission grants"
        },
        "license": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.LicenseUser"
          },
          "title": "list of unique licenses, granted to this user"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.ObjectId"
          },
          "title": "roles, member of which is this user"
        },
        "totp_url": {
          "type": "string",
          "title": "[readonly][optional] one time password if setting (2fa) is enabled"
        },
        "contact": {
          "$ref": "#/definitions/api.ObjectId",
          "description": "[optional] contact connected to this user",
          "title": "repeated Call calls = 13; // order by created_at\nrepeated Registration reged = 13; // order by register_last"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "created_by": {
          "$ref": "#/definitions/api.UserId",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/api.UserId",
          "title": "user"
        },
        "deleted_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "deleted_by": {
          "$ref": "#/definitions/api.UserId",
          "title": "user"
        }
      },
      "description": "User profile."
    },
    "api.UserAccessToken": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "tokenKey::token_key"
        },
        "token": {
          "type": "string",
          "title": "tokenString::access_token"
        },
        "usage": {
          "type": "string",
          "title": "[optional] short usage description"
        },
        "user": {
          "$ref": "#/definitions/api.ObjectId",
          "title": "[optional] output depends on API endpoint"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix::ms"
        },
        "created_by": {
          "$ref": "#/definitions/api.ObjectId"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix::ms"
        },
        "updated_by": {
          "$ref": "#/definitions/api.ObjectId"
        },
        "deleted_at": {
          "type": "string",
          "format": "int64",
          "title": "[optional] disabled at"
        },
        "deleted_by": {
          "$ref": "#/definitions/api.ObjectId",
          "title": "[optional] disabled by"
        }
      },
      "description": "UserId lookup value."
    },
    "api.UserAccessTokenList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "string",
          "format": "int64"
        },
        "next": {
          "type": "boolean",
          "title": "is there more results ? next page is available ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.UserAccessToken"
          }
        }
      }
    },
    "api.UserId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Object ID"
        },
        "name": {
          "type": "string",
          "title": "Display Name"
        }
      },
      "description": "UserId lookup value."
    },
    "api.UserPresence": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "[required] user identity"
        },
        "status": {
          "type": "string",
          "title": "[optional] set of unique 'active' presentities {dnd,dlg,sip,wss}; assume {offline} if omitted"
        },
        "note": {
          "type": "string",
          "title": "[optional] human readable comment"
        },
        "expires": {
          "type": "integer",
          "format": "int32",
          "title": "[optional] \u003cnote\u003e will be cleaned up after seconds"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "[required] last activity time"
        }
      }
    },
    "api.UserSetting": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {}
      }
    },
    "api.Userinfo": {
      "type": "object",
      "properties": {
        "dc": {
          "type": "string",
          "format": "int64",
          "title": "current domain component id"
        },
        "domain": {
          "type": "string",
          "title": "session domain.name"
        },
        "user_id": {
          "type": "string",
          "format": "int64",
          "title": "current user.id"
        },
        "name": {
          "type": "string",
          "title": "current user.id"
        },
        "username": {
          "type": "string",
          "title": "session end-user login"
        },
        "preferred_username": {
          "type": "string"
        },
        "extension": {
          "type": "string"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.Objclass"
          },
          "title": "map[class]dac"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.ObjectId"
          },
          "title": "map[role]oid"
        },
        "license": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.LicenseUser"
          },
          "title": "map[key]details"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/api.Permission"
          }
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "user last updated"
        },
        "expires_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        }
      },
      "title": "https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims"
    },
    "api.Users.LogoutUserBody": {
      "type": "object"
    },
    "api.Users.UpdateUserBody": {
      "type": "object",
      "properties": {
        "user": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "Caller-ID-Name: Display Name"
            },
            "email": {
              "type": "string"
            },
            "username": {
              "type": "string",
              "title": "alphanumeric username (login)"
            },
            "password": {
              "type": "string"
            },
            "extension": {
              "type": "string",
              "title": "Caller-ID-Number:"
            },
            "presence": {
              "$ref": "#/definitions/api.UserPresence",
              "description": "string presence = 7; // unique set of \u003cuser\u003e presentity \u003cstatus:basic\u003e tuples open[ed]\n string status = 8; // short display status (short description)",
              "title": "CallerId caller = 5; // extension\nPresenceStatus presence = 8;"
            },
            "device": {
              "$ref": "#/definitions/api.ObjectId",
              "title": "[optional] default device assigned ? WebRTC register ?"
            },
            "devices": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/api.ObjectId"
              },
              "description": "[editable] list of unique `regular` devices, attached to this user",
              "title": "map\u003cint64, string\u003e devices = 13;"
            },
            "hotdesks": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/api.ObjectId"
              },
              "title": "[readonly] list of unique `hotdesk` devices, assigned to this user"
            },
            "profile": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "title": "list of variables, assigned to this user as an environment unit"
            },
            "permissions": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/api.Permission"
              },
              "title": "set of operational permission grants"
            },
            "license": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/api.LicenseUser"
              },
              "title": "list of unique licenses, granted to this user"
            },
            "roles": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/api.ObjectId"
              },
              "title": "roles, member of which is this user"
            },
            "totp_url": {
              "type": "string",
              "title": "[readonly][optional] one time password if setting (2fa) is enabled"
            },
            "contact": {
              "$ref": "#/definitions/api.ObjectId",
              "description": "[optional] contact connected to this user",
              "title": "repeated Call calls = 13; // order by created_at\nrepeated Registration reged = 13; // order by register_last"
            },
            "created_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "created_by": {
              "$ref": "#/definitions/api.UserId",
              "title": "user"
            },
            "updated_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "updated_by": {
              "$ref": "#/definitions/api.UserId",
              "title": "user"
            },
            "deleted_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "deleted_by": {
              "$ref": "#/definitions/api.UserId",
              "title": "user"
            }
          },
          "title": "body: modifications/changes"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "PATCH: partial update"
        }
      }
    },
    "api.Verification": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "invalid"
        },
        "notify": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "non-fatal warnings, e.g.:"
        }
      }
    },
    "google.protobuf.NullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    }
  },
  "securityDefinitions": {
    "AccessToken": {
      "type": "apiKey",
      "name": "X-Webitel-Access",
      "in": "header"
    }
  },
  "security": [
    {
      "AccessToken": []
    }
  ]
}
