syntax = "proto3";

package webitel.chat; 

option go_package = "github.com/webitel/protos/chat/messages";

import "messages/customer.proto";
import "messages/chat.proto";
import "messages/dialog.proto";
import "messages/history.proto";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// Messages service catalog
service Catalog {

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "**Messages** Service"
    name: "Messages"
  };

  // Query of external chat customers
  rpc GetCustomers(ChatCustomersRequest) returns (ChatCustomers) {
    option (google.api.http) = {
      get: "/chat/customers"
    };
  }
  // Query of chat conversations
  rpc GetDialogs(ChatDialogsRequest) returns (ChatDialogs) {
    option (google.api.http) = {
      get: "/chat/dialogs"
    };
  }
  // Query of chat participants
  rpc GetMembers(ChatMembersRequest) returns (ChatMembers) {
    option (google.api.http) = {
      get: "/chat/dialogs/{chat_id}/members"
    };
  }
  // Query of the chat history
  rpc GetHistory(ChatMessagesRequest) returns (ChatMessages) {
    option (google.api.http) = {
      get: "/chat/dialogs/{chat_id}/messages"
      additional_bindings: {
        get: "/chat/{peer.type}/{peer.id}/messages"
      };
    };
  }

  // Query of the chat(peer) updates since last state(offset)
  // REQUIRE: peer, offset.
  // INVALIDATE: search q.
  rpc GetUpdates(ChatMessagesRequest) returns (ChatMessages);
}
