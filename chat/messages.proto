syntax = "proto3";

package webitel.chat.server;

option go_package = "github.com/webitel/protos/chat";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "messages/broadcast.proto";

service MessagesService {

  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "**Messages** Service"
    name: "Messages"
  };

  // Sends a current user action event to a conversation partners.
  rpc SendUserAction(SendUserActionRequest) returns (SendUserActionResponse) {}

  // Broadcast message send message from via to peer recipients.
  rpc BroadcastMessage(webitel.chat.BroadcastMessageRequest) returns (webitel.chat.BroadcastMessageResponse) {
    option (google.api.http) = {
      post: "/chat/broadcast"
      body: "*"
    };
  }

  // Broadcast message send message from via to peer recipients (for internal services).
  rpc BroadcastMessageNA(webitel.chat.BroadcastMessageRequest) returns (webitel.chat.BroadcastMessageResponse) {}
}

// User actions. Use this to provide users with detailed info
// about their chat partner's actions: typing or sending attachments of all kinds.
enum UserAction {
  // User is typing.
  Typing = 0;
  // Invalidate all previous action updates.
  // E.g. when user deletes entered text or aborts a video upload.
  Cancel	= 1;

  reserved 2 to 17;
}

message SendUserActionRequest {
  // [FROM] Sender peer channel id.
  string channel_id = 1;
  // Type of action.
  UserAction action = 2;

  // [TO] partner identification ..
  reserved 3, 4;
}

message SendUserActionResponse {
  // Affected ?
  bool ok = 1;
}
