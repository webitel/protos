// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: audit_form.proto

package engine

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SearchAuditRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int32          `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size      int32          `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Q         string         `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Sort      string         `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Fields    []string       `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	CreatedAt *FilterBetween `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Id        []int32        `protobuf:"varint,7,rep,packed,name=id,proto3" json:"id,omitempty"`
	CallId    []string       `protobuf:"bytes,8,rep,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	FormId    int32          `protobuf:"varint,9,opt,name=form_id,json=formId,proto3" json:"form_id,omitempty"`
	RatedUser []int64        `protobuf:"varint,10,rep,packed,name=rated_user,json=ratedUser,proto3" json:"rated_user,omitempty"`
}

func (x *SearchAuditRateRequest) Reset() {
	*x = SearchAuditRateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_form_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAuditRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAuditRateRequest) ProtoMessage() {}

func (x *SearchAuditRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_form_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAuditRateRequest.ProtoReflect.Descriptor instead.
func (*SearchAuditRateRequest) Descriptor() ([]byte, []int) {
	return file_audit_form_proto_rawDescGZIP(), []int{0}
}

func (x *SearchAuditRateRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchAuditRateRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchAuditRateRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchAuditRateRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *SearchAuditRateRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchAuditRateRequest) GetCreatedAt() *FilterBetween {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SearchAuditRateRequest) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchAuditRateRequest) GetCallId() []string {
	if x != nil {
		return x.CallId
	}
	return nil
}

func (x *SearchAuditRateRequest) GetFormId() int32 {
	if x != nil {
		return x.FormId
	}
	return 0
}

func (x *SearchAuditRateRequest) GetRatedUser() []int64 {
	if x != nil {
		return x.RatedUser
	}
	return nil
}

type ListAuditRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next  bool         `protobuf:"varint,1,opt,name=next,proto3" json:"next,omitempty"`
	Items []*AuditRate `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListAuditRate) Reset() {
	*x = ListAuditRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_form_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuditRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditRate) ProtoMessage() {}

func (x *ListAuditRate) ProtoReflect() protoreflect.Message {
	mi := &file_audit_form_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditRate.ProtoReflect.Descriptor instead.
func (*ListAuditRate) Descriptor() ([]byte, []int) {
	return file_audit_form_proto_rawDescGZIP(), []int{1}
}

func (x *ListAuditRate) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *ListAuditRate) GetItems() []*AuditRate {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateAuditFormRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Form    *Lookup           `protobuf:"bytes,1,opt,name=form,proto3" json:"form,omitempty"`
	Answers []*QuestionAnswer `protobuf:"bytes,2,rep,name=answers,proto3" json:"answers,omitempty"`
	Comment string            `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	CallId  string            `protobuf:"bytes,4,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
}

func (x *CreateAuditFormRateRequest) Reset() {
	*x = CreateAuditFormRateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_form_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAuditFormRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAuditFormRateRequest) ProtoMessage() {}

func (x *CreateAuditFormRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_form_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAuditFormRateRequest.ProtoReflect.Descriptor instead.
func (*CreateAuditFormRateRequest) Descriptor() ([]byte, []int) {
	return file_audit_form_proto_rawDescGZIP(), []int{2}
}

func (x *CreateAuditFormRateRequest) GetForm() *Lookup {
	if x != nil {
		return x.Form
	}
	return nil
}

func (x *CreateAuditFormRateRequest) GetAnswers() []*QuestionAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *CreateAuditFormRateRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *CreateAuditFormRateRequest) GetCallId() string {
	if x != nil {
		return x.CallId
	}
	return ""
}

type ReadAuditRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReadAuditRateRequest) Reset() {
	*x = ReadAuditRateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_form_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadAuditRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAuditRateRequest) ProtoMessage() {}

func (x *ReadAuditRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_form_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAuditRateRequest.ProtoReflect.Descriptor instead.
func (*ReadAuditRateRequest) Descriptor() ([]byte, []int) {
	return file_audit_form_proto_rawDescGZIP(), []int{3}
}

func (x *ReadAuditRateRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type QuestionAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score int32 `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *QuestionAnswer) Reset() {
	*x = QuestionAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_form_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionAnswer) ProtoMessage() {}

func (x *QuestionAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_audit_form_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionAnswer.ProtoReflect.Descriptor instead.
func (*QuestionAnswer) Descriptor() ([]byte, []int) {
	return file_audit_form_proto_rawDescGZIP(), []int{4}
}

func (x *QuestionAnswer) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type AuditRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt     int64             `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy     *Lookup           `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedAt     int64             `protobuf:"varint,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy     *Lookup           `protobuf:"bytes,5,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Form          *Lookup           `protobuf:"bytes,6,opt,name=form,proto3" json:"form,omitempty"`
	Questions     []*Questions      `protobuf:"bytes,7,rep,name=questions,proto3" json:"questions,omitempty"`
	Answers       []*QuestionAnswer `protobuf:"bytes,8,rep,name=answers,proto3" json:"answers,omitempty"`
	ScoreRequired float32           `protobuf:"fixed32,9,opt,name=score_required,json=scoreRequired,proto3" json:"score_required,omitempty"`
	ScoreOptional float32           `protobuf:"fixed32,10,opt,name=score_optional,json=scoreOptional,proto3" json:"score_optional,omitempty"`
	Comment       string            `protobuf:"bytes,11,opt,name=comment,proto3" json:"comment,omitempty"`
	RatedUser     *Lookup           `protobuf:"bytes,12,opt,name=rated_user,json=ratedUser,proto3" json:"rated_user,omitempty"`
}

func (x *AuditRate) Reset() {
	*x = AuditRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_form_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditRate) ProtoMessage() {}

func (x *AuditRate) ProtoReflect() protoreflect.Message {
	mi := &file_audit_form_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditRate.ProtoReflect.Descriptor instead.
func (*AuditRate) Descriptor() ([]byte, []int) {
	return file_audit_form_proto_rawDescGZIP(), []int{5}
}

func (x *AuditRate) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AuditRate) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AuditRate) GetCreatedBy() *Lookup {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *AuditRate) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *AuditRate) GetUpdatedBy() *Lookup {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *AuditRate) GetForm() *Lookup {
	if x != nil {
		return x.Form
	}
	return nil
}

func (x *AuditRate) GetQuestions() []*Questions {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *AuditRate) GetAnswers() []*QuestionAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *AuditRate) GetScoreRequired() float32 {
	if x != nil {
		return x.ScoreRequired
	}
	return 0
}

func (x *AuditRate) GetScoreOptional() float32 {
	if x != nil {
		return x.ScoreOptional
	}
	return 0
}

func (x *AuditRate) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AuditRate) GetRatedUser() *Lookup {
	if x != nil {
		return x.RatedUser
	}
	return nil
}

type QuestionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Required bool                      `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	Question string                    `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	Options  []*QuestionOptions_Option `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *QuestionOptions) Reset() {
	*x = QuestionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_form_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionOptions) ProtoMessage() {}

func (x *QuestionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_audit_form_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionOptions.ProtoReflect.Descriptor instead.
func (*QuestionOptions) Descriptor() ([]byte, []int) {
	return file_audit_form_proto_rawDescGZIP(), []int{6}
}

func (x *QuestionOptions) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *QuestionOptions) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *QuestionOptions) GetOptions() []*QuestionOptions_Option {
	if x != nil {
		return x.Options
	}
	return nil
}

type QuestionScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Required bool   `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	Question string `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	Min      int32  `protobuf:"varint,3,opt,name=min,proto3" json:"min,omitempty"`
	Max      int32  `protobuf:"varint,4,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *QuestionScore) Reset() {
	*x = QuestionScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_form_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionScore) ProtoMessage() {}

func (x *QuestionScore) ProtoReflect() protoreflect.Message {
	mi := &file_audit_form_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionScore.ProtoReflect.Descriptor instead.
func (*QuestionScore) Descriptor() ([]byte, []int) {
	return file_audit_form_proto_rawDescGZIP(), []int{7}
}

func (x *QuestionScore) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *QuestionScore) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *QuestionScore) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *QuestionScore) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type Questions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to To:
	//	*Questions_Option
	//	*Questions_Score
	To isQuestions_To `protobuf_oneof:"to"`
}

func (x *Questions) Reset() {
	*x = Questions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_form_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Questions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Questions) ProtoMessage() {}

func (x *Questions) ProtoReflect() protoreflect.Message {
	mi := &file_audit_form_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Questions.ProtoReflect.Descriptor instead.
func (*Questions) Descriptor() ([]byte, []int) {
	return file_audit_form_proto_rawDescGZIP(), []int{8}
}

func (m *Questions) GetTo() isQuestions_To {
	if m != nil {
		return m.To
	}
	return nil
}

func (x *Questions) GetOption() *QuestionOptions {
	if x, ok := x.GetTo().(*Questions_Option); ok {
		return x.Option
	}
	return nil
}

func (x *Questions) GetScore() *QuestionScore {
	if x, ok := x.GetTo().(*Questions_Score); ok {
		return x.Score
	}
	return nil
}

type isQuestions_To interface {
	isQuestions_To()
}

type Questions_Option struct {
	Option *QuestionOptions `protobuf:"bytes,1,opt,name=option,proto3,oneof"`
}

type Questions_Score struct {
	Score *QuestionScore `protobuf:"bytes,2,opt,name=score,proto3,oneof"`
}

func (*Questions_Option) isQuestions_To() {}

func (*Questions_Score) isQuestions_To() {}

type PatchAuditFormRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Fields      []string     `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	Name        string       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string       `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Enabled     bool         `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Questions   []*Questions `protobuf:"bytes,6,rep,name=questions,proto3" json:"questions,omitempty"`
	Teams       []*Lookup    `protobuf:"bytes,7,rep,name=teams,proto3" json:"teams,omitempty"`
	Archive     bool         `protobuf:"varint,8,opt,name=archive,proto3" json:"archive,omitempty"`
}

func (x *PatchAuditFormRequest) Reset() {
	*x = PatchAuditFormRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_form_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchAuditFormRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchAuditFormRequest) ProtoMessage() {}

func (x *PatchAuditFormRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_form_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchAuditFormRequest.ProtoReflect.Descriptor instead.
func (*PatchAuditFormRequest) Descriptor() ([]byte, []int) {
	return file_audit_form_proto_rawDescGZIP(), []int{9}
}

func (x *PatchAuditFormRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PatchAuditFormRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PatchAuditFormRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchAuditFormRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PatchAuditFormRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *PatchAuditFormRequest) GetQuestions() []*Questions {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *PatchAuditFormRequest) GetTeams() []*Lookup {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *PatchAuditFormRequest) GetArchive() bool {
	if x != nil {
		return x.Archive
	}
	return false
}

type DeleteAuditFormRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAuditFormRequest) Reset() {
	*x = DeleteAuditFormRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_form_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAuditFormRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAuditFormRequest) ProtoMessage() {}

func (x *DeleteAuditFormRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_form_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAuditFormRequest.ProtoReflect.Descriptor instead.
func (*DeleteAuditFormRequest) Descriptor() ([]byte, []int) {
	return file_audit_form_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteAuditFormRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateAuditFormRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string       `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Enabled     bool         `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Questions   []*Questions `protobuf:"bytes,5,rep,name=questions,proto3" json:"questions,omitempty"`
	Teams       []*Lookup    `protobuf:"bytes,6,rep,name=teams,proto3" json:"teams,omitempty"`
	Archive     bool         `protobuf:"varint,7,opt,name=archive,proto3" json:"archive,omitempty"`
}

func (x *UpdateAuditFormRequest) Reset() {
	*x = UpdateAuditFormRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_form_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAuditFormRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAuditFormRequest) ProtoMessage() {}

func (x *UpdateAuditFormRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_form_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAuditFormRequest.ProtoReflect.Descriptor instead.
func (*UpdateAuditFormRequest) Descriptor() ([]byte, []int) {
	return file_audit_form_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateAuditFormRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateAuditFormRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAuditFormRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateAuditFormRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *UpdateAuditFormRequest) GetQuestions() []*Questions {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *UpdateAuditFormRequest) GetTeams() []*Lookup {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *UpdateAuditFormRequest) GetArchive() bool {
	if x != nil {
		return x.Archive
	}
	return false
}

type ReadAuditFormRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReadAuditFormRequest) Reset() {
	*x = ReadAuditFormRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_form_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadAuditFormRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadAuditFormRequest) ProtoMessage() {}

func (x *ReadAuditFormRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_form_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadAuditFormRequest.ProtoReflect.Descriptor instead.
func (*ReadAuditFormRequest) Descriptor() ([]byte, []int) {
	return file_audit_form_proto_rawDescGZIP(), []int{12}
}

func (x *ReadAuditFormRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CreateAuditFormRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string       `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Enabled     bool         `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Questions   []*Questions `protobuf:"bytes,4,rep,name=questions,proto3" json:"questions,omitempty"`
	Teams       []*Lookup    `protobuf:"bytes,5,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *CreateAuditFormRequest) Reset() {
	*x = CreateAuditFormRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_form_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAuditFormRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAuditFormRequest) ProtoMessage() {}

func (x *CreateAuditFormRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_form_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAuditFormRequest.ProtoReflect.Descriptor instead.
func (*CreateAuditFormRequest) Descriptor() ([]byte, []int) {
	return file_audit_form_proto_rawDescGZIP(), []int{13}
}

func (x *CreateAuditFormRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAuditFormRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateAuditFormRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CreateAuditFormRequest) GetQuestions() []*Questions {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *CreateAuditFormRequest) GetTeams() []*Lookup {
	if x != nil {
		return x.Teams
	}
	return nil
}

type AuditForm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt   int64        `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy   *Lookup      `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedAt   int64        `protobuf:"varint,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy   *Lookup      `protobuf:"bytes,5,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Name        string       `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Description string       `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Enabled     bool         `protobuf:"varint,8,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Questions   []*Questions `protobuf:"bytes,9,rep,name=questions,proto3" json:"questions,omitempty"`
	Teams       []*Lookup    `protobuf:"bytes,10,rep,name=teams,proto3" json:"teams,omitempty"`
	Archive     bool         `protobuf:"varint,11,opt,name=archive,proto3" json:"archive,omitempty"`
	Editable    bool         `protobuf:"varint,12,opt,name=editable,proto3" json:"editable,omitempty"`
}

func (x *AuditForm) Reset() {
	*x = AuditForm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_form_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditForm) ProtoMessage() {}

func (x *AuditForm) ProtoReflect() protoreflect.Message {
	mi := &file_audit_form_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditForm.ProtoReflect.Descriptor instead.
func (*AuditForm) Descriptor() ([]byte, []int) {
	return file_audit_form_proto_rawDescGZIP(), []int{14}
}

func (x *AuditForm) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AuditForm) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AuditForm) GetCreatedBy() *Lookup {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *AuditForm) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *AuditForm) GetUpdatedBy() *Lookup {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *AuditForm) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AuditForm) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AuditForm) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AuditForm) GetQuestions() []*Questions {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *AuditForm) GetTeams() []*Lookup {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *AuditForm) GetArchive() bool {
	if x != nil {
		return x.Archive
	}
	return false
}

func (x *AuditForm) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

type SearchAuditFormRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size     int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Q        string   `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Sort     string   `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Fields   []string `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	Id       []int32  `protobuf:"varint,6,rep,packed,name=id,proto3" json:"id,omitempty"`
	TeamId   []int32  `protobuf:"varint,7,rep,packed,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Enabled  bool     `protobuf:"varint,8,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Archive  bool     `protobuf:"varint,9,opt,name=archive,proto3" json:"archive,omitempty"`
	Editable bool     `protobuf:"varint,10,opt,name=editable,proto3" json:"editable,omitempty"`
}

func (x *SearchAuditFormRequest) Reset() {
	*x = SearchAuditFormRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_form_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAuditFormRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAuditFormRequest) ProtoMessage() {}

func (x *SearchAuditFormRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audit_form_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAuditFormRequest.ProtoReflect.Descriptor instead.
func (*SearchAuditFormRequest) Descriptor() ([]byte, []int) {
	return file_audit_form_proto_rawDescGZIP(), []int{15}
}

func (x *SearchAuditFormRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchAuditFormRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchAuditFormRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchAuditFormRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *SearchAuditFormRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchAuditFormRequest) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchAuditFormRequest) GetTeamId() []int32 {
	if x != nil {
		return x.TeamId
	}
	return nil
}

func (x *SearchAuditFormRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SearchAuditFormRequest) GetArchive() bool {
	if x != nil {
		return x.Archive
	}
	return false
}

func (x *SearchAuditFormRequest) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

type ListAuditForm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next  bool         `protobuf:"varint,1,opt,name=next,proto3" json:"next,omitempty"`
	Items []*AuditForm `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListAuditForm) Reset() {
	*x = ListAuditForm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_form_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuditForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditForm) ProtoMessage() {}

func (x *ListAuditForm) ProtoReflect() protoreflect.Message {
	mi := &file_audit_form_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditForm.ProtoReflect.Descriptor instead.
func (*ListAuditForm) Descriptor() ([]byte, []int) {
	return file_audit_form_proto_rawDescGZIP(), []int{16}
}

func (x *ListAuditForm) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *ListAuditForm) GetItems() []*AuditForm {
	if x != nil {
		return x.Items
	}
	return nil
}

type QuestionOptions_Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Score int32  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *QuestionOptions_Option) Reset() {
	*x = QuestionOptions_Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_audit_form_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionOptions_Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionOptions_Option) ProtoMessage() {}

func (x *QuestionOptions_Option) ProtoReflect() protoreflect.Message {
	mi := &file_audit_form_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionOptions_Option.ProtoReflect.Descriptor instead.
func (*QuestionOptions_Option) Descriptor() ([]byte, []int) {
	return file_audit_form_proto_rawDescGZIP(), []int{6, 0}
}

func (x *QuestionOptions_Option) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QuestionOptions_Option) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

var File_audit_form_proto protoreflect.FileDescriptor

var file_audit_form_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x1a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x02, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x22, 0x4c, 0x0a, 0x0d, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x27,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x22,
	0x26, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0xd5, 0x03, 0x0a, 0x09, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2f, 0x0a,
	0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30,
	0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x32, 0x0a,
	0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0x6b, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x73,
	0x0a, 0x09, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x04, 0x0a,
	0x02, 0x74, 0x6f, 0x22, 0x80, 0x02, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xe9, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x05,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0x26, 0x0a, 0x14,
	0x52, 0x65, 0x61, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x2f, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x24, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x94, 0x03, 0x0a, 0x09, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x2f, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xf3, 0x01,
	0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0x4c, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x32, 0xf2, 0x07, 0x0a, 0x10, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x22, 0x23, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0x6a, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x22, 0x20, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x67, 0x0a,
	0x0d, 0x52, 0x65, 0x61, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x1c,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x22,
	0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6e, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x22, 0x28, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x1a, 0x1d, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x6c, 0x0a, 0x0e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x1d, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x22, 0x32, 0x1d, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x6b, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x70, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x72, 0x61, 0x74, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x79, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x22, 0x2f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x2f,
	0x7b, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x12, 0x66,
	0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x72, 0x61, 0x74,
	0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_audit_form_proto_rawDescOnce sync.Once
	file_audit_form_proto_rawDescData = file_audit_form_proto_rawDesc
)

func file_audit_form_proto_rawDescGZIP() []byte {
	file_audit_form_proto_rawDescOnce.Do(func() {
		file_audit_form_proto_rawDescData = protoimpl.X.CompressGZIP(file_audit_form_proto_rawDescData)
	})
	return file_audit_form_proto_rawDescData
}

var file_audit_form_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_audit_form_proto_goTypes = []interface{}{
	(*SearchAuditRateRequest)(nil),     // 0: engine.SearchAuditRateRequest
	(*ListAuditRate)(nil),              // 1: engine.ListAuditRate
	(*CreateAuditFormRateRequest)(nil), // 2: engine.CreateAuditFormRateRequest
	(*ReadAuditRateRequest)(nil),       // 3: engine.ReadAuditRateRequest
	(*QuestionAnswer)(nil),             // 4: engine.QuestionAnswer
	(*AuditRate)(nil),                  // 5: engine.AuditRate
	(*QuestionOptions)(nil),            // 6: engine.QuestionOptions
	(*QuestionScore)(nil),              // 7: engine.QuestionScore
	(*Questions)(nil),                  // 8: engine.Questions
	(*PatchAuditFormRequest)(nil),      // 9: engine.PatchAuditFormRequest
	(*DeleteAuditFormRequest)(nil),     // 10: engine.DeleteAuditFormRequest
	(*UpdateAuditFormRequest)(nil),     // 11: engine.UpdateAuditFormRequest
	(*ReadAuditFormRequest)(nil),       // 12: engine.ReadAuditFormRequest
	(*CreateAuditFormRequest)(nil),     // 13: engine.CreateAuditFormRequest
	(*AuditForm)(nil),                  // 14: engine.AuditForm
	(*SearchAuditFormRequest)(nil),     // 15: engine.SearchAuditFormRequest
	(*ListAuditForm)(nil),              // 16: engine.ListAuditForm
	(*QuestionOptions_Option)(nil),     // 17: engine.QuestionOptions.Option
	(*FilterBetween)(nil),              // 18: engine.FilterBetween
	(*Lookup)(nil),                     // 19: engine.Lookup
}
var file_audit_form_proto_depIdxs = []int32{
	18, // 0: engine.SearchAuditRateRequest.created_at:type_name -> engine.FilterBetween
	5,  // 1: engine.ListAuditRate.items:type_name -> engine.AuditRate
	19, // 2: engine.CreateAuditFormRateRequest.form:type_name -> engine.Lookup
	4,  // 3: engine.CreateAuditFormRateRequest.answers:type_name -> engine.QuestionAnswer
	19, // 4: engine.AuditRate.created_by:type_name -> engine.Lookup
	19, // 5: engine.AuditRate.updated_by:type_name -> engine.Lookup
	19, // 6: engine.AuditRate.form:type_name -> engine.Lookup
	8,  // 7: engine.AuditRate.questions:type_name -> engine.Questions
	4,  // 8: engine.AuditRate.answers:type_name -> engine.QuestionAnswer
	19, // 9: engine.AuditRate.rated_user:type_name -> engine.Lookup
	17, // 10: engine.QuestionOptions.options:type_name -> engine.QuestionOptions.Option
	6,  // 11: engine.Questions.option:type_name -> engine.QuestionOptions
	7,  // 12: engine.Questions.score:type_name -> engine.QuestionScore
	8,  // 13: engine.PatchAuditFormRequest.questions:type_name -> engine.Questions
	19, // 14: engine.PatchAuditFormRequest.teams:type_name -> engine.Lookup
	8,  // 15: engine.UpdateAuditFormRequest.questions:type_name -> engine.Questions
	19, // 16: engine.UpdateAuditFormRequest.teams:type_name -> engine.Lookup
	8,  // 17: engine.CreateAuditFormRequest.questions:type_name -> engine.Questions
	19, // 18: engine.CreateAuditFormRequest.teams:type_name -> engine.Lookup
	19, // 19: engine.AuditForm.created_by:type_name -> engine.Lookup
	19, // 20: engine.AuditForm.updated_by:type_name -> engine.Lookup
	8,  // 21: engine.AuditForm.questions:type_name -> engine.Questions
	19, // 22: engine.AuditForm.teams:type_name -> engine.Lookup
	14, // 23: engine.ListAuditForm.items:type_name -> engine.AuditForm
	13, // 24: engine.AuditFormService.CreateAuditForm:input_type -> engine.CreateAuditFormRequest
	15, // 25: engine.AuditFormService.SearchAuditForm:input_type -> engine.SearchAuditFormRequest
	12, // 26: engine.AuditFormService.ReadAuditForm:input_type -> engine.ReadAuditFormRequest
	11, // 27: engine.AuditFormService.UpdateAuditForm:input_type -> engine.UpdateAuditFormRequest
	9,  // 28: engine.AuditFormService.PatchAuditForm:input_type -> engine.PatchAuditFormRequest
	10, // 29: engine.AuditFormService.DeleteAuditForm:input_type -> engine.DeleteAuditFormRequest
	2,  // 30: engine.AuditFormService.CreateAuditFormRate:input_type -> engine.CreateAuditFormRateRequest
	0,  // 31: engine.AuditFormService.SearchAuditRate:input_type -> engine.SearchAuditRateRequest
	3,  // 32: engine.AuditFormService.ReadAuditRate:input_type -> engine.ReadAuditRateRequest
	14, // 33: engine.AuditFormService.CreateAuditForm:output_type -> engine.AuditForm
	16, // 34: engine.AuditFormService.SearchAuditForm:output_type -> engine.ListAuditForm
	14, // 35: engine.AuditFormService.ReadAuditForm:output_type -> engine.AuditForm
	14, // 36: engine.AuditFormService.UpdateAuditForm:output_type -> engine.AuditForm
	14, // 37: engine.AuditFormService.PatchAuditForm:output_type -> engine.AuditForm
	14, // 38: engine.AuditFormService.DeleteAuditForm:output_type -> engine.AuditForm
	5,  // 39: engine.AuditFormService.CreateAuditFormRate:output_type -> engine.AuditRate
	1,  // 40: engine.AuditFormService.SearchAuditRate:output_type -> engine.ListAuditRate
	5,  // 41: engine.AuditFormService.ReadAuditRate:output_type -> engine.AuditRate
	33, // [33:42] is the sub-list for method output_type
	24, // [24:33] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_audit_form_proto_init() }
func file_audit_form_proto_init() {
	if File_audit_form_proto != nil {
		return
	}
	file_const_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_audit_form_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAuditRateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_form_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuditRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_form_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAuditFormRateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_form_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadAuditRateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_form_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_form_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_form_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_form_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_form_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Questions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_form_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchAuditFormRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_form_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAuditFormRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_form_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAuditFormRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_form_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadAuditFormRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_form_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAuditFormRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_form_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditForm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_form_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAuditFormRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_form_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuditForm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_audit_form_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionOptions_Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_audit_form_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Questions_Option)(nil),
		(*Questions_Score)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_audit_form_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_audit_form_proto_goTypes,
		DependencyIndexes: file_audit_form_proto_depIdxs,
		MessageInfos:      file_audit_form_proto_msgTypes,
	}.Build()
	File_audit_form_proto = out.File
	file_audit_form_proto_rawDesc = nil
	file_audit_form_proto_goTypes = nil
	file_audit_form_proto_depIdxs = nil
}
