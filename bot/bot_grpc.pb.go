// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: bot.proto

package bot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BotsClient is the client API for Bots service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BotsClient interface {
	// SendMessage [FROM] bot's profile [TO] external client communication
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// Create new bot profile
	CreateBot(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error)
	// Select returns a single bot profile by unique identifier
	SelectBot(ctx context.Context, in *SelectBotRequest, opts ...grpc.CallOption) (*Bot, error)
	// Update single bot
	UpdateBot(ctx context.Context, in *UpdateBotRequest, opts ...grpc.CallOption) (*Bot, error)
	// Delete bot(s) selection
	DeleteBot(ctx context.Context, in *SearchBotRequest, opts ...grpc.CallOption) (*SearchBotResponse, error)
	// Search returns list of bots, posibly filtered out with search conditions
	SearchBot(ctx context.Context, in *SearchBotRequest, opts ...grpc.CallOption) (*SearchBotResponse, error)
}

type botsClient struct {
	cc grpc.ClientConnInterface
}

func NewBotsClient(cc grpc.ClientConnInterface) BotsClient {
	return &botsClient{cc}
}

func (c *botsClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/webitel.chat.bot.Bots/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botsClient) CreateBot(ctx context.Context, in *Bot, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := c.cc.Invoke(ctx, "/webitel.chat.bot.Bots/CreateBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botsClient) SelectBot(ctx context.Context, in *SelectBotRequest, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := c.cc.Invoke(ctx, "/webitel.chat.bot.Bots/SelectBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botsClient) UpdateBot(ctx context.Context, in *UpdateBotRequest, opts ...grpc.CallOption) (*Bot, error) {
	out := new(Bot)
	err := c.cc.Invoke(ctx, "/webitel.chat.bot.Bots/UpdateBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botsClient) DeleteBot(ctx context.Context, in *SearchBotRequest, opts ...grpc.CallOption) (*SearchBotResponse, error) {
	out := new(SearchBotResponse)
	err := c.cc.Invoke(ctx, "/webitel.chat.bot.Bots/DeleteBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botsClient) SearchBot(ctx context.Context, in *SearchBotRequest, opts ...grpc.CallOption) (*SearchBotResponse, error) {
	out := new(SearchBotResponse)
	err := c.cc.Invoke(ctx, "/webitel.chat.bot.Bots/SearchBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotsServer is the server API for Bots service.
// All implementations must embed UnimplementedBotsServer
// for forward compatibility
type BotsServer interface {
	// SendMessage [FROM] bot's profile [TO] external client communication
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	// Create new bot profile
	CreateBot(context.Context, *Bot) (*Bot, error)
	// Select returns a single bot profile by unique identifier
	SelectBot(context.Context, *SelectBotRequest) (*Bot, error)
	// Update single bot
	UpdateBot(context.Context, *UpdateBotRequest) (*Bot, error)
	// Delete bot(s) selection
	DeleteBot(context.Context, *SearchBotRequest) (*SearchBotResponse, error)
	// Search returns list of bots, posibly filtered out with search conditions
	SearchBot(context.Context, *SearchBotRequest) (*SearchBotResponse, error)
	mustEmbedUnimplementedBotsServer()
}

// UnimplementedBotsServer must be embedded to have forward compatible implementations.
type UnimplementedBotsServer struct {
}

func (UnimplementedBotsServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedBotsServer) CreateBot(context.Context, *Bot) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBot not implemented")
}
func (UnimplementedBotsServer) SelectBot(context.Context, *SelectBotRequest) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectBot not implemented")
}
func (UnimplementedBotsServer) UpdateBot(context.Context, *UpdateBotRequest) (*Bot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBot not implemented")
}
func (UnimplementedBotsServer) DeleteBot(context.Context, *SearchBotRequest) (*SearchBotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBot not implemented")
}
func (UnimplementedBotsServer) SearchBot(context.Context, *SearchBotRequest) (*SearchBotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBot not implemented")
}
func (UnimplementedBotsServer) mustEmbedUnimplementedBotsServer() {}

// UnsafeBotsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BotsServer will
// result in compilation errors.
type UnsafeBotsServer interface {
	mustEmbedUnimplementedBotsServer()
}

func RegisterBotsServer(s grpc.ServiceRegistrar, srv BotsServer) {
	s.RegisterService(&Bots_ServiceDesc, srv)
}

func _Bots_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotsServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webitel.chat.bot.Bots/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotsServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bots_CreateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotsServer).CreateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webitel.chat.bot.Bots/CreateBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotsServer).CreateBot(ctx, req.(*Bot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bots_SelectBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotsServer).SelectBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webitel.chat.bot.Bots/SelectBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotsServer).SelectBot(ctx, req.(*SelectBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bots_UpdateBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotsServer).UpdateBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webitel.chat.bot.Bots/UpdateBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotsServer).UpdateBot(ctx, req.(*UpdateBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bots_DeleteBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotsServer).DeleteBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webitel.chat.bot.Bots/DeleteBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotsServer).DeleteBot(ctx, req.(*SearchBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bots_SearchBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotsServer).SearchBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webitel.chat.bot.Bots/SearchBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotsServer).SearchBot(ctx, req.(*SearchBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bots_ServiceDesc is the grpc.ServiceDesc for Bots service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bots_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.chat.bot.Bots",
	HandlerType: (*BotsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _Bots_SendMessage_Handler,
		},
		{
			MethodName: "CreateBot",
			Handler:    _Bots_CreateBot_Handler,
		},
		{
			MethodName: "SelectBot",
			Handler:    _Bots_SelectBot_Handler,
		},
		{
			MethodName: "UpdateBot",
			Handler:    _Bots_UpdateBot_Handler,
		},
		{
			MethodName: "DeleteBot",
			Handler:    _Bots_DeleteBot_Handler,
		},
		{
			MethodName: "SearchBot",
			Handler:    _Bots_SearchBot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bot.proto",
}
