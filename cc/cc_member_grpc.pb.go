// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.0
// source: cc_member.proto

package cc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MemberServiceClient is the client API for MemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberServiceClient interface {
	AttemptResult(ctx context.Context, in *AttemptResultRequest, opts ...grpc.CallOption) (*AttemptResultResponse, error)
	AttemptRenewalResult(ctx context.Context, in *AttemptRenewalResultRequest, opts ...grpc.CallOption) (*AttemptRenewalResultResponse, error)
	CallJoinToQueue(ctx context.Context, in *CallJoinToQueueRequest, opts ...grpc.CallOption) (MemberService_CallJoinToQueueClient, error)
	ChatJoinToQueue(ctx context.Context, in *ChatJoinToQueueRequest, opts ...grpc.CallOption) (MemberService_ChatJoinToQueueClient, error)
	CallJoinToAgent(ctx context.Context, in *CallJoinToAgentRequest, opts ...grpc.CallOption) (MemberService_CallJoinToAgentClient, error)
	CancelAgentDistribute(ctx context.Context, in *CancelAgentDistributeRequest, opts ...grpc.CallOption) (*CancelAgentDistributeResponse, error)
	EmailJoinToQueue(ctx context.Context, in *EmailJoinToQueueRequest, opts ...grpc.CallOption) (*EmailJoinToQueueResponse, error)
	DirectAgentToMember(ctx context.Context, in *DirectAgentToMemberRequest, opts ...grpc.CallOption) (*DirectAgentToMemberResponse, error)
	ProcessingFormAction(ctx context.Context, in *ProcessingFormActionRequest, opts ...grpc.CallOption) (*ProcessingFormActionResponse, error)
}

type memberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberServiceClient(cc grpc.ClientConnInterface) MemberServiceClient {
	return &memberServiceClient{cc}
}

func (c *memberServiceClient) AttemptResult(ctx context.Context, in *AttemptResultRequest, opts ...grpc.CallOption) (*AttemptResultResponse, error) {
	out := new(AttemptResultResponse)
	err := c.cc.Invoke(ctx, "/cc.MemberService/AttemptResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AttemptRenewalResult(ctx context.Context, in *AttemptRenewalResultRequest, opts ...grpc.CallOption) (*AttemptRenewalResultResponse, error) {
	out := new(AttemptRenewalResultResponse)
	err := c.cc.Invoke(ctx, "/cc.MemberService/AttemptRenewalResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CallJoinToQueue(ctx context.Context, in *CallJoinToQueueRequest, opts ...grpc.CallOption) (MemberService_CallJoinToQueueClient, error) {
	stream, err := c.cc.NewStream(ctx, &MemberService_ServiceDesc.Streams[0], "/cc.MemberService/CallJoinToQueue", opts...)
	if err != nil {
		return nil, err
	}
	x := &memberServiceCallJoinToQueueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MemberService_CallJoinToQueueClient interface {
	Recv() (*QueueEvent, error)
	grpc.ClientStream
}

type memberServiceCallJoinToQueueClient struct {
	grpc.ClientStream
}

func (x *memberServiceCallJoinToQueueClient) Recv() (*QueueEvent, error) {
	m := new(QueueEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *memberServiceClient) ChatJoinToQueue(ctx context.Context, in *ChatJoinToQueueRequest, opts ...grpc.CallOption) (MemberService_ChatJoinToQueueClient, error) {
	stream, err := c.cc.NewStream(ctx, &MemberService_ServiceDesc.Streams[1], "/cc.MemberService/ChatJoinToQueue", opts...)
	if err != nil {
		return nil, err
	}
	x := &memberServiceChatJoinToQueueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MemberService_ChatJoinToQueueClient interface {
	Recv() (*QueueEvent, error)
	grpc.ClientStream
}

type memberServiceChatJoinToQueueClient struct {
	grpc.ClientStream
}

func (x *memberServiceChatJoinToQueueClient) Recv() (*QueueEvent, error) {
	m := new(QueueEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *memberServiceClient) CallJoinToAgent(ctx context.Context, in *CallJoinToAgentRequest, opts ...grpc.CallOption) (MemberService_CallJoinToAgentClient, error) {
	stream, err := c.cc.NewStream(ctx, &MemberService_ServiceDesc.Streams[2], "/cc.MemberService/CallJoinToAgent", opts...)
	if err != nil {
		return nil, err
	}
	x := &memberServiceCallJoinToAgentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MemberService_CallJoinToAgentClient interface {
	Recv() (*QueueEvent, error)
	grpc.ClientStream
}

type memberServiceCallJoinToAgentClient struct {
	grpc.ClientStream
}

func (x *memberServiceCallJoinToAgentClient) Recv() (*QueueEvent, error) {
	m := new(QueueEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *memberServiceClient) CancelAgentDistribute(ctx context.Context, in *CancelAgentDistributeRequest, opts ...grpc.CallOption) (*CancelAgentDistributeResponse, error) {
	out := new(CancelAgentDistributeResponse)
	err := c.cc.Invoke(ctx, "/cc.MemberService/CancelAgentDistribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) EmailJoinToQueue(ctx context.Context, in *EmailJoinToQueueRequest, opts ...grpc.CallOption) (*EmailJoinToQueueResponse, error) {
	out := new(EmailJoinToQueueResponse)
	err := c.cc.Invoke(ctx, "/cc.MemberService/EmailJoinToQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) DirectAgentToMember(ctx context.Context, in *DirectAgentToMemberRequest, opts ...grpc.CallOption) (*DirectAgentToMemberResponse, error) {
	out := new(DirectAgentToMemberResponse)
	err := c.cc.Invoke(ctx, "/cc.MemberService/DirectAgentToMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ProcessingFormAction(ctx context.Context, in *ProcessingFormActionRequest, opts ...grpc.CallOption) (*ProcessingFormActionResponse, error) {
	out := new(ProcessingFormActionResponse)
	err := c.cc.Invoke(ctx, "/cc.MemberService/ProcessingFormAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberServiceServer is the server API for MemberService service.
// All implementations must embed UnimplementedMemberServiceServer
// for forward compatibility
type MemberServiceServer interface {
	AttemptResult(context.Context, *AttemptResultRequest) (*AttemptResultResponse, error)
	AttemptRenewalResult(context.Context, *AttemptRenewalResultRequest) (*AttemptRenewalResultResponse, error)
	CallJoinToQueue(*CallJoinToQueueRequest, MemberService_CallJoinToQueueServer) error
	ChatJoinToQueue(*ChatJoinToQueueRequest, MemberService_ChatJoinToQueueServer) error
	CallJoinToAgent(*CallJoinToAgentRequest, MemberService_CallJoinToAgentServer) error
	CancelAgentDistribute(context.Context, *CancelAgentDistributeRequest) (*CancelAgentDistributeResponse, error)
	EmailJoinToQueue(context.Context, *EmailJoinToQueueRequest) (*EmailJoinToQueueResponse, error)
	DirectAgentToMember(context.Context, *DirectAgentToMemberRequest) (*DirectAgentToMemberResponse, error)
	ProcessingFormAction(context.Context, *ProcessingFormActionRequest) (*ProcessingFormActionResponse, error)
	mustEmbedUnimplementedMemberServiceServer()
}

// UnimplementedMemberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberServiceServer struct {
}

func (UnimplementedMemberServiceServer) AttemptResult(context.Context, *AttemptResultRequest) (*AttemptResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttemptResult not implemented")
}
func (UnimplementedMemberServiceServer) AttemptRenewalResult(context.Context, *AttemptRenewalResultRequest) (*AttemptRenewalResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttemptRenewalResult not implemented")
}
func (UnimplementedMemberServiceServer) CallJoinToQueue(*CallJoinToQueueRequest, MemberService_CallJoinToQueueServer) error {
	return status.Errorf(codes.Unimplemented, "method CallJoinToQueue not implemented")
}
func (UnimplementedMemberServiceServer) ChatJoinToQueue(*ChatJoinToQueueRequest, MemberService_ChatJoinToQueueServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatJoinToQueue not implemented")
}
func (UnimplementedMemberServiceServer) CallJoinToAgent(*CallJoinToAgentRequest, MemberService_CallJoinToAgentServer) error {
	return status.Errorf(codes.Unimplemented, "method CallJoinToAgent not implemented")
}
func (UnimplementedMemberServiceServer) CancelAgentDistribute(context.Context, *CancelAgentDistributeRequest) (*CancelAgentDistributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAgentDistribute not implemented")
}
func (UnimplementedMemberServiceServer) EmailJoinToQueue(context.Context, *EmailJoinToQueueRequest) (*EmailJoinToQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailJoinToQueue not implemented")
}
func (UnimplementedMemberServiceServer) DirectAgentToMember(context.Context, *DirectAgentToMemberRequest) (*DirectAgentToMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectAgentToMember not implemented")
}
func (UnimplementedMemberServiceServer) ProcessingFormAction(context.Context, *ProcessingFormActionRequest) (*ProcessingFormActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessingFormAction not implemented")
}
func (UnimplementedMemberServiceServer) mustEmbedUnimplementedMemberServiceServer() {}

// UnsafeMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberServiceServer will
// result in compilation errors.
type UnsafeMemberServiceServer interface {
	mustEmbedUnimplementedMemberServiceServer()
}

func RegisterMemberServiceServer(s grpc.ServiceRegistrar, srv MemberServiceServer) {
	s.RegisterService(&MemberService_ServiceDesc, srv)
}

func _MemberService_AttemptResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttemptResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AttemptResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cc.MemberService/AttemptResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AttemptResult(ctx, req.(*AttemptResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AttemptRenewalResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttemptRenewalResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AttemptRenewalResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cc.MemberService/AttemptRenewalResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AttemptRenewalResult(ctx, req.(*AttemptRenewalResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CallJoinToQueue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CallJoinToQueueRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MemberServiceServer).CallJoinToQueue(m, &memberServiceCallJoinToQueueServer{stream})
}

type MemberService_CallJoinToQueueServer interface {
	Send(*QueueEvent) error
	grpc.ServerStream
}

type memberServiceCallJoinToQueueServer struct {
	grpc.ServerStream
}

func (x *memberServiceCallJoinToQueueServer) Send(m *QueueEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _MemberService_ChatJoinToQueue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatJoinToQueueRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MemberServiceServer).ChatJoinToQueue(m, &memberServiceChatJoinToQueueServer{stream})
}

type MemberService_ChatJoinToQueueServer interface {
	Send(*QueueEvent) error
	grpc.ServerStream
}

type memberServiceChatJoinToQueueServer struct {
	grpc.ServerStream
}

func (x *memberServiceChatJoinToQueueServer) Send(m *QueueEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _MemberService_CallJoinToAgent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CallJoinToAgentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MemberServiceServer).CallJoinToAgent(m, &memberServiceCallJoinToAgentServer{stream})
}

type MemberService_CallJoinToAgentServer interface {
	Send(*QueueEvent) error
	grpc.ServerStream
}

type memberServiceCallJoinToAgentServer struct {
	grpc.ServerStream
}

func (x *memberServiceCallJoinToAgentServer) Send(m *QueueEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _MemberService_CancelAgentDistribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAgentDistributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CancelAgentDistribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cc.MemberService/CancelAgentDistribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CancelAgentDistribute(ctx, req.(*CancelAgentDistributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_EmailJoinToQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailJoinToQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).EmailJoinToQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cc.MemberService/EmailJoinToQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).EmailJoinToQueue(ctx, req.(*EmailJoinToQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_DirectAgentToMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectAgentToMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).DirectAgentToMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cc.MemberService/DirectAgentToMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).DirectAgentToMember(ctx, req.(*DirectAgentToMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ProcessingFormAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessingFormActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ProcessingFormAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cc.MemberService/ProcessingFormAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ProcessingFormAction(ctx, req.(*ProcessingFormActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberService_ServiceDesc is the grpc.ServiceDesc for MemberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cc.MemberService",
	HandlerType: (*MemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AttemptResult",
			Handler:    _MemberService_AttemptResult_Handler,
		},
		{
			MethodName: "AttemptRenewalResult",
			Handler:    _MemberService_AttemptRenewalResult_Handler,
		},
		{
			MethodName: "CancelAgentDistribute",
			Handler:    _MemberService_CancelAgentDistribute_Handler,
		},
		{
			MethodName: "EmailJoinToQueue",
			Handler:    _MemberService_EmailJoinToQueue_Handler,
		},
		{
			MethodName: "DirectAgentToMember",
			Handler:    _MemberService_DirectAgentToMember_Handler,
		},
		{
			MethodName: "ProcessingFormAction",
			Handler:    _MemberService_ProcessingFormAction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CallJoinToQueue",
			Handler:       _MemberService_CallJoinToQueue_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ChatJoinToQueue",
			Handler:       _MemberService_ChatJoinToQueue_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CallJoinToAgent",
			Handler:       _MemberService_CallJoinToAgent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cc_member.proto",
}
