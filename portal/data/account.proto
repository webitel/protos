syntax = "proto3";
package webitel.portal;
option go_package = "webitel.go/api/portal;portal";

import "data/block.proto";
import "data/lookup.proto";

import "google/protobuf/struct.proto";

// Subject source identification
message SourceId {
  // REQUIRED. Issuer Identifier for the Issuer of the response.
  // The iss value is a case sensitive URL using the https scheme that contains scheme, host,
  // and optionally, port number and path components and no query or fragment components.
  string iss = 1;
  // REQUIRED. Subject Identifier.
  // A locally unique and never reassigned identifier within the Issuer for the End-User,
  // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.
  // It MUST NOT exceed 255 ASCII characters in length.
  // The sub value is a case sensitive string.
  string sub = 2;
}

// Identity of the End-User at the Issuer.
// https://openid.net/specs/openid-connect-core-1_0.html#Claims
message Identity {
  // REQUIRED. Issuer Identifier for the Issuer of the response.
  // The iss value is a case sensitive URL using the https scheme that contains scheme, host,
  // and optionally, port number and path components and no query or fragment components.
  string iss = 1;
  // REQUIRED. Subject Identifier.
  // A locally unique and never reassigned identifier within the Issuer for the End-User,
  // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.
  // It MUST NOT exceed 255 ASCII characters in length.
  // The sub value is a case sensitive string.
  string sub = 2;
  // REQUIRED. End-User's full name in displayable form including all name parts,
  // possibly including titles and suffixes, ordered according to the End-User's locale and preferences.
  string name = 3;
  // Given name(s) or first name(s) of the End-User.
  // Note that in some cultures, people can have multiple given names;
  // all can be present, with the names being separated by space characters.
  string given_name = 4;
  // Surname(s) or last name(s) of the End-User.
  // Note that in some cultures, people can have multiple family names or no family name;
  // all can be present, with the names being separated by space characters.
  string family_name = 5;
  // Middle name(s) of the End-User.
  // Note that in some cultures, people can have multiple middle names;
  // all can be present, with the names being separated by space characters.
  // Also note that in some cultures, middle names are not used.
  string middle_name = 6;
  // OPTIONAL. End-User's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format.
  // The year MAY be 0000, indicating that it is omitted.
  // To represent only the year, YYYY format is allowed.
  string birthdate = 7;
  // OPTIONAL. String from zoneinfo [zoneinfo] time zone database representing the End-User's time zone.
  // For example, Europe/Kyiv or America/Los_Angeles.
  string zoneinfo = 8;
  // OPTIONAL. URL of the End-User's profile page.
  // The contents of this Web page SHOULD be about the End-User.
  // NOTE: Issuer SP (IdP) related URL.
  string profile = 9;
  // OPTIONAL. URL of the End-User's profile picture.
  // This URL MUST refer to an image file
  // (for example, a PNG, JPEG, or GIF image file),
  // rather than to a Web page containing an image.
  string picture = 10;
  // OPTIONAL. End-User's gender.
  // Values defined by this specification are `female` and `male`.
  // Other values MAY be used when neither of the defined values are applicable.
  string gender = 11;
  // End-User's locale, represented as a BCP47 [RFC5646] language tag.
  // This is typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase
  // and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase,
  // separated by a dash. For example, `en-US` or `uk-UA`.
  string locale = 12;
  // End-User's preferred e-mail address.
  // Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax.
  // The RP MUST NOT rely upon this value being unique, as discussed in Section 5.7.
  string email = 13;
  // True if the End-User's e-mail address has been verified; otherwise false.
  bool email_verified = 14;
  // End-User's preferred telephone number.
  // E.164 is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400.
  // If the phone number contains an extension, it is RECOMMENDED that
  // the extension be represented using the RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678.
  string phone_number = 15;
  // True if the End-User's phone number has been verified; otherwise false.
  bool phone_number_verified = 16;

  // End-User's extra attributes metadata.
  google.protobuf.Struct metadata = 21;

  // Additional source(s) associated with given "identity".
  // Used to merge two or more well-known end-user subjects.
  repeated SourceId sources = 25;

  // Time the End-User's information was last updated.
  // Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.
  int64 updated_at = 22;
  int64 created_at = 23;
  int64 deleted_at = 24;
}

// End-User Owner Profile.
message UserProfile {
  // READONLY. profile.id
  string id = 1;
  // OPTIONAL.
  // Shorthand name by which the End-User
  // wishes to be referred to at the RP,
  // such as janedoe or j.doe.
  string username = 2;
  // READONLY. End-User profile info.
  Identity identity = 3;
  // READONLY. Extra identities associated
  repeated Identity sources = 4;
}

// Domain Service End-User Account.
message UserAccount {
  // Account.id on behalf of domain reference
  string id = 1;
  // Block account for domain services.
   Block block = 2;
  // [P]rimary [D]omain[c]omponent ID.
  Lookup domain = 3;
  // End-User contact association.
  Lookup contact = 4;
  // End-User's account info.
  UserProfile profile = 5;
  // Portal Service(s) ever used.
  repeated UserService services = 6;
}

// Portal Service End-User Account
message UserService {
  // Impersonated End-User account identifier
  // in front of the `portal` service
  string id = 1;
  // Block user profile for `portal` service.
   Block block = 2;
  // Service primary domain reference.
  Lookup domain = 3;
  // Domain Portal Service reference.
  Lookup portal = 4;

  // VoIP/SIP call credentials.
  CallAccount call = 5;

  // //
  // ChatAccount chat = 6;
}

// Portal Service VoIP/SIP Account
message CallAccount {
  // SIP host / proxy
  string proxy = 1;
  // SIP realm / domain
  string realm = 2;
  // SIP username; extension
  string user_id = 3;
  // SIP authorization
  string auth_id = 4;
  // SIP password
  string secret = 5;
  // Video is allowed ?
  bool video = 6;
}

// Account dataset.
message AccountList {
  repeated UserAccount data = 1;
  int32 page = 2;
  bool next = 3;
}
