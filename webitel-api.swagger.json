{
  "swagger": "2.0",
  "info": {
    "title": "Webitel API",
    "version": "v25.6-dev",
    "contact": {
      "name": "Webitel",
      "url": "https://webitel.com",
      "email": "support@webitel.com"
    },
    "license": {
      "name": "MIT"
    }
  },
  "tags": [
    {
      "name": "Presence"
    },
    {
      "name": "Customers"
    },
    {
      "name": "Permissions"
    },
    {
      "name": "Users"
    },
    {
      "name": "Roles"
    },
    {
      "name": "AC"
    },
    {
      "name": "AccessStore"
    },
    {
      "name": "RoutingChatPlanService"
    },
    {
      "name": "RoutingOutboundCallService"
    },
    {
      "name": "RoutingSchemaService"
    },
    {
      "name": "RoutingVariableService"
    },
    {
      "name": "AgentService"
    },
    {
      "name": "AgentAbsenceService"
    },
    {
      "name": "SkillService"
    },
    {
      "name": "AgentSkillService"
    },
    {
      "name": "AgentTeamService"
    },
    {
      "name": "AgentWorkingConditionsService"
    },
    {
      "name": "AgentWorkingScheduleService"
    },
    {
      "name": "AuditFormService"
    },
    {
      "name": "OAuth2"
    },
    {
      "name": "SA"
    },
    {
      "name": "Auth"
    },
    {
      "name": "BackendProfileService"
    },
    {
      "name": "Bots"
    },
    {
      "name": "BucketService"
    },
    {
      "name": "CalendarService"
    },
    {
      "name": "CallService"
    },
    {
      "name": "Devices"
    },
    {
      "name": "CallManager"
    },
    {
      "name": "Services"
    },
    {
      "name": "CaseComments"
    },
    {
      "name": "RelatedCases"
    },
    {
      "name": "CaseFiles"
    },
    {
      "name": "CaseLinks"
    },
    {
      "name": "Priorities"
    },
    {
      "name": "StatusConditions"
    },
    {
      "name": "Sources"
    },
    {
      "name": "SLAConditions"
    },
    {
      "name": "Cases"
    },
    {
      "name": "CaseCommunications"
    },
    {
      "name": "CaseTimeline"
    },
    {
      "name": "Catalogs"
    },
    {
      "name": "MemberService"
    },
    {
      "name": "CA"
    },
    {
      "name": "ChatService"
    },
    {
      "name": "FlowChatServerService"
    },
    {
      "name": "Classes"
    },
    {
      "name": "CloseReasons"
    },
    {
      "name": "CloseReasonGroups"
    },
    {
      "name": "CognitiveProfileService"
    },
    {
      "name": "ConfigService"
    },
    {
      "name": "FlowService"
    },
    {
      "name": "Comments"
    },
    {
      "name": "Labels"
    },
    {
      "name": "Emails"
    },
    {
      "name": "Upload"
    },
    {
      "name": "Photos"
    },
    {
      "name": "Phones"
    },
    {
      "name": "Managers"
    },
    {
      "name": "Variables"
    },
    {
      "name": "Languages"
    },
    {
      "name": "Timezones"
    },
    {
      "name": "IMClients"
    },
    {
      "name": "ContactGroups"
    },
    {
      "name": "Contacts"
    },
    {
      "name": "DynamicConditions"
    },
    {
      "name": "DynamicGroups"
    },
    {
      "name": "Groups"
    },
    {
      "name": "Timeline"
    },
    {
      "name": "Domains"
    },
    {
      "name": "EmailProfileService"
    },
    {
      "name": "FileService"
    },
    {
      "name": "FilePoliciesService"
    },
    {
      "name": "FileTranscriptService"
    },
    {
      "name": "ForecastCalculationService"
    },
    {
      "name": "Api"
    },
    {
      "name": "FTSService"
    },
    {
      "name": "ImportTemplateService"
    },
    {
      "name": "Articles"
    },
    {
      "name": "KnowledgebaseSearch"
    },
    {
      "name": "Spaces"
    },
    {
      "name": "Tags"
    },
    {
      "name": "LDAP"
    },
    {
      "name": "ListService"
    },
    {
      "name": "LoggerService"
    },
    {
      "name": "MediaFileService"
    },
    {
      "name": "Messages",
      "description": "**Messages** Service"
    },
    {
      "name": "AgentChatService"
    },
    {
      "name": "CasesChatCatalog"
    },
    {
      "name": "ContactLinkingService"
    },
    {
      "name": "ContactsChatCatalog"
    },
    {
      "name": "OAuth2Federation"
    },
    {
      "name": "OutboundResourceService"
    },
    {
      "name": "OutboundResourceGroupService"
    },
    {
      "name": "AgentPauseCauseService"
    },
    {
      "name": "PauseTemplateService"
    },
    {
      "name": "PresetQueryService"
    },
    {
      "name": "FlowProcessingService"
    },
    {
      "name": "PushService"
    },
    {
      "name": "QueueService"
    },
    {
      "name": "QueueBucketService"
    },
    {
      "name": "CommunicationTypeService"
    },
    {
      "name": "QueueHookService"
    },
    {
      "name": "QueueResourcesService"
    },
    {
      "name": "QueueSkillService"
    },
    {
      "name": "QuickRepliesService"
    },
    {
      "name": "RegionService"
    },
    {
      "name": "SchemaVariablesService"
    },
    {
      "name": "SchemaVersionService"
    },
    {
      "name": "ShiftTemplateService"
    },
    {
      "name": "SLAs"
    },
    {
      "name": "Statuses"
    },
    {
      "name": "SystemSettingService"
    },
    {
      "name": "TeamHookService"
    },
    {
      "name": "TeamTriggerService"
    },
    {
      "name": "TriggerService"
    },
    {
      "name": "TwoFactorAuthentication"
    },
    {
      "name": "UserAccessTokens"
    },
    {
      "name": "UserHelperService"
    },
    {
      "name": "UserSettings"
    },
    {
      "name": "WebHookService"
    },
    {
      "name": "WorkingConditionService"
    },
    {
      "name": "WorkingScheduleService"
    }
  ],
  "host": "dev.webitel.com",
  "basePath": "/api",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/acl/{object.name}/{object.id}": {
      "get": {
        "summary": "default: TODO: indicate objclass=default as a default rights repo",
        "operationId": "ListDefaultAccess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListAccessResponseV1"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "object.name",
            "description": "display name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "object.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "grantor",
            "description": "--- filters ---\n\n[optional] [FROM] each rule owner is any of role(s) id; user -or- role",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "grantee",
            "description": "[optional] [TO] subject role(s) id; user -or- role",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "granted",
            "description": "[xrwdxrwd] [R]ecord-[b]ased-[A]ccess-[C]ontrol level check(!)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "[optional] [TO] subject.name ILIKE ?q=; user -or- role",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "----- Select Options -------------------------\n\nattributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "size",
            "description": "pagedResultsControl\n\ndefault: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "default: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "AccessStore"
        ]
      }
    },
    "/acl/{object.name}/{object.id}/grantor/{grantor}": {
      "patch": {
        "summary": "Same as UpdateAccess except for DEFAULT access control system",
        "operationId": "ToggleDefaultAccess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiToggleDefaultAccessResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "object.name",
            "description": "display name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "object.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "grantor",
            "description": "[FOR] creator user/role",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccessStoreToggleDefaultAccessBody"
            }
          }
        ],
        "tags": [
          "AccessStore"
        ]
      }
    },
    "/agent/chats": {
      "get": {
        "operationId": "GetAgentChats",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chatGetAgentChatsResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "size",
            "description": "default",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "only_closed",
            "description": "filter",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "only_unprocessed",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "AgentChatService"
        ]
      }
    },
    "/agent/chats/{chat_id}": {
      "patch": {
        "operationId": "MarkChatProcessed",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chatMarkChatProcessedResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "chat_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AgentChatService"
        ]
      }
    },
    "/calendars": {
      "get": {
        "summary": "List of calendar",
        "operationId": "SearchCalendar",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListCalendar"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CalendarService"
        ]
      },
      "post": {
        "summary": "Create calendar",
        "operationId": "CreateCalendar",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineCalendar"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateCalendarRequest"
            }
          }
        ],
        "tags": [
          "CalendarService"
        ]
      }
    },
    "/calendars/timezones": {
      "get": {
        "summary": "List timezones",
        "operationId": "SearchTimezones",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListTimezoneResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CalendarService"
        ]
      }
    },
    "/calendars/{id}": {
      "get": {
        "summary": "Calendar item",
        "operationId": "ReadCalendar",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineCalendar"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "CalendarService"
        ]
      },
      "delete": {
        "summary": "Remove calendar",
        "operationId": "DeleteCalendar",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineCalendar"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "CalendarService"
        ]
      },
      "put": {
        "summary": "Update calendar",
        "operationId": "UpdateCalendar",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineCalendar"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CalendarServiceUpdateCalendarBody"
            }
          }
        ],
        "tags": [
          "CalendarService"
        ]
      }
    },
    "/call_center/agents": {
      "get": {
        "summary": "List of Agent",
        "operationId": "SearchAgent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListAgent"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "allow_channels",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "supervisor_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "team_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "region_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "auditor_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "is_supervisor",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skill_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "queue_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "not_supervisor",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "extension",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "not_team_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "not_skill_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "AgentService"
        ]
      },
      "post": {
        "summary": "Create Agent",
        "operationId": "CreateAgent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgent"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateAgentRequest"
            }
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/call_center/agents/reports/call": {
      "get": {
        "operationId": "SearchAgentCallStatistics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgentCallStatisticsList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "time.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "time.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "agent_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/call_center/agents/reports/status": {
      "get": {
        "operationId": "SearchAgentStatusStatistic",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListAgentStatsStatistic"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "agent_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "time.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "time.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "queue_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "team_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "utilization.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "utilization.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "has_call",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "skill_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "region_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "supervisor_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "auditor_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/call_center/agents/reports/status/{agent_id}": {
      "get": {
        "operationId": "SearchAgentStatusStatisticItem",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgentStatusStatisticItem"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "time.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "time.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/call_center/agents/states/history": {
      "get": {
        "operationId": "SearchAgentStateHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListAgentStateHistory"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "joined_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "joined_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "agent_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "from_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/call_center/agents/{agent_id}/pause_causes": {
      "get": {
        "operationId": "SearchPauseCauseForAgent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineForAgentPauseCauseList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "allow_change",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/call_center/agents/{agent_id}/skills": {
      "get": {
        "summary": "List of AgentSkill",
        "operationId": "SearchAgentSkill",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListAgentSkill"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "skill_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "AgentSkillService"
        ]
      },
      "delete": {
        "operationId": "DeleteAgentSkills",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListAgentSkill"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "skill_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "AgentSkillService"
        ]
      },
      "post": {
        "summary": "Create AgentSkill",
        "operationId": "CreateAgentSkill",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgentSkill"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentSkillServiceCreateAgentSkillBody"
            }
          }
        ],
        "tags": [
          "AgentSkillService"
        ]
      },
      "patch": {
        "operationId": "PatchAgentSkills",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListAgentSkill"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentSkillServicePatchAgentSkillsBody"
            }
          }
        ],
        "tags": [
          "AgentSkillService"
        ]
      }
    },
    "/call_center/agents/{agent_id}/skills/bulk": {
      "post": {
        "operationId": "CreateAgentSkills",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineCreateAgentSkillsResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentSkillServiceCreateAgentSkillsBody"
            }
          }
        ],
        "tags": [
          "AgentSkillService"
        ]
      }
    },
    "/call_center/agents/{agent_id}/skills/{id}": {
      "get": {
        "summary": "AgentSkill item",
        "operationId": "ReadAgentSkill",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgentSkill"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AgentSkillService"
        ]
      },
      "delete": {
        "summary": "Remove AgentSkill",
        "operationId": "DeleteAgentSkill",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgentSkill"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AgentSkillService"
        ]
      },
      "put": {
        "summary": "Update AgentSkill",
        "operationId": "UpdateAgentSkill",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgentSkill"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentSkillServiceUpdateAgentSkillBody"
            }
          }
        ],
        "tags": [
          "AgentSkillService"
        ]
      },
      "patch": {
        "operationId": "PatchAgentSkill",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgentSkill"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentSkillServicePatchAgentSkillBody"
            }
          }
        ],
        "tags": [
          "AgentSkillService"
        ]
      }
    },
    "/call_center/agents/{agent_id}/states/history": {
      "get": {
        "operationId": "AgentStateHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListAgentStateHistory"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "time_from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "time_to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/call_center/agents/{agent_id}/states/waiting": {
      "patch": {
        "operationId": "AgentSetState",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgentSetStateResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentServiceAgentSetStateBody"
            }
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/call_center/agents/{agent_id}/statistics/queues": {
      "get": {
        "operationId": "SearchAgentInQueueStatistics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgentInQueueStatisticsList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/call_center/agents/{agent_id}/statistics/today": {
      "get": {
        "operationId": "AgentTodayStatistics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgentTodayStatisticsResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/call_center/agents/{id}": {
      "get": {
        "summary": "Agent item",
        "operationId": "ReadAgent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgent"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AgentService"
        ]
      },
      "delete": {
        "summary": "Remove Agent",
        "operationId": "DeleteAgent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgent"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AgentService"
        ]
      },
      "put": {
        "summary": "Update Agent",
        "operationId": "UpdateAgent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgent"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentServiceUpdateAgentBody"
            }
          }
        ],
        "tags": [
          "AgentService"
        ]
      },
      "patch": {
        "summary": "Update Agent",
        "operationId": "PatchAgent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgent"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentServicePatchAgentBody"
            }
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/call_center/agents/{id}/queues": {
      "get": {
        "operationId": "SearchAgentInQueue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListAgentInQueue"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/call_center/agents/{id}/status": {
      "patch": {
        "summary": "Change agent status",
        "operationId": "UpdateAgentStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentServiceUpdateAgentStatusBody"
            }
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/call_center/agents/{id}/teams": {
      "get": {
        "summary": "todo deprecated ?",
        "operationId": "SearchAgentInTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListAgentInTeam"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/call_center/attempts/{attempt_id}": {
      "patch": {
        "operationId": "AttemptCallback",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAttemptResultResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "attempt_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberServiceAttemptCallbackBody"
            }
          }
        ],
        "tags": [
          "MemberService"
        ]
      }
    },
    "/call_center/audit/forms": {
      "get": {
        "operationId": "SearchAuditForm",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListAuditForm"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "team_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "editable",
            "description": "bool archive = 9;\n\nbool active = 11; // not archive",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "question",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AuditFormService"
        ]
      },
      "post": {
        "operationId": "CreateAuditForm",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAuditForm"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateAuditFormRequest"
            }
          }
        ],
        "tags": [
          "AuditFormService"
        ]
      }
    },
    "/call_center/audit/forms/{form_id}/rate": {
      "get": {
        "operationId": "SearchAuditRate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListAuditRate"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "form_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "created_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "created_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "call_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "rated_user",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "AuditFormService"
        ]
      }
    },
    "/call_center/audit/forms/{id}": {
      "get": {
        "operationId": "ReadAuditForm",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAuditForm"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "AuditFormService"
        ]
      },
      "delete": {
        "operationId": "DeleteAuditForm",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAuditForm"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "AuditFormService"
        ]
      },
      "put": {
        "operationId": "UpdateAuditForm",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAuditForm"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuditFormServiceUpdateAuditFormBody"
            }
          }
        ],
        "tags": [
          "AuditFormService"
        ]
      },
      "patch": {
        "operationId": "PatchAuditForm",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAuditForm"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuditFormServicePatchAuditFormBody"
            }
          }
        ],
        "tags": [
          "AuditFormService"
        ]
      }
    },
    "/call_center/audit/rate": {
      "post": {
        "operationId": "CreateAuditFormRate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAuditRate"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateAuditFormRateRequest"
            }
          }
        ],
        "tags": [
          "AuditFormService"
        ]
      }
    },
    "/call_center/audit/rate/{id}": {
      "get": {
        "operationId": "ReadAuditRate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAuditRate"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AuditFormService"
        ]
      },
      "delete": {
        "operationId": "DeleteAuditRate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAuditRate"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AuditFormService"
        ]
      },
      "put": {
        "operationId": "UpdateAuditRate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAuditRate"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuditFormServiceUpdateAuditRateBody"
            }
          }
        ],
        "tags": [
          "AuditFormService"
        ]
      }
    },
    "/call_center/buckets": {
      "get": {
        "summary": "List of Bucket",
        "operationId": "SearchBucket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListBucket"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "BucketService"
        ]
      },
      "post": {
        "summary": "Create Bucket",
        "operationId": "CreateBucket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineBucket"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateBucketRequest"
            }
          }
        ],
        "tags": [
          "BucketService"
        ]
      }
    },
    "/call_center/buckets/{id}": {
      "get": {
        "summary": "Bucket item",
        "operationId": "ReadBucket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineBucket"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "BucketService"
        ]
      },
      "delete": {
        "summary": "Remove Bucket",
        "operationId": "DeleteBucket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineBucket"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "BucketService"
        ]
      },
      "put": {
        "summary": "Update Bucket",
        "operationId": "UpdateBucket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineBucket"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BucketServiceUpdateBucketBody"
            }
          }
        ],
        "tags": [
          "BucketService"
        ]
      }
    },
    "/call_center/communication_type": {
      "get": {
        "summary": "List of CommunicationType",
        "operationId": "SearchCommunicationType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListCommunicationType"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Undefined",
                "Phone",
                "Email",
                "Messaging"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "default",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "CommunicationTypeService"
        ]
      },
      "post": {
        "summary": "Create CommunicationType",
        "operationId": "CreateCommunicationType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineCommunicationType"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCommunicationTypeRequest"
            }
          }
        ],
        "tags": [
          "CommunicationTypeService"
        ]
      }
    },
    "/call_center/communication_type/{id}": {
      "get": {
        "summary": "CommunicationType item",
        "operationId": "ReadCommunicationType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineCommunicationType"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "CommunicationTypeService"
        ]
      },
      "delete": {
        "summary": "Remove CommunicationType",
        "operationId": "DeleteCommunicationType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineCommunicationType"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "CommunicationTypeService"
        ]
      },
      "put": {
        "summary": "Update CommunicationType",
        "operationId": "UpdateCommunicationType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineCommunicationType"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommunicationTypeServiceUpdateCommunicationTypeBody"
            }
          }
        ],
        "tags": [
          "CommunicationTypeService"
        ]
      },
      "patch": {
        "operationId": "PatchCommunicationType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineCommunicationType"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommunicationTypeServicePatchCommunicationTypeBody"
            }
          }
        ],
        "tags": [
          "CommunicationTypeService"
        ]
      }
    },
    "/call_center/list": {
      "get": {
        "summary": "List of List",
        "operationId": "SearchList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListOfList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ListService"
        ]
      },
      "post": {
        "summary": "Create List",
        "operationId": "CreateList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateListRequest"
            }
          }
        ],
        "tags": [
          "ListService"
        ]
      }
    },
    "/call_center/list/{id}": {
      "get": {
        "summary": "List item",
        "operationId": "ReadList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ListService"
        ]
      },
      "delete": {
        "summary": "Remove list",
        "operationId": "DeleteList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ListService"
        ]
      },
      "put": {
        "summary": "Update list",
        "operationId": "UpdateList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListServiceUpdateListBody"
            }
          }
        ],
        "tags": [
          "ListService"
        ]
      }
    },
    "/call_center/list/{list_id}/communication": {
      "get": {
        "summary": "List of List",
        "operationId": "SearchListCommunication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListOfListCommunication"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "list_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "expire_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "expire_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ListService"
        ]
      },
      "post": {
        "summary": "Create ListCommunication",
        "operationId": "CreateListCommunication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListCommunication"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "list_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListServiceCreateListCommunicationBody"
            }
          }
        ],
        "tags": [
          "ListService"
        ]
      }
    },
    "/call_center/list/{list_id}/communication/{id}": {
      "get": {
        "summary": "List item",
        "operationId": "ReadListCommunication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListCommunication"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "list_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ListService"
        ]
      },
      "delete": {
        "summary": "Remove ListCommunication",
        "operationId": "DeleteListCommunication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListCommunication"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "list_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ListService"
        ]
      },
      "put": {
        "summary": "Update ListCommunication",
        "operationId": "UpdateListCommunication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListCommunication"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "list_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListServiceUpdateListCommunicationBody"
            }
          }
        ],
        "tags": [
          "ListService"
        ]
      }
    },
    "/call_center/lookups/agents/skills/{agent_id}": {
      "get": {
        "summary": "SearchLookupAgentNotExistsSkill",
        "operationId": "SearchLookupAgentNotExistsSkill",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListSkill"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AgentSkillService"
        ]
      }
    },
    "/call_center/lookups/agents/users": {
      "get": {
        "summary": "SearchLookupAgentNotExistsUser",
        "operationId": "SearchLookupUsersAgentNotExists",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListAgentUser"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/call_center/members": {
      "get": {
        "summary": "Search of Member",
        "operationId": "SearchMembers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListMember"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "queue_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "bucket_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "destination",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "created_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "created_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offering_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offering_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "stop_cause",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "priority.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "priority.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "attempts.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "attempts.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "agent_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "MemberService"
        ]
      }
    },
    "/call_center/members/{id}": {
      "patch": {
        "operationId": "PatchMemberOne",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineMemberInQueue"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberServicePatchMemberOneBody"
            }
          }
        ],
        "tags": [
          "MemberService"
        ]
      }
    },
    "/call_center/pause_causes": {
      "get": {
        "operationId": "SearchAgentPauseCause",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListAgentPauseCause"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "AgentPauseCauseService"
        ]
      },
      "post": {
        "operationId": "CreateAgentPauseCause",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgentPauseCause"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateAgentPauseCauseRequest"
            }
          }
        ],
        "tags": [
          "AgentPauseCauseService"
        ]
      }
    },
    "/call_center/pause_causes/{id}": {
      "get": {
        "operationId": "ReadAgentPauseCause",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgentPauseCause"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "AgentPauseCauseService"
        ]
      },
      "delete": {
        "operationId": "DeleteAgentPauseCause",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgentPauseCause"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "AgentPauseCauseService"
        ]
      },
      "put": {
        "operationId": "UpdateAgentPauseCause",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgentPauseCause"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentPauseCauseServiceUpdateAgentPauseCauseBody"
            }
          }
        ],
        "tags": [
          "AgentPauseCauseService"
        ]
      },
      "patch": {
        "operationId": "PatchAgentPauseCause",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgentPauseCause"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentPauseCauseServicePatchAgentPauseCauseBody"
            }
          }
        ],
        "tags": [
          "AgentPauseCauseService"
        ]
      }
    },
    "/call_center/preset/query": {
      "get": {
        "operationId": "SearchPresetQuery",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListPresetQuery"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "section",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PresetQueryService"
        ]
      },
      "post": {
        "operationId": "CreatePresetQuery",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/enginePresetQuery"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreatePresetQueryRequest"
            }
          }
        ],
        "tags": [
          "PresetQueryService"
        ]
      }
    },
    "/call_center/preset/query/{id}": {
      "get": {
        "operationId": "ReadPresetQuery",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/enginePresetQuery"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "PresetQueryService"
        ]
      },
      "delete": {
        "operationId": "DeletePresetQuery",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/enginePresetQuery"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "PresetQueryService"
        ]
      },
      "put": {
        "operationId": "UpdatePresetQuery",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/enginePresetQuery"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PresetQueryServiceUpdatePresetQueryBody"
            }
          }
        ],
        "tags": [
          "PresetQueryService"
        ]
      },
      "patch": {
        "operationId": "PatchPresetQuery",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/enginePresetQuery"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PresetQueryServicePatchPresetQueryBody"
            }
          }
        ],
        "tags": [
          "PresetQueryService"
        ]
      }
    },
    "/call_center/queues": {
      "get": {
        "summary": "List of Queue",
        "operationId": "SearchQueue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListQueue"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "team_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "QueueService"
        ]
      },
      "post": {
        "summary": "Create Queue",
        "operationId": "CreateQueue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueue"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateQueueRequest"
            }
          }
        ],
        "tags": [
          "QueueService"
        ]
      }
    },
    "/call_center/queues/attempts/active": {
      "get": {
        "summary": "SearchAttempts",
        "operationId": "SearchAttempts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListAttempt"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "joined_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "joined_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "queue_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "bucket_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "member_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "agent_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "result",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "leaving_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "leaving_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offering_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offering_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "duration.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "duration.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offered_agent_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "MemberService"
        ]
      }
    },
    "/call_center/queues/attempts/active/reset": {
      "put": {
        "operationId": "ResetActiveAttempts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineResetActiveAttemptsResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineResetActiveAttemptsRequest"
            }
          }
        ],
        "tags": [
          "MemberService"
        ]
      }
    },
    "/call_center/queues/attempts/history": {
      "get": {
        "summary": "SearchMemberAttempts",
        "operationId": "SearchAttemptsHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListHistoryAttempt"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "joined_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "joined_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "queue_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "bucket_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "member_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "agent_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "result",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "leaving_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "leaving_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offering_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offering_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "duration.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "duration.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offered_agent_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "MemberService"
        ]
      }
    },
    "/call_center/queues/attempts/{attempt_id}/renewal": {
      "patch": {
        "operationId": "AttemptsRenewalResult",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAttemptRenewalResultResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "attempt_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberServiceAttemptsRenewalResultBody"
            }
          }
        ],
        "tags": [
          "MemberService"
        ]
      }
    },
    "/call_center/queues/members": {
      "delete": {
        "summary": "DeleteAllMembers",
        "operationId": "DeleteAllMembers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListMember"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineDeleteAllMembersRequest"
            }
          }
        ],
        "tags": [
          "MemberService"
        ]
      }
    },
    "/call_center/queues/reports/general": {
      "get": {
        "operationId": "SearchQueueReportGeneral",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListReportGeneral"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "joined_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "joined_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "queue_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "team_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "QueueService"
        ]
      }
    },
    "/call_center/queues/tags": {
      "get": {
        "summary": "List RoutingSchemaTags",
        "operationId": "SearchQueueTags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListTags"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "QueueService"
        ]
      }
    },
    "/call_center/queues/{id}": {
      "get": {
        "summary": "Queue item",
        "operationId": "ReadQueue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueue"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "QueueService"
        ]
      },
      "delete": {
        "summary": "Remove Queue",
        "operationId": "DeleteQueue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueue"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "QueueService"
        ]
      },
      "put": {
        "summary": "Update Queue",
        "operationId": "UpdateQueue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueue"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueueServiceUpdateQueueBody"
            }
          }
        ],
        "tags": [
          "QueueService"
        ]
      },
      "patch": {
        "summary": "Patch Queue",
        "operationId": "PatchQueue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueue"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueueServicePatchQueueBody"
            }
          }
        ],
        "tags": [
          "QueueService"
        ]
      }
    },
    "/call_center/queues/{queue_id}/buckets": {
      "get": {
        "summary": "SearchQueueRouting",
        "operationId": "SearchQueueBucket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListQueueBucket"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "QueueBucketService"
        ]
      },
      "post": {
        "summary": "Create QueueBucket",
        "operationId": "CreateQueueBucket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueueBucket"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueueBucketServiceCreateQueueBucketBody"
            }
          }
        ],
        "tags": [
          "QueueBucketService"
        ]
      }
    },
    "/call_center/queues/{queue_id}/buckets/{id}": {
      "get": {
        "summary": "ReadQueueRouting",
        "operationId": "ReadQueueBucket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueueBucket"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "QueueBucketService"
        ]
      },
      "delete": {
        "summary": "DeleteQueueRouting",
        "operationId": "DeleteQueueBucket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueueBucket"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "QueueBucketService"
        ]
      },
      "put": {
        "summary": "UpdateQueueBucket",
        "operationId": "UpdateQueueBucket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueueBucket"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueueBucketServiceUpdateQueueBucketBody"
            }
          }
        ],
        "tags": [
          "QueueBucketService"
        ]
      },
      "patch": {
        "operationId": "PatchQueueBucket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueueBucket"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueueBucketServicePatchQueueBucketBody"
            }
          }
        ],
        "tags": [
          "QueueBucketService"
        ]
      }
    },
    "/call_center/queues/{queue_id}/hooks": {
      "get": {
        "operationId": "SearchQueueHook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListQueueHook"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "schema_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "event",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "QueueHookService"
        ]
      },
      "post": {
        "operationId": "CreateQueueHook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueueHook"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueueHookServiceCreateQueueHookBody"
            }
          }
        ],
        "tags": [
          "QueueHookService"
        ]
      }
    },
    "/call_center/queues/{queue_id}/hooks/{id}": {
      "get": {
        "operationId": "ReadQueueHook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueueHook"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "QueueHookService"
        ]
      },
      "delete": {
        "operationId": "DeleteQueueHook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueueHook"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "QueueHookService"
        ]
      },
      "put": {
        "operationId": "UpdateQueueHook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueueHook"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueueHookServiceUpdateQueueHookBody"
            }
          }
        ],
        "tags": [
          "QueueHookService"
        ]
      },
      "patch": {
        "operationId": "PatchQueueHook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueueHook"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueueHookServicePatchQueueHookBody"
            }
          }
        ],
        "tags": [
          "QueueHookService"
        ]
      }
    },
    "/call_center/queues/{queue_id}/members": {
      "get": {
        "summary": "List of Member",
        "operationId": "SearchMemberInQueue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListMember"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "bucket_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "destination",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "created_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "created_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offering_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offering_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "stop_cause",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "priority.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "priority.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "attempts.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "attempts.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "agent_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "variables[string]",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MemberService"
        ]
      },
      "delete": {
        "summary": "DeleteMembers",
        "operationId": "DeleteMembers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListMember"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberServiceDeleteMembersBody"
            }
          }
        ],
        "tags": [
          "MemberService"
        ]
      },
      "post": {
        "summary": "Create Member",
        "operationId": "CreateMember",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineMemberInQueue"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberServiceCreateMemberBody"
            }
          }
        ],
        "tags": [
          "MemberService"
        ]
      }
    },
    "/call_center/queues/{queue_id}/members/bulk": {
      "post": {
        "summary": "Create Member",
        "operationId": "CreateMemberBulk",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineMemberBulkResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberServiceCreateMemberBulkBody"
            }
          }
        ],
        "tags": [
          "MemberService"
        ]
      }
    },
    "/call_center/queues/{queue_id}/members/reset": {
      "patch": {
        "summary": "ResetMembers",
        "operationId": "ResetMembers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineResetMembersResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberServiceResetMembersBody"
            }
          }
        ],
        "tags": [
          "MemberService"
        ]
      }
    },
    "/call_center/queues/{queue_id}/members/{id}": {
      "get": {
        "summary": "ReadQueueRouting",
        "operationId": "ReadMember",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineMemberInQueue"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "MemberService"
        ]
      },
      "delete": {
        "summary": "DeleteMember",
        "operationId": "DeleteMember",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineMemberInQueue"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "MemberService"
        ]
      },
      "put": {
        "summary": "UpdateMember",
        "operationId": "UpdateMember",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineMemberInQueue"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberServiceUpdateMemberBody"
            }
          }
        ],
        "tags": [
          "MemberService"
        ]
      },
      "patch": {
        "summary": "Patch Member",
        "operationId": "PatchMember",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineMemberInQueue"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberServicePatchMemberBody"
            }
          }
        ],
        "tags": [
          "MemberService"
        ]
      }
    },
    "/call_center/queues/{queue_id}/members/{member_id}/attempts": {
      "get": {
        "summary": "SearchMemberAttempts",
        "operationId": "SearchMemberAttempts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListMemberAttempt"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "member_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "MemberService"
        ]
      },
      "post": {
        "summary": "Offline queue",
        "operationId": "CreateAttempt",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineCreateAttemptResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "member_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MemberServiceCreateAttemptBody"
            }
          }
        ],
        "tags": [
          "MemberService"
        ]
      }
    },
    "/call_center/queues/{queue_id}/members/{member_id}/attempts/{attempt_id}": {
      "patch": {
        "operationId": "AttemptResult",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAttemptResultResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "member_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "attempt_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineMemberServiceAttemptResultBody"
            }
          }
        ],
        "tags": [
          "MemberService"
        ]
      }
    },
    "/call_center/queues/{queue_id}/resource_groups": {
      "get": {
        "summary": "SearchQueueResourceGroup",
        "operationId": "SearchQueueResourceGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListQueueResourceGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "QueueResourcesService"
        ]
      },
      "post": {
        "summary": "CreateQueueResourceGroup",
        "operationId": "CreateQueueResourceGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueueResourceGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueueResourcesServiceCreateQueueResourceGroupBody"
            }
          }
        ],
        "tags": [
          "QueueResourcesService"
        ]
      }
    },
    "/call_center/queues/{queue_id}/resource_groups/{id}": {
      "get": {
        "summary": "ReadQueueResourceGroup",
        "operationId": "ReadQueueResourceGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueueResourceGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "QueueResourcesService"
        ]
      },
      "delete": {
        "summary": "DeleteQueueResourceGroup",
        "operationId": "DeleteQueueResourceGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueueResourceGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "QueueResourcesService"
        ]
      },
      "put": {
        "summary": "UpdateQueueResourceGroup",
        "operationId": "UpdateQueueResourceGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueueResourceGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueueResourcesServiceUpdateQueueResourceGroupBody"
            }
          }
        ],
        "tags": [
          "QueueResourcesService"
        ]
      }
    },
    "/call_center/queues/{queue_id}/skills": {
      "get": {
        "operationId": "SearchQueueSkill",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListQueueSkill"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "skill_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "bucket_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "lvl",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "min_capacity",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "max_capacity",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "QueueSkillService"
        ]
      },
      "post": {
        "operationId": "CreateQueueSkill",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueueSkill"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueueSkillServiceCreateQueueSkillBody"
            }
          }
        ],
        "tags": [
          "QueueSkillService"
        ]
      }
    },
    "/call_center/queues/{queue_id}/skills/{id}": {
      "get": {
        "operationId": "ReadQueueSkill",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueueSkill"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "QueueSkillService"
        ]
      },
      "delete": {
        "operationId": "DeleteQueueSkill",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueueSkill"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "QueueSkillService"
        ]
      },
      "put": {
        "operationId": "UpdateQueueSkill",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueueSkill"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueueSkillServiceUpdateQueueSkillBody"
            }
          }
        ],
        "tags": [
          "QueueSkillService"
        ]
      },
      "patch": {
        "operationId": "PatchQueueSkill",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQueueSkill"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueueSkillServicePatchQueueSkillBody"
            }
          }
        ],
        "tags": [
          "QueueSkillService"
        ]
      }
    },
    "/call_center/quick_replies": {
      "get": {
        "operationId": "SearchQuickReplies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListQuickReplies"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "QuickRepliesService"
        ]
      },
      "post": {
        "operationId": "CreateQuickReply",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQuickReply"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateQuickReplyRequest"
            }
          }
        ],
        "tags": [
          "QuickRepliesService"
        ]
      }
    },
    "/call_center/quick_replies/{id}": {
      "get": {
        "operationId": "ReadQuickReply",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQuickReply"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "QuickRepliesService"
        ]
      },
      "delete": {
        "operationId": "DeleteQuickReply",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQuickReply"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "QuickRepliesService"
        ]
      },
      "put": {
        "operationId": "UpdateQuickReply",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQuickReply"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QuickRepliesServiceUpdateQuickReplyBody"
            }
          }
        ],
        "tags": [
          "QuickRepliesService"
        ]
      },
      "patch": {
        "operationId": "PatchQuickReply",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineQuickReply"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QuickRepliesServicePatchQuickReplyBody"
            }
          }
        ],
        "tags": [
          "QuickRepliesService"
        ]
      }
    },
    "/call_center/resource_group": {
      "get": {
        "summary": "List of OutboundResourceGroup",
        "operationId": "SearchOutboundResourceGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListOutboundResourceGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "OutboundResourceGroupService"
        ]
      },
      "post": {
        "summary": "Create OutboundResourceGroup",
        "operationId": "CreateOutboundResourceGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineOutboundResourceGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateOutboundResourceGroupRequest"
            }
          }
        ],
        "tags": [
          "OutboundResourceGroupService"
        ]
      }
    },
    "/call_center/resource_group/{group_id}/resource": {
      "get": {
        "summary": "List of OutboundResourceInGroup",
        "operationId": "SearchOutboundResourceInGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListOutboundResourceInGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "OutboundResourceGroupService"
        ]
      },
      "post": {
        "summary": "Create OutboundResourceGroup",
        "operationId": "CreateOutboundResourceInGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineOutboundResourceInGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OutboundResourceGroupServiceCreateOutboundResourceInGroupBody"
            }
          }
        ],
        "tags": [
          "OutboundResourceGroupService"
        ]
      }
    },
    "/call_center/resource_group/{group_id}/resource/{id}": {
      "get": {
        "summary": "OutboundResourceInGroup item",
        "operationId": "ReadOutboundResourceInGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineOutboundResourceInGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "OutboundResourceGroupService"
        ]
      },
      "delete": {
        "summary": "Remove OutboundResourceInGroup",
        "operationId": "DeleteOutboundResourceInGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineOutboundResourceInGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "OutboundResourceGroupService"
        ]
      },
      "put": {
        "summary": "Update OutboundResourceInGroup",
        "operationId": "UpdateOutboundResourceInGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineOutboundResourceInGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OutboundResourceGroupServiceUpdateOutboundResourceInGroupBody"
            }
          }
        ],
        "tags": [
          "OutboundResourceGroupService"
        ]
      }
    },
    "/call_center/resource_group/{id}": {
      "get": {
        "summary": "OutboundResourceGroup item",
        "operationId": "ReadOutboundResourceGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineOutboundResourceGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "OutboundResourceGroupService"
        ]
      },
      "delete": {
        "summary": "Remove OutboundResourceGroup",
        "operationId": "DeleteOutboundResourceGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineOutboundResourceGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "OutboundResourceGroupService"
        ]
      },
      "put": {
        "summary": "Update OutboundResourceGroup",
        "operationId": "UpdateOutboundResourceGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineOutboundResourceGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OutboundResourceGroupServiceUpdateOutboundResourceGroupBody"
            }
          }
        ],
        "tags": [
          "OutboundResourceGroupService"
        ]
      }
    },
    "/call_center/resources": {
      "get": {
        "summary": "List of OutboundResource",
        "operationId": "SearchOutboundResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListOutboundResource"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "OutboundResourceService"
        ]
      },
      "post": {
        "summary": "Create OutboundResource",
        "operationId": "CreateOutboundResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineOutboundResource"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateOutboundResourceRequest"
            }
          }
        ],
        "tags": [
          "OutboundResourceService"
        ]
      }
    },
    "/call_center/resources/{id}": {
      "get": {
        "summary": "OutboundResource item",
        "operationId": "ReadOutboundResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineOutboundResource"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "OutboundResourceService"
        ]
      },
      "delete": {
        "summary": "Remove OutboundResource",
        "operationId": "DeleteOutboundResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineOutboundResource"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "OutboundResourceService"
        ]
      },
      "put": {
        "summary": "Update OutboundResource",
        "operationId": "UpdateOutboundResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineOutboundResource"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OutboundResourceServiceUpdateOutboundResourceBody"
            }
          }
        ],
        "tags": [
          "OutboundResourceService"
        ]
      },
      "patch": {
        "summary": "Patch OutboundResource",
        "operationId": "PatchOutboundResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineOutboundResource"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OutboundResourceServicePatchOutboundResourceBody"
            }
          }
        ],
        "tags": [
          "OutboundResourceService"
        ]
      }
    },
    "/call_center/resources/{resource_id}/display": {
      "get": {
        "summary": "List of ResourceDisplay",
        "operationId": "SearchOutboundResourceDisplay",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListOutboundResourceDisplay"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "resource_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "OutboundResourceService"
        ]
      },
      "delete": {
        "summary": "Remove ResourceDisplays",
        "operationId": "DeleteOutboundResourceDisplays",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineEmptyResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "resource_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "items",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "OutboundResourceService"
        ]
      },
      "post": {
        "summary": "Create CreateOutboundResourceDisplay",
        "operationId": "CreateOutboundResourceDisplay",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineResourceDisplay"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "resource_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OutboundResourceServiceCreateOutboundResourceDisplayBody"
            }
          }
        ],
        "tags": [
          "OutboundResourceService"
        ]
      }
    },
    "/call_center/resources/{resource_id}/display/bulk": {
      "post": {
        "summary": "Create CreateOutboundResourceDisplay",
        "operationId": "CreateOutboundResourceDisplayBulk",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListResourceDisplay"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "resource_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OutboundResourceServiceCreateOutboundResourceDisplayBulkBody"
            }
          }
        ],
        "tags": [
          "OutboundResourceService"
        ]
      }
    },
    "/call_center/resources/{resource_id}/display/{id}": {
      "get": {
        "summary": "ResourceDisplay item",
        "operationId": "ReadOutboundResourceDisplay",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineResourceDisplay"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "resource_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "OutboundResourceService"
        ]
      },
      "delete": {
        "summary": "Remove ResourceDisplay",
        "operationId": "DeleteOutboundResourceDisplay",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineResourceDisplay"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "resource_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "OutboundResourceService"
        ]
      },
      "put": {
        "summary": "Update ResourceDisplay",
        "operationId": "UpdateOutboundResourceDisplay",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineResourceDisplay"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "resource_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OutboundResourceServiceUpdateOutboundResourceDisplayBody"
            }
          }
        ],
        "tags": [
          "OutboundResourceService"
        ]
      }
    },
    "/call_center/skills": {
      "get": {
        "summary": "List of Skill",
        "operationId": "SearchSkill",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListSkill"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "SkillService"
        ]
      },
      "post": {
        "summary": "Create Skill",
        "operationId": "CreateSkill",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineSkill"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateSkillRequest"
            }
          }
        ],
        "tags": [
          "SkillService"
        ]
      }
    },
    "/call_center/skills/{id}": {
      "get": {
        "summary": "Skill item",
        "operationId": "ReadSkill",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineSkill"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "SkillService"
        ]
      },
      "delete": {
        "summary": "Remove Skill",
        "operationId": "DeleteSkill",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineSkill"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "SkillService"
        ]
      },
      "put": {
        "summary": "Update Skill",
        "operationId": "UpdateSkill",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineSkill"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SkillServiceUpdateSkillBody"
            }
          }
        ],
        "tags": [
          "SkillService"
        ]
      }
    },
    "/call_center/skills/{skill_id}/agents": {
      "get": {
        "summary": "For agents\nSearchSkillAgent",
        "operationId": "SearchSkillAgent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListSkillAgent"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "skill_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "agent_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "SkillService"
        ]
      },
      "delete": {
        "operationId": "DeleteSkillAgent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineDeleteSkillAgentResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "skill_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SkillServiceDeleteSkillAgentBody"
            }
          }
        ],
        "tags": [
          "SkillService"
        ]
      },
      "post": {
        "operationId": "CreateSkillAgent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineCreateSkillAgentResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "skill_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SkillServiceCreateSkillAgentBody"
            }
          }
        ],
        "tags": [
          "SkillService"
        ]
      },
      "patch": {
        "operationId": "PatchSkillAgent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/enginePatchSkillAgentResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "skill_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SkillServicePatchSkillAgentBody"
            }
          }
        ],
        "tags": [
          "SkillService"
        ]
      }
    },
    "/call_center/teams": {
      "get": {
        "summary": "List of AgentTeam",
        "operationId": "SearchAgentTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListAgentTeam"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "strategy",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "admin_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "AgentTeamService"
        ]
      },
      "post": {
        "summary": "Create AgentTeam",
        "operationId": "CreateAgentTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgentTeam"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateAgentTeamRequest"
            }
          }
        ],
        "tags": [
          "AgentTeamService"
        ]
      }
    },
    "/call_center/teams/triggers/agent": {
      "get": {
        "operationId": "SearchAgentTrigger",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListTeamTrigger"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "team_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "schema_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "TeamTriggerService"
        ]
      }
    },
    "/call_center/teams/triggers/{trigger_id}": {
      "post": {
        "operationId": "RunTeamTrigger",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineRunTeamTriggerResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "trigger_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TeamTriggerServiceRunTeamTriggerBody"
            }
          }
        ],
        "tags": [
          "TeamTriggerService"
        ]
      }
    },
    "/call_center/teams/{id}": {
      "get": {
        "summary": "AgentTeam item",
        "operationId": "ReadAgentTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgentTeam"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AgentTeamService"
        ]
      },
      "delete": {
        "summary": "Remove AgentTeam",
        "operationId": "DeleteAgentTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgentTeam"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AgentTeamService"
        ]
      },
      "put": {
        "summary": "Update AgentTeam",
        "operationId": "UpdateAgentTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineAgentTeam"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentTeamServiceUpdateAgentTeamBody"
            }
          }
        ],
        "tags": [
          "AgentTeamService"
        ]
      }
    },
    "/call_center/teams/{team_id}/hooks": {
      "get": {
        "operationId": "SearchTeamHook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListTeamHook"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "schema_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "event",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "teamHookEventUndefined",
                "agent_status"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "TeamHookService"
        ]
      },
      "post": {
        "operationId": "CreateTeamHook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineTeamHook"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TeamHookServiceCreateTeamHookBody"
            }
          }
        ],
        "tags": [
          "TeamHookService"
        ]
      }
    },
    "/call_center/teams/{team_id}/hooks/{id}": {
      "get": {
        "operationId": "ReadTeamHook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineTeamHook"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "TeamHookService"
        ]
      },
      "delete": {
        "operationId": "DeleteTeamHook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineTeamHook"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "TeamHookService"
        ]
      },
      "put": {
        "operationId": "UpdateTeamHook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineTeamHook"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TeamHookServiceUpdateTeamHookBody"
            }
          }
        ],
        "tags": [
          "TeamHookService"
        ]
      },
      "patch": {
        "operationId": "PatchTeamHook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineTeamHook"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TeamHookServicePatchTeamHookBody"
            }
          }
        ],
        "tags": [
          "TeamHookService"
        ]
      }
    },
    "/call_center/teams/{team_id}/triggers": {
      "get": {
        "operationId": "SearchTeamTrigger",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListTeamTrigger"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "schema_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "TeamTriggerService"
        ]
      },
      "post": {
        "operationId": "CreateTeamTrigger",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineTeamTrigger"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TeamTriggerServiceCreateTeamTriggerBody"
            }
          }
        ],
        "tags": [
          "TeamTriggerService"
        ]
      }
    },
    "/call_center/teams/{team_id}/triggers/{id}": {
      "get": {
        "operationId": "ReadTeamTrigger",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineTeamTrigger"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "TeamTriggerService"
        ]
      },
      "delete": {
        "operationId": "DeleteTeamTrigger",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineTeamTrigger"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "TeamTriggerService"
        ]
      },
      "put": {
        "operationId": "UpdateTeamTrigger",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineTeamTrigger"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TeamTriggerServiceUpdateTeamTriggerBody"
            }
          }
        ],
        "tags": [
          "TeamTriggerService"
        ]
      },
      "patch": {
        "operationId": "PatchTeamTrigger",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineTeamTrigger"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TeamTriggerServicePatchTeamTriggerBody"
            }
          }
        ],
        "tags": [
          "TeamTriggerService"
        ]
      }
    },
    "/call_center/users": {
      "get": {
        "summary": "List of UserStatus",
        "operationId": "SearchUserStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListUserStatus"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/calls": {
      "post": {
        "operationId": "CreateCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineCreateCallResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateCallRequest"
            }
          }
        ],
        "tags": [
          "CallService"
        ]
      }
    },
    "/calls/active": {
      "get": {
        "operationId": "SearchActiveCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListCall"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "created_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "created_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "agent_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "queue_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "team_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "member_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "gateway_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "duration.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "duration.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "skip_parent",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parent_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cause",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "exists_file",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "number",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "answered_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "answered_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "missed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "stored_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "stored_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "supervisor_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CallService"
        ]
      }
    },
    "/calls/active/{id}": {
      "get": {
        "summary": "Call item",
        "operationId": "ReadCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineActiveCall"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "CallService"
        ]
      },
      "delete": {
        "operationId": "HangupCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineHangupCallResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CallServiceHangupCallBody"
            }
          }
        ],
        "tags": [
          "CallService"
        ]
      }
    },
    "/calls/active/{id}/confirm_push": {
      "patch": {
        "summary": "Call item",
        "operationId": "ConfirmPush",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineConfirmPushResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CallService"
        ]
      }
    },
    "/calls/active/{id}/dtmf": {
      "patch": {
        "operationId": "DtmfCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineDtmfCallResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CallServiceDtmfCallBody"
            }
          }
        ],
        "tags": [
          "CallService"
        ]
      }
    },
    "/calls/active/{id}/eavesdrop": {
      "post": {
        "operationId": "EavesdropCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineCreateCallResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CallServiceEavesdropCallBody"
            }
          }
        ],
        "tags": [
          "CallService"
        ]
      }
    },
    "/calls/active/{id}/hold": {
      "patch": {
        "operationId": "HoldCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineHoldCallResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CallServiceHoldCallBody"
            }
          }
        ],
        "tags": [
          "CallService"
        ]
      }
    },
    "/calls/active/{id}/transfer": {
      "patch": {
        "operationId": "BlindTransferCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineBlindTransferCallResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CallServiceBlindTransferCallBody"
            }
          }
        ],
        "tags": [
          "CallService"
        ]
      }
    },
    "/calls/active/{id}/unhold": {
      "patch": {
        "operationId": "UnHoldCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineHoldCallResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CallServiceUnHoldCallBody"
            }
          }
        ],
        "tags": [
          "CallService"
        ]
      }
    },
    "/calls/active/{id}/variables": {
      "patch": {
        "operationId": "SetVariablesCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineSetVariablesCallResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CallServiceSetVariablesCallBody"
            }
          }
        ],
        "tags": [
          "CallService"
        ]
      }
    },
    "/calls/history": {
      "get": {
        "summary": "List of call",
        "operationId": "SearchHistoryCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListHistoryCall"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "created_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "created_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "agent_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "queue_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "team_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "member_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "gateway_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "duration.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "duration.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "skip_parent",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parent_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cause",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "has_file",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "number",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "answered_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "answered_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "missed",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "stored_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "stored_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "transfer_from",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "transfer_to",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dependency_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "variables[string]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "amd_result",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fts",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "directions",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "has_transcript",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "agent_description",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "grantee_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "amd_ai_result",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "talk.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "talk.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "rated",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "rated_by",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "score_required.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "score_required.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "score_optional.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "score_optional.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "rated_user",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "contact_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "schema_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "has_transfer",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "timeline",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "CallService"
        ]
      },
      "post": {
        "summary": "List of call",
        "operationId": "SearchHistoryCallPost",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListHistoryCall"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineSearchHistoryCallRequest"
            }
          }
        ],
        "tags": [
          "CallService"
        ]
      }
    },
    "/calls/history/aggregate": {
      "post": {
        "operationId": "AggregateHistoryCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListAggregate"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineAggregateHistoryCallRequest"
            }
          }
        ],
        "tags": [
          "CallService"
        ]
      }
    },
    "/calls/history/{call_id}/annotation": {
      "post": {
        "operationId": "CreateCallAnnotation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineCallAnnotation"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "call_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CallServiceCreateCallAnnotationBody"
            }
          }
        ],
        "tags": [
          "CallService"
        ]
      }
    },
    "/calls/history/{call_id}/annotation/{id}": {
      "delete": {
        "operationId": "DeleteCallAnnotation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineCallAnnotation"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "call_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "CallService"
        ]
      },
      "put": {
        "operationId": "UpdateCallAnnotation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineCallAnnotation"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "call_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CallServiceUpdateCallAnnotationBody"
            }
          }
        ],
        "tags": [
          "CallService"
        ]
      }
    },
    "/calls/history/{call_id}/redial": {
      "post": {
        "operationId": "RedialCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineCreateCallResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "call_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CallServiceRedialCallBody"
            }
          }
        ],
        "tags": [
          "CallService"
        ]
      }
    },
    "/calls/history/{id}": {
      "patch": {
        "operationId": "PatchHistoryCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineHistoryCall"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CallServicePatchHistoryCallBody"
            }
          }
        ],
        "tags": [
          "CallService"
        ]
      }
    },
    "/cases": {
      "get": {
        "summary": "RPC method for searching cases.",
        "operationId": "SearchCases",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCaseList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "Page number for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Number of results per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Query string for searching cases.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ids",
            "description": "List of specific case IDs to retrieve.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "Sorting criteria (e.g., field:asc).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "List of fields to include in the response.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filters",
            "description": "Key-value pairs for additional filtering.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "contact_id",
            "description": "Contact ID for filtering cases.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cases"
        ]
      },
      "post": {
        "summary": "RPC method for creating a new case.",
        "operationId": "CreateCase",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCase"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "input",
            "description": "Input data for creating the case.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputCreateCase"
            }
          },
          {
            "name": "fields",
            "description": "List of fields to include in the response.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Cases"
        ]
      }
    },
    "/cases/catalogs": {
      "get": {
        "summary": "Retrieve a list of catalogs or search catalogs",
        "operationId": "ListCatalogs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCatalogList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "Page number for pagination",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Number of records per page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.\nIf the user passes \"-\" as the value for fields,\nit will retrieve all available fields for each catalog.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "Sorting options by fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "List of IDs to filter the catalogs",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "query",
            "description": "Search query string for filtering by name. Supports:\n- Wildcards (*) for substring matching\n- Placeholder (?) for single character substitution\n- Exact match for full names",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "description": "Filter by state (true for active, false for inactive)",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "depth",
            "description": "Filter by the depth of the hierarchy to retrieve services.\nThe depth indicates how many ancestor levels of services\nwill be included for each catalog.\n- A depth of 0 includes only the direct catalog.\n- A depth of 1 includes the catalog and its immediate services.\n- By default the depth is limited by 3,\n  meaning all nested services and sub-services will be included.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "sub_fields",
            "description": "Fields to be retrieved as a result for [SUBSERVICES].\nIf the user passes \"-\" as the value for fields,\nit will retrieve all available fields for each catalog subservices.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "hasSubservices",
            "description": "Filter catalogs with subservices",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Catalogs"
        ]
      },
      "post": {
        "summary": "Create a new catalog",
        "operationId": "CreateCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCatalog"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputCatalog"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Catalogs"
        ]
      }
    },
    "/cases/catalogs/{id}": {
      "get": {
        "summary": "Locate a catalog by ID",
        "operationId": "LocateCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesLocateCatalogResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the catalog to be located",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.\nIf the user passes \"-\" as the value for fields,\nit will retrieve all available fields for each catalog.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sub_fields",
            "description": "Fields to be retrieved as a result for [SUBSERVICES].\nIf the user passes \"-\" as the value for fields,\nit will retrieve all available fields for each catalog subservices.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Catalogs"
        ]
      },
      "delete": {
        "summary": "Delete a catalog",
        "operationId": "DeleteCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCatalogList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the catalog to be deleted",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "csv",
            "minItems": 1
          }
        ],
        "tags": [
          "Catalogs"
        ]
      },
      "put": {
        "summary": "Update an existing catalog",
        "operationId": "UpdateCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCatalog"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the catalog to be updated",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "description": "Input data for updating the catalog",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputCatalog"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Catalogs"
        ]
      },
      "patch": {
        "summary": "Update an existing catalog",
        "operationId": "UpdateCatalog2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCatalog"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the catalog to be updated",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "description": "Input data for updating the catalog",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputCatalog"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Catalogs"
        ]
      }
    },
    "/cases/close_reason_groups": {
      "get": {
        "summary": "Retrieve a list of close reason groups or search close reason groups",
        "operationId": "ListCloseReasonGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCloseReasonGroupList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CloseReasonGroups"
        ]
      },
      "post": {
        "summary": "Create a new close reason group",
        "operationId": "CreateCloseReasonGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCloseReasonGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputCloseReasonGroup"
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CloseReasonGroups"
        ]
      }
    },
    "/cases/close_reason_groups/{id}": {
      "get": {
        "summary": "Locate a close reason group by ID",
        "operationId": "LocateCloseReasonGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesLocateCloseReasonGroupResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CloseReasonGroups"
        ]
      },
      "delete": {
        "summary": "Delete a close reason group",
        "operationId": "DeleteCloseReasonGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCloseReasonGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "CloseReasonGroups"
        ]
      },
      "put": {
        "summary": "Update an existing close reason group",
        "operationId": "UpdateCloseReasonGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCloseReasonGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputCloseReasonGroup"
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CloseReasonGroups"
        ]
      },
      "patch": {
        "summary": "Update an existing close reason group",
        "operationId": "UpdateCloseReasonGroup2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCloseReasonGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputCloseReasonGroup"
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CloseReasonGroups"
        ]
      }
    },
    "/cases/comments/{etag}": {
      "get": {
        "summary": "Retrieve a specific comment by its etag",
        "operationId": "LocateComment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCaseComment"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "etag",
            "description": "Identifier of the comment to retrieve.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Specific fields to return for the comment.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CaseComments"
        ]
      },
      "delete": {
        "summary": "Delete a specific comment by its etag",
        "operationId": "DeleteComment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCaseComment"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "etag",
            "description": "Identifier of the comment to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to return after deletion.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CaseComments"
        ]
      }
    },
    "/cases/comments/{input.etag}": {
      "put": {
        "summary": "Update a specific comment by its etag",
        "operationId": "UpdateComment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCaseComment"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "input.etag",
            "description": "Identifier for the comment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Data for the comment to update.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "text": "My new comment"
              },
              "properties": {
                "text": {
                  "type": "string",
                  "description": "Content of the comment."
                },
                "userID": {
                  "$ref": "#/definitions/generalLookup",
                  "description": "Optional creator / updater ID. Use this to explicitly set the case creator / updater instead of deriving it from the auth token."
                }
              },
              "title": "Data for the comment to update."
            }
          },
          {
            "name": "fields",
            "description": "Fields to include in the response.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CaseComments"
        ]
      },
      "patch": {
        "summary": "Update a specific comment by its etag",
        "operationId": "UpdateComment2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCaseComment"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "input.etag",
            "description": "Identifier for the comment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Data for the comment to update.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "text": "My new comment"
              },
              "properties": {
                "text": {
                  "type": "string",
                  "description": "Content of the comment."
                },
                "userID": {
                  "$ref": "#/definitions/generalLookup",
                  "description": "Optional creator / updater ID. Use this to explicitly set the case creator / updater instead of deriving it from the auth token."
                }
              },
              "title": "Data for the comment to update."
            }
          },
          {
            "name": "fields",
            "description": "Fields to include in the response.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CaseComments"
        ]
      }
    },
    "/cases/priorities": {
      "get": {
        "summary": "Retrieve a list of priorities or search priorities",
        "operationId": "ListPriorities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesPriorityList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Filter by unique IDs.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search query string for filtering by name. Supports:\n- Wildcards (*) for substring matching\n- Placeholder (?) for single character substitution\n- Exact match for full names",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "notInSla",
            "description": "Filter priorities that are not in filtered SLA",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "inSlaCond",
            "description": "Filter priorities that are in filtered SlaCondition and not in current SLA",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Priorities"
        ]
      },
      "post": {
        "summary": "Create a new priority",
        "operationId": "CreatePriority",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesPriority"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputPriority"
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Priorities"
        ]
      }
    },
    "/cases/priorities/{id}": {
      "get": {
        "summary": "Locate a priority by ID",
        "operationId": "LocatePriority",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesLocatePriorityResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the priority to be located",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Priorities"
        ]
      },
      "delete": {
        "summary": "Delete a priority",
        "operationId": "DeletePriority",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesPriority"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Priorities"
        ]
      },
      "put": {
        "summary": "Update an existing priority",
        "operationId": "UpdatePriority",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesPriority"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputPriority"
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Priorities"
        ]
      },
      "patch": {
        "summary": "Update an existing priority",
        "operationId": "UpdatePriority2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesPriority"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputPriority"
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Priorities"
        ]
      }
    },
    "/cases/services": {
      "get": {
        "summary": "Retrieve a list of services or search services within a catalog",
        "operationId": "ListServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesServiceList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "Page number for pagination",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Number of records per page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Sorting options by fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "List of IDs to filter the services",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search query string for filtering by name. Supports:\n- Wildcards (*) for substring matching\n- Placeholder (?) for single character substitution\n- Exact match for full names",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "root_id",
            "description": "Filter services by catalog ID (required)",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "state",
            "description": "Filter by state (true for active, false for inactive)",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Services"
        ]
      },
      "post": {
        "summary": "Create a new service within a catalog",
        "operationId": "CreateService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesService"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputCreateService"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/cases/services/{id}": {
      "get": {
        "summary": "Locate a service by ID",
        "operationId": "LocateService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesLocateServiceResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the service to be located",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Services"
        ]
      },
      "delete": {
        "summary": "Delete a service",
        "operationId": "DeleteService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesServiceList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the service to be deleted",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "csv",
            "minItems": 1
          }
        ],
        "tags": [
          "Services"
        ]
      },
      "put": {
        "summary": "Update an existing service",
        "operationId": "UpdateService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesService"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the service to be updated",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "description": "Input data for updating the service",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputService"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Services"
        ]
      },
      "patch": {
        "summary": "Update an existing service",
        "operationId": "UpdateService2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesService"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of the service to be updated",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "description": "Input data for updating the service",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputService"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/cases/slas": {
      "get": {
        "summary": "Retrieve a list of SLAs or search SLA conditions",
        "operationId": "ListSLAs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesSLAList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Filter by unique IDs.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search query string for filtering by name. Supports:\n- Wildcards (*) for substring matching\n- Placeholder (?) for single character substitution\n- Exact match for full names",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SLAs"
        ]
      },
      "post": {
        "summary": "Create a new SLA",
        "operationId": "CreateSLA",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesSLA"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputSLA"
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "SLAs"
        ]
      }
    },
    "/cases/slas/{id}": {
      "get": {
        "summary": "Locate an SLA by ID",
        "operationId": "LocateSLA",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesLocateSLAResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "SLAs"
        ]
      },
      "delete": {
        "summary": "Delete an SLA",
        "operationId": "DeleteSLA",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesSLA"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "SLAs"
        ]
      },
      "put": {
        "summary": "Update an existing SLA",
        "operationId": "UpdateSLA",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesSLA"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputSLA"
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "SLAs"
        ]
      },
      "patch": {
        "summary": "Update an existing SLA",
        "operationId": "UpdateSLA2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesSLA"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputSLA"
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "SLAs"
        ]
      }
    },
    "/cases/sources": {
      "get": {
        "summary": "Retrieve a list of sources or search sources",
        "operationId": "ListSources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesSourceList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Filter by unique IDs.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search query string for filtering by name. Supports:\n- Wildcards (*) for substring matching\n- Placeholder (?) for single character substitution\n- Exact match for full names",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "description": "Filter by source type.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "TYPE_UNSPECIFIED",
                "CALL",
                "CHAT",
                "SOCIAL_MEDIA",
                "EMAIL",
                "API",
                "MANUAL"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Sources"
        ]
      },
      "post": {
        "summary": "Create a new source",
        "operationId": "CreateSource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesSource"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "input",
            "description": "Main input payload for the source being created",
            "in": "body",
            "required": true,
            "schema": {
              "format": "object",
              "$ref": "#/definitions/casesInputSource",
              "example": {
                "name": "Inbound",
                "description": "For inbound communication",
                "type": "CALL"
              },
              "description": "The input data for the source",
              "required": [
                "input"
              ]
            }
          },
          {
            "name": "fields",
            "description": "Optional list of specific fields to return after creation\n\nSpecific fields to include in response",
            "in": "query",
            "required": false,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Sources"
        ]
      }
    },
    "/cases/sources/{id}": {
      "get": {
        "summary": "Locate a source by ID",
        "operationId": "LocateSource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesLocateSourceResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the source to locate.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Sources"
        ]
      },
      "delete": {
        "summary": "Delete a source",
        "operationId": "DeleteSource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesSource"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the source to delete.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Sources"
        ]
      },
      "put": {
        "summary": "Update an existing source",
        "operationId": "UpdateSource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesSource"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputSource"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Sources"
        ]
      },
      "patch": {
        "summary": "Update an existing source",
        "operationId": "UpdateSource2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesSource"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputSource"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Sources"
        ]
      }
    },
    "/cases/statuses": {
      "get": {
        "summary": "Retrieve a list of statuses or search statuses",
        "operationId": "ListStatuses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesStatusList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Filter by unique IDs.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search query string for filtering by name. Supports:\n- Wildcards (*) for substring matching\n- Placeholder (?) for single character substitution\n- Exact match for full names",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Statuses"
        ]
      },
      "post": {
        "summary": "Create a new status",
        "operationId": "CreateStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcasesStatus"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputStatus"
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Statuses"
        ]
      }
    },
    "/cases/statuses/{id}": {
      "get": {
        "summary": "Locate a status by ID",
        "operationId": "LocateStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesLocateStatusResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Statuses"
        ]
      },
      "delete": {
        "summary": "Delete a status",
        "operationId": "DeleteStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcasesStatus"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Statuses"
        ]
      },
      "put": {
        "summary": "Update an existing status",
        "operationId": "UpdateStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcasesStatus"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputStatus"
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Statuses"
        ]
      },
      "patch": {
        "summary": "Update an existing status",
        "operationId": "UpdateStatus2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcasesStatus"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputStatus"
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Statuses"
        ]
      }
    },
    "/cases/{case_etag}/comments": {
      "get": {
        "summary": "Retrieve a list of comments associated with a specific case",
        "operationId": "ListComments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCaseCommentList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "case_etag",
            "description": "Etag or ID of the case for which comments are requested.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Number of comments per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Query string for search.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ids",
            "description": "Array of requested id.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "Sorting order.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to return for each comment.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CaseComments"
        ]
      },
      "post": {
        "summary": "Publish comment into a specific case",
        "operationId": "PublishComment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCaseComment"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "case_etag",
            "description": "Etag or ID of the case to which comments belong.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Comment to publish.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputCaseComment"
            }
          },
          {
            "name": "fields",
            "description": "Result fields to include in the response.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CaseComments"
        ]
      }
    },
    "/cases/{case_etag}/communication": {
      "get": {
        "summary": "Lists all communications linked to a specific case.\nCurrently a feature for future development.",
        "operationId": "ListCommunications",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesListCommunicationsResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "case_etag",
            "description": "Case identifier.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "List of fields to include in the response.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Query string for filtering results.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "description": "Number of records per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "Page number for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Sorting order.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CaseCommunications"
        ]
      },
      "post": {
        "summary": "Links a communication to a specific case.",
        "operationId": "LinkCommunication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesLinkCommunicationResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "case_etag",
            "description": "Case identifier.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Input data for the communications to link.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputCaseCommunication"
            }
          },
          {
            "name": "fields",
            "description": "List of fields to include in the response.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CaseCommunications"
        ]
      }
    },
    "/cases/{case_etag}/communication/{id}": {
      "delete": {
        "summary": "Unlinks a communication from a specific case.",
        "operationId": "UnlinkCommunication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesUnlinkCommunicationResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "case_etag",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Communication identifier.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "List of fields to include in the response.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CaseCommunications"
        ]
      }
    },
    "/cases/{case_etag}/files": {
      "get": {
        "summary": "Retrieve a list of files associated with a case",
        "operationId": "ListFiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCaseFileList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "case_etag",
            "description": "ID of the case to fetch files for (required).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "The page number to retrieve.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Number of items per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to include in the response.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "ids",
            "description": "Array of requested id.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "Sorting",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CaseFiles"
        ]
      }
    },
    "/cases/{case_etag}/files/{id}": {
      "delete": {
        "summary": "Delete a file",
        "operationId": "DeleteFile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcasesFile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "case_etag",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "The unique ID of the file to delete.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "CaseFiles"
        ]
      }
    },
    "/cases/{case_etag}/links": {
      "get": {
        "summary": "With Case",
        "operationId": "ListLinks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCaseLinkList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "case_etag",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CaseLinks"
        ]
      },
      "post": {
        "operationId": "CreateLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCaseLink"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "case_etag",
            "description": "new comment link",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "result fields needed on the front-end for each comment",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "input.etag",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "input.url",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "input.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "input.userID.id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input.userID.name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CaseLinks"
        ]
      }
    },
    "/cases/{case_etag}/links/{etag}": {
      "get": {
        "operationId": "LocateLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCaseLink"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "case_etag",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "(id allowed)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CaseLinks"
        ]
      },
      "delete": {
        "operationId": "DeleteLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCaseLink"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "case_etag",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CaseLinks"
        ]
      }
    },
    "/cases/{case_etag}/links/{input.etag}": {
      "put": {
        "operationId": "UpdateLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCaseLink"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "case_etag",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input.etag",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "userID": {
                  "$ref": "#/definitions/generalLookup",
                  "description": "Optional creator / updater ID. Use this to explicitly set the case creator / updater instead of deriving it from the auth token."
                }
              }
            }
          },
          {
            "name": "fields",
            "description": "on return",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CaseLinks"
        ]
      },
      "patch": {
        "operationId": "UpdateLink2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCaseLink"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "case_etag",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input.etag",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "userID": {
                  "$ref": "#/definitions/generalLookup",
                  "description": "Optional creator / updater ID. Use this to explicitly set the case creator / updater instead of deriving it from the auth token."
                }
              }
            }
          },
          {
            "name": "fields",
            "description": "on return",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CaseLinks"
        ]
      }
    },
    "/cases/{case_id}/chat/{chat_id}/messages": {
      "get": {
        "operationId": "GetCaseChatHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chatChatMessages"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "case_id",
            "description": "Contact identificator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "chat_id",
            "description": "Unique chat dialog",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset.id",
            "description": "Messages ONLY starting from the specified message ID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offset.date",
            "description": "Messages ONLY been sent before the specified epochtime(milli).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "size",
            "description": "Number of messages to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: message.text",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "group[string]",
            "description": "Includes the history of ONLY those dialogs\nwhose member channel(s) contain\na specified set of variables.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CasesChatCatalog"
        ]
      }
    },
    "/cases/{case_id}/timeline": {
      "get": {
        "operationId": "GetTimeline",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcasesGetTimelineResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "case_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "chat",
                "call",
                "email"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CaseTimeline"
        ]
      }
    },
    "/cases/{case_id}/timeline/counter": {
      "get": {
        "operationId": "GetTimelineCounter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcasesGetTimelineCounterResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "case_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CaseTimeline"
        ]
      }
    },
    "/cases/{etag}": {
      "get": {
        "summary": "RPC method to retrieve a specific case by its etag identifier.",
        "operationId": "LocateCase",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCase"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "etag",
            "description": "Unique etag identifier of the case.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "List of fields to include in the response.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Cases"
        ]
      },
      "delete": {
        "summary": "RPC method for deleting an existing case by its etag.",
        "operationId": "DeleteCase",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCase"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "etag",
            "description": "Unique etag identifier of the case.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "List of fields to include in the deleted case response.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Cases"
        ]
      }
    },
    "/cases/{input.etag}": {
      "put": {
        "summary": "RPC method for updating an existing case.",
        "operationId": "UpdateCase",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCase"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "input.etag",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Input data with updated fields.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "subject": {
                  "type": "string",
                  "title": "create: required;"
                },
                "description": {
                  "type": "string",
                  "title": "create: not required;"
                },
                "contact_info": {
                  "type": "string",
                  "title": "create: not required;"
                },
                "assignee": {
                  "$ref": "#/definitions/generalLookup",
                  "title": "create: not required, default from service or set by UI;"
                },
                "reporter": {
                  "$ref": "#/definitions/generalLookup",
                  "title": "create: required (if empty recognize as anonymous contact);"
                },
                "impacted": {
                  "$ref": "#/definitions/generalLookup",
                  "title": "create: required, default is reporter or ui (if empty recognize as anonymous);"
                },
                "group": {
                  "$ref": "#/definitions/generalLookup",
                  "title": "create: not required, default from service or set by UI;"
                },
                "status": {
                  "$ref": "#/definitions/generalLookup",
                  "title": "create: not required, default initial value from status lookup or ui;"
                },
                "priority": {
                  "$ref": "#/definitions/generalLookup",
                  "title": "create: not required, default first value from priority lookup"
                },
                "source": {
                  "$ref": "#/definitions/generalLookup",
                  "title": "source of the case"
                },
                "service": {
                  "$ref": "#/definitions/generalLookup",
                  "title": "on this field base many other readonly fields on return"
                },
                "close_reason": {
                  "$ref": "#/definitions/generalLookup",
                  "title": "create: not required;"
                },
                "close_result": {
                  "type": "string",
                  "title": "create: not required; update: required only when case status goes to the final state"
                },
                "rating": {
                  "type": "string",
                  "format": "int64"
                },
                "rating_comment": {
                  "type": "string"
                },
                "status_condition": {
                  "$ref": "#/definitions/casesStatusCondition"
                },
                "userID": {
                  "$ref": "#/definitions/generalLookup",
                  "description": "Optional creator / updater ID. Use this to explicitly set the case creator / updater instead of deriving it from the auth token."
                },
                "custom": {
                  "type": "object",
                  "description": "Custom data extension fields .."
                }
              },
              "title": "Input data with updated fields."
            }
          },
          {
            "name": "x_json_mask",
            "description": "List of JSON fields to update.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "List of fields to include in the response.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Cases"
        ]
      },
      "patch": {
        "summary": "RPC method for updating an existing case.",
        "operationId": "UpdateCase2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCase"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "input.etag",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Input data with updated fields.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "subject": {
                  "type": "string",
                  "title": "create: required;"
                },
                "description": {
                  "type": "string",
                  "title": "create: not required;"
                },
                "contact_info": {
                  "type": "string",
                  "title": "create: not required;"
                },
                "assignee": {
                  "$ref": "#/definitions/generalLookup",
                  "title": "create: not required, default from service or set by UI;"
                },
                "reporter": {
                  "$ref": "#/definitions/generalLookup",
                  "title": "create: required (if empty recognize as anonymous contact);"
                },
                "impacted": {
                  "$ref": "#/definitions/generalLookup",
                  "title": "create: required, default is reporter or ui (if empty recognize as anonymous);"
                },
                "group": {
                  "$ref": "#/definitions/generalLookup",
                  "title": "create: not required, default from service or set by UI;"
                },
                "status": {
                  "$ref": "#/definitions/generalLookup",
                  "title": "create: not required, default initial value from status lookup or ui;"
                },
                "priority": {
                  "$ref": "#/definitions/generalLookup",
                  "title": "create: not required, default first value from priority lookup"
                },
                "source": {
                  "$ref": "#/definitions/generalLookup",
                  "title": "source of the case"
                },
                "service": {
                  "$ref": "#/definitions/generalLookup",
                  "title": "on this field base many other readonly fields on return"
                },
                "close_reason": {
                  "$ref": "#/definitions/generalLookup",
                  "title": "create: not required;"
                },
                "close_result": {
                  "type": "string",
                  "title": "create: not required; update: required only when case status goes to the final state"
                },
                "rating": {
                  "type": "string",
                  "format": "int64"
                },
                "rating_comment": {
                  "type": "string"
                },
                "status_condition": {
                  "$ref": "#/definitions/casesStatusCondition"
                },
                "userID": {
                  "$ref": "#/definitions/generalLookup",
                  "description": "Optional creator / updater ID. Use this to explicitly set the case creator / updater instead of deriving it from the auth token."
                },
                "custom": {
                  "type": "object",
                  "description": "Custom data extension fields .."
                }
              },
              "title": "Input data with updated fields."
            }
          },
          {
            "name": "x_json_mask",
            "description": "List of JSON fields to update.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "List of fields to include in the response.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Cases"
        ]
      }
    },
    "/cases/{input.primary_case.id}/related/{etag}": {
      "put": {
        "summary": "Update an existing related case",
        "operationId": "UpdateRelatedCase",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesRelatedCase"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "input.primary_case.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "etag",
            "description": "Identifier of the related case to update.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Input data for the related case update.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "relation_type": {
                  "$ref": "#/definitions/casesRelationType",
                  "description": "Relation type."
                },
                "primary_case": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  },
                  "description": "Primary case details.",
                  "title": "Primary case details."
                },
                "related_case": {
                  "$ref": "#/definitions/generalLookup",
                  "description": "Related case details."
                },
                "userID": {
                  "$ref": "#/definitions/generalLookup",
                  "description": "Optional creator / updater ID. Use this to explicitly set the case creator / updater instead of deriving it from the auth token."
                }
              },
              "title": "Input data for the related case update."
            }
          },
          {
            "name": "fields",
            "description": "Fields to include in the response.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "RelatedCases"
        ]
      },
      "patch": {
        "summary": "Update an existing related case",
        "operationId": "UpdateRelatedCase2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesRelatedCase"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "input.primary_case.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "etag",
            "description": "Identifier of the related case to update.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Input data for the related case update.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "relation_type": {
                  "$ref": "#/definitions/casesRelationType",
                  "description": "Relation type."
                },
                "primary_case": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  },
                  "description": "Primary case details.",
                  "title": "Primary case details."
                },
                "related_case": {
                  "$ref": "#/definitions/generalLookup",
                  "description": "Related case details."
                },
                "userID": {
                  "$ref": "#/definitions/generalLookup",
                  "description": "Optional creator / updater ID. Use this to explicitly set the case creator / updater instead of deriving it from the auth token."
                }
              },
              "title": "Input data for the related case update."
            }
          },
          {
            "name": "fields",
            "description": "Fields to include in the response.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "RelatedCases"
        ]
      }
    },
    "/cases/{primary_case_etag}/related": {
      "get": {
        "summary": "List all related cases for a specific case",
        "operationId": "ListRelatedCases",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesRelatedCaseList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "primary_case_etag",
            "description": "Primary Case ID for which related cases are requested.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Number of related cases per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Query string for search.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sorting order.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to return for each related case.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "ids",
            "description": "Filter by ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "RelatedCases"
        ]
      },
      "post": {
        "summary": "Create a new related case",
        "operationId": "CreateRelatedCase",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesRelatedCase"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "primary_case_etag",
            "description": "Primary case details.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Input data for the related case.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesCreateInputRelatedCase"
            }
          },
          {
            "name": "fields",
            "description": "Fields to include in the response.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "RelatedCases"
        ]
      }
    },
    "/cases/{primary_case_etag}/related/{etag}": {
      "get": {
        "summary": "Retrieve a specific related case by ID",
        "operationId": "LocateRelatedCase",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesRelatedCase"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "primary_case_etag",
            "description": "Primary case identifier.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Identifier of the related case.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to return in the response.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "RelatedCases"
        ]
      },
      "delete": {
        "summary": "Delete a specific related case",
        "operationId": "DeleteRelatedCase",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesRelatedCase"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "primary_case_etag",
            "description": "Etag or ID of the primary case",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Identifier of the related case to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RelatedCases"
        ]
      }
    },
    "/chat/broadcast": {
      "post": {
        "summary": "Broadcast message send message from via to peer recipients.",
        "operationId": "BroadcastMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelchatBroadcastMessageResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/webitelchatBroadcastMessageRequest"
            }
          }
        ],
        "tags": [
          "MessagesService"
        ]
      }
    },
    "/chat/customers": {
      "get": {
        "summary": "Query of external chat customers",
        "operationId": "GetCustomers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chatChatCustomers"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "Page number to return. **default**: 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Page records limit. **default**: 16.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: peer{id,name}",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort records by { fields } specification.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields [Q]uery to build result dataset record.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Set of unique contact **ID**entifier(s).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "type",
            "description": "The type of contact to filter.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "via.id",
            "description": "Contact unique **ID**entifier.\nContact **type**-specific string.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "via.type",
            "description": "Contact **type** provider.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "via.name",
            "description": "Contact display **name**.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Catalog"
        ]
      }
    },
    "/chat/dialogs": {
      "get": {
        "summary": "Query of chat conversations",
        "operationId": "GetDialogs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chatChatDialogs"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "Page number to return. **default**: 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Page records limit. **default**: 16.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: peer.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort records by { fields } specification.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields [Q]uery to build result dataset record.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Set of unique chat IDentifier(s).\nAccept: dialog -or- member ID.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "via.id",
            "description": "Contact unique **ID**entifier.\nContact **type**-specific string.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "via.type",
            "description": "Contact **type** provider.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "via.name",
            "description": "Contact display **name**.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "peer.id",
            "description": "Contact unique **ID**entifier.\nContact **type**-specific string.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "peer.type",
            "description": "Contact **type** provider.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "peer.name",
            "description": "Contact display **name**.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "date.since",
            "description": "Since epochtime (milli).\n**Match**: greater than ..",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "date.until",
            "description": "Until epochtime (milli).\n**Match**: less or equal ..",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "online",
            "description": "Dialogs ONLY that are currently [not] active( closed: ? ).",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "group[string]",
            "description": "Includes ONLY those chat dialogs\nwhose member channel(s) contain\na specified set of variables.\n\n10",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Catalog"
        ]
      }
    },
    "/chat/dialogs/{chat_id}/members": {
      "get": {
        "summary": "Query of chat participants",
        "operationId": "GetMembers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chatChatMembers"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "chat_id",
            "description": "ID of the chat dialog.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number to return. **default**: 1.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Page records limit. **default**: 16.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: peer(type;name)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort records by { fields } specification.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields [Q]uery to build result dataset record.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Set of unique chat member ID.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "via.id",
            "description": "Contact unique **ID**entifier.\nContact **type**-specific string.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "via.type",
            "description": "Contact **type** provider.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "via.name",
            "description": "Contact display **name**.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "peer.id",
            "description": "Contact unique **ID**entifier.\nContact **type**-specific string.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "peer.type",
            "description": "Contact **type** provider.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "peer.name",
            "description": "Contact display **name**.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "date.since",
            "description": "Since epochtime (milli).\n**Match**: greater than ..",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "date.until",
            "description": "Until epochtime (milli).\n**Match**: less or equal ..",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "online",
            "description": "Participants ONLY who are currently [not] connected to the chat.\n( left: ( 0 ? online : offline ) )",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "joined",
            "description": "Participants ONLY who have [not] been connected to the chat.\n( join: ( 0 ? [request|abandoned] : connected ) )",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Catalog"
        ]
      }
    },
    "/chat/dialogs/{chat_id}/messages": {
      "get": {
        "summary": "Query of the chat history",
        "operationId": "GetHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chatChatMessages"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "chat_id",
            "description": "Unique chat dialog",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset.id",
            "description": "Messages ONLY starting from the specified message ID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offset.date",
            "description": "Messages ONLY been sent before the specified epochtime(milli).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "limit",
            "description": "Number of messages to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: message.text",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "peer.id",
            "description": "Contact unique **ID**entifier.\nContact **type**-specific string.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "peer.type",
            "description": "Contact **type** provider.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "peer.name",
            "description": "Contact display **name**.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "group[string]",
            "description": "Includes the history of ONLY those dialogs\nwhose member channel(s) contain\na specified set of variables.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Catalog"
        ]
      }
    },
    "/chat/{conversation_id}/contact": {
      "post": {
        "summary": "CreateContactFromConversation creates new contact from the data existing in the conversation and after that links this contact to the external user.",
        "operationId": "CreateContactFromConversation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelchatLookup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone.id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "timezone.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "owner.id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "owner.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "label",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ContactLinkingService"
        ]
      }
    },
    "/chat/{conversation_id}/link": {
      "post": {
        "summary": "LinkContactToClient creates connection between existing internal contact and external client.",
        "operationId": "LinkContactToClient",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelchatEmptyResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "contact_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ContactLinkingService"
        ]
      }
    },
    "/chat/{peer.type}/{peer.id}/messages": {
      "get": {
        "summary": "Query of the chat history",
        "operationId": "GetHistory2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chatChatMessages"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "peer.type",
            "description": "Contact **type** provider.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "peer.id",
            "description": "Contact unique **ID**entifier.\nContact **type**-specific string.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset.id",
            "description": "Messages ONLY starting from the specified message ID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offset.date",
            "description": "Messages ONLY been sent before the specified epochtime(milli).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "limit",
            "description": "Number of messages to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: message.text",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "chat_id",
            "description": "Unique chat dialog",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "peer.name",
            "description": "Contact display **name**.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "group[string][string]",
            "description": "Includes the history of ONLY those dialogs\nwhose member channel(s) contain\na specified set of variables.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Catalog"
        ]
      }
    },
    "/close_reason_groups/{close_reason_group_id}/close_reasons": {
      "get": {
        "summary": "Retrieve a list of close reasons or search close reasons",
        "operationId": "ListCloseReasons",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCloseReasonList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "close_reason_group_id",
            "description": "Close reason group ID filter",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search query string for filtering by name. Supports:\n- Wildcards (*) for substring matching\n- Placeholder (?) for single character substitution\n- Exact match for full names",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CloseReasons"
        ]
      },
      "post": {
        "summary": "Create a new close reason",
        "operationId": "CreateCloseReason",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCloseReason"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "close_reason_group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputCloseReason"
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CloseReasons"
        ]
      }
    },
    "/close_reason_groups/{close_reason_group_id}/close_reasons/{id}": {
      "get": {
        "summary": "Locate a close reason by ID",
        "operationId": "LocateCloseReason",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesLocateCloseReasonResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "close_reason_group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CloseReasons"
        ]
      },
      "delete": {
        "summary": "Delete a close reason",
        "operationId": "DeleteCloseReason",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCloseReason"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "close_reason_group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "CloseReasons"
        ]
      },
      "put": {
        "summary": "Update an existing close reason",
        "operationId": "UpdateCloseReason",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCloseReason"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "close_reason_group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputCloseReason"
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CloseReasons"
        ]
      },
      "patch": {
        "summary": "Update an existing close reason",
        "operationId": "UpdateCloseReason2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCloseReason"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "close_reason_group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputCloseReason"
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CloseReasons"
        ]
      }
    },
    "/contacts": {
      "get": {
        "summary": "Search for Contact(s)",
        "description": "| Field       | Type \n| ----------- | ---- \n| **----------- READ-ONLY -----------** | \n| `id`        | int64 \n| `ver`       | int32 \n| `etag`      | string \n| **---------- OPERATIONAL ----------** | \n| `created_at` | int64(epoch:milli) \n| `created_by` | lookup(user) \n| `updated_at` | int64(epoch:milli) \n| `updated_by` | lookup(user) \n| **---------- ATTRIBUTES -----------** | \n| `name`      | name! \n| `about`     | string \n| `labels`    | list[label!] \n| `emails`    | list[email!] \n| `photos`    | list[photo!] \n| `phones`    | list[phone!] \n| `managers`  | list[manager!] \n| `comments`  | list[comment!] \n| `addresses` | list[address!] \n| `languages` | list[language!] \n| `timezones` | list[timezone!] \n| `variables` | list[variable!] \n| `imclients` | list[imClient!] \n",
        "operationId": "SearchContacts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "Page number of result records.   _default(1); offset=(size*(page-1));_\n\n```javascript\nlet\n    offset = 0\n  , page = req.page\n;\nif (page \u003c= 0)\n    page = 1;\nif (page \u003e 1)\n    offset = ((page-1)*size);\n// . . .\n```",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Limit of result page records count.   _default(16); limit=(size\u003c=0?-1:size+1);_\n\n```javascript\nconst\n    default = 16\n  , maximum = 32\n;\nlet limit = req.size;\nif (limit \u003c= 0)\n    limit = default;\nif (maximum \u003c limit)\n    limit = maximum;\n// . . .\n```",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term:\n`?` - matches any character\n`*` - matches 0 or more characters\nUsed to query records within a set of `qin` fields, eg: name,emails{type},labels etc...",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort result dataset of records by fields.\n```\nsort ::= *( ORDER name )\n\nORDER  = ASC / DESC\nDESC   = \"-\" / \"!\"\nASC    = [ \"+\" ]   ; Default\n```\n\nFields available\n\n- `id`(seq)\n- `domain`{name}\n- `created_at`\n- `created_by`{name}\n- `updated_at`\n- `updated_by`{name}\n\nUse ?fields=`field.sort()` option to sort Edge fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "default": "id",
              "pattern": "^[+|-|!]?\\w+$"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields [Q]uery to build result dataset record.\n```\nfields ::= field [ *( \",\" field ) ]\nfield  ::= name [ *( func ) ] [ inner ]\ninner  ::= \"{\" fields \"}\"\nfuncs  ::= *( func )\nfunc   ::= \".\" name \"(\" [ args ] \")\"\nname   ::= ALPHA / DIGIT / USCORE\n\nALPHA    = %x41-5A / %x61-7A  ; \"A\"-\"Z\" / \"a\"-\"z\"\nDIGIT    = %x30-39            ; \"0\"-\"9\"\nUSCORE   = %x5F ; underscore  ; \"_\"\n```",
            "in": "query",
            "required": false,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "default": "*"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Records with unique IDentifier(s).\nAccept: `id` -or- `etag`.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "qin",
            "description": "[Q]uery[IN] is a set of search fields for term `q`.\nDefault: `name{common_name}`.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "mode",
            "description": "Source access mode requirement.\n\n - READ: Can `fetch` record. [GET]\n - WRITE: Can `update` record. [PUT|PATCH]\n - DELETE: Can `delete` record. [DELETE]",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "READ",
              "WRITE",
              "DELETE"
            ],
            "default": "READ"
          },
          {
            "name": "not_id_group",
            "description": "Excludes contacts that belong to the specified group ID.\n- Filters out contacts associated with the given `group_id`.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "group",
            "description": "Filters contacts by the specified group(s).\n- Includes only contacts that belong to one or more of the given group Group(s).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "owner",
            "description": "Filters contacts by the specified owner(s).\n- Includes only contacts whose owner matches one or more of the given Owner(s).\n- The owner ID corresponds to `contact_id` in the `directory.wbt_user` table.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "label",
            "description": "Filters contacts by the specified label(s).\n- Includes only contacts that have one or more of the given Label(s).",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "user",
            "description": "Filters contacts based on whether they are user-associated.\n- `true`  → Includes only user-associated contacts.\n- `false` → Includes only contacts that are NOT user-associated.\n- A contact is considered user-associated if it exists in `directory.wbt_user`.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Contacts"
        ]
      },
      "post": {
        "summary": "Create NEW Contact",
        "operationId": "CreateContact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcontactsContact"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "input",
            "description": "NEW Contact source changes",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsInputContact"
            }
          },
          {
            "name": "fields",
            "description": "Source Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Contacts"
        ]
      }
    },
    "/contacts/groups": {
      "get": {
        "summary": "Retrieve a list of groups or search groups",
        "operationId": "ListGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsGroupList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Filter by unique IDs.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search term: group name;\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Filter by group name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "description": "Filter by group type.\n\n - GROUP_TYPE_UNSPECIFIED: Default value\n - STATIC: Static group\n - DYNAMIC: Dynamic group",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "GROUP_TYPE_UNSPECIFIED",
              "STATIC",
              "DYNAMIC"
            ],
            "default": "GROUP_TYPE_UNSPECIFIED"
          },
          {
            "name": "enabled",
            "description": "Filter by only enabled group",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Groups"
        ]
      },
      "post": {
        "summary": "Create a new group",
        "operationId": "CreateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcontactsGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request message for creating a new group.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsCreateGroupRequest"
            }
          }
        ],
        "tags": [
          "Groups"
        ]
      }
    },
    "/contacts/groups/conditions/{id}": {
      "get": {
        "summary": "Locate a condition by ID",
        "operationId": "LocateCondition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLocateConditionResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Unique ID of the condition.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "DynamicConditions"
        ]
      },
      "delete": {
        "summary": "Delete a condition",
        "operationId": "DeleteCondition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsCondition"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the condition to delete.\n\nUnique ID of the condition.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "DynamicConditions"
        ]
      },
      "put": {
        "summary": "Update an existing condition",
        "operationId": "UpdateCondition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsCondition"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the condition to update.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "description": "Input details for the condition.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsInputCondition"
            }
          }
        ],
        "tags": [
          "DynamicConditions"
        ]
      },
      "patch": {
        "summary": "Update an existing condition",
        "operationId": "UpdateCondition2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsCondition"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the condition to update.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "description": "Input details for the condition.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsInputCondition"
            }
          }
        ],
        "tags": [
          "DynamicConditions"
        ]
      }
    },
    "/contacts/groups/contacts:attach": {
      "post": {
        "summary": "Attach contacts to multiple groups",
        "operationId": "AddContactsToGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request message for adding contacts to a group.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsAddContactsToGroupRequest"
            }
          }
        ],
        "tags": [
          "Groups"
        ]
      }
    },
    "/contacts/groups/dynamic": {
      "get": {
        "summary": "Retrieve a list of dynamic groups or search dynamic groups",
        "operationId": "ListDynamicGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsDynamicGroupList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Filter by unique IDs.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search term: group name;\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Filter by group name.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DynamicGroups"
        ]
      },
      "post": {
        "summary": "Create a new dynamic group",
        "operationId": "CreateDynamicGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsDynamicGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request message for creating a new dynamic group.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsCreateDynamicGroupRequest"
            }
          }
        ],
        "tags": [
          "DynamicGroups"
        ]
      }
    },
    "/contacts/groups/{group_id}/conditions": {
      "get": {
        "summary": "Retrieve a list of conditions",
        "operationId": "ListConditions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsConditionList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "group_id",
            "description": "The ID of the group to which the conditions belong.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search term for conditions.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Filter by unique IDs.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "DynamicConditions"
        ]
      },
      "post": {
        "summary": "Create a new condition",
        "operationId": "CreateCondition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsCondition"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "group_id",
            "description": "The ID of the group to which the condition belongs.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DynamicConditionsCreateConditionBody"
            }
          }
        ],
        "tags": [
          "DynamicConditions"
        ]
      }
    },
    "/contacts/groups/{group_id}/contact": {
      "delete": {
        "summary": "Remove contacts from a group",
        "operationId": "RemoveContactsFromGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "group_id",
            "description": "The unique ID of the group.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "contact_ids",
            "description": "List of contact IDs to remove from the group.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Groups"
        ]
      }
    },
    "/contacts/groups/{id}": {
      "get": {
        "summary": "Locate a group by ID",
        "operationId": "LocateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLocateGroupResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the group to locate.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Groups"
        ]
      },
      "delete": {
        "summary": "Delete a group",
        "operationId": "DeleteGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcontactsGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the group to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Groups"
        ]
      },
      "put": {
        "summary": "Update an existing group",
        "operationId": "UpdateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcontactsGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the group to update.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsInputGroup"
            }
          }
        ],
        "tags": [
          "Groups"
        ]
      },
      "patch": {
        "summary": "Update an existing group",
        "operationId": "UpdateGroup2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcontactsGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the group to update.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsInputGroup"
            }
          }
        ],
        "tags": [
          "Groups"
        ]
      }
    },
    "/contacts/groups/{id}/dynamic": {
      "get": {
        "summary": "Locate a dynamic group by ID",
        "operationId": "LocateDynamicGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLocateDynamicGroupResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "DynamicGroups"
        ]
      },
      "delete": {
        "summary": "Delete a dynamic group",
        "operationId": "DeleteDynamicGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsDynamicGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the dynamic group to delete.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "DynamicGroups"
        ]
      },
      "put": {
        "summary": "Update an existing dynamic group",
        "operationId": "UpdateDynamicGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsDynamicGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the dynamic group to update.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "description": "Input details for the dynamic group.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsDynamicGroupInput"
            }
          }
        ],
        "tags": [
          "DynamicGroups"
        ]
      },
      "patch": {
        "summary": "Update an existing dynamic group",
        "operationId": "UpdateDynamicGroup2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsDynamicGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the dynamic group to update.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "description": "Input details for the dynamic group.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsDynamicGroupInput"
            }
          }
        ],
        "tags": [
          "DynamicGroups"
        ]
      }
    },
    "/contacts/labels": {
      "get": {
        "summary": "Search for Contacts engaged Label(s).",
        "operationId": "GetLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLabelTags"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = ((page-1)*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size+1)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: label.\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Labels"
        ]
      }
    },
    "/contacts/{contact_id}/cases": {
      "get": {
        "summary": "RPC method for searching cases.",
        "operationId": "SearchCases2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesCaseList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID for filtering cases.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number for pagination.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Number of results per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Query string for searching cases.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ids",
            "description": "List of specific case IDs to retrieve.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "Sorting criteria (e.g., field:asc).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "List of fields to include in the response.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filters",
            "description": "Key-value pairs for additional filtering.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Cases"
        ]
      }
    },
    "/contacts/{contact_id}/chat/messages": {
      "get": {
        "operationId": "GetContactChatHistory2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chatGetContactChatHistoryResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact identificator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset.id",
            "description": "Messages ONLY starting from the specified message ID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offset.date",
            "description": "Messages ONLY been sent before the specified epochtime(milli).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "size",
            "description": "Number of messages to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: message.text",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "chat_id",
            "description": "Unique chat dialog",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "group[string][string]",
            "description": "Includes the history of ONLY those dialogs\nwhose member channel(s) contain\na specified set of variables.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ContactsChatCatalog"
        ]
      }
    },
    "/contacts/{contact_id}/chat/{chat_id}/messages": {
      "get": {
        "operationId": "GetContactChatHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chatGetContactChatHistoryResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact identificator",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "chat_id",
            "description": "Unique chat dialog",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset.id",
            "description": "Messages ONLY starting from the specified message ID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offset.date",
            "description": "Messages ONLY been sent before the specified epochtime(milli).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "size",
            "description": "Number of messages to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: message.text",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "group[string]",
            "description": "Includes the history of ONLY those dialogs\nwhose member channel(s) contain\na specified set of variables.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ContactsChatCatalog"
        ]
      }
    },
    "/contacts/{contact_id}/comments": {
      "get": {
        "summary": "Search for Contact Comment(s) ...",
        "operationId": "SearchComments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsCommentList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number of result. offset = ((page-1)*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size of result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: comment text;\n`?` - matches any character\n`*` - matches 0 or more characters\n\nterm-of-search: lookup[name|...]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Comment(s) with unique ID only.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "mode",
            "description": "The requirement of [M]andatory [A]ccess [C]ontrol.\n\n - READ: Can `fetch` record. [GET]\n - WRITE: Can `update` record. [PUT|PATCH]\n - DELETE: Can `delete` record. [DELETE]",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "READ",
              "WRITE",
              "DELETE"
            ],
            "default": "READ"
          },
          {
            "name": "date.since",
            "description": "Since timestamp(milli). Not before.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "date.until",
            "description": "Until timestamp(milli). Not after.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "author.id",
            "description": "Reference Object unique ID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "author.type",
            "description": "Reference Object well-known type.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "author.name",
            "description": "Reference Object display name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "editor.id",
            "description": "Reference Object unique ID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "editor.type",
            "description": "Reference Object well-known type.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "editor.name",
            "description": "Reference Object display name.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Comments"
        ]
      },
      "post": {
        "summary": "Publish comment for a Contact.",
        "operationId": "PublishComment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsComment"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Comment for a Contact publication.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contactsInputComment",
              "example": {
                "text": "This is an internal note about recent activities."
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Comments"
        ]
      }
    },
    "/contacts/{contact_id}/comments/{etag}": {
      "delete": {
        "summary": "Delete Comment(s) for Contact ...",
        "operationId": "DeleteComment",
        "responses": {
          "200": {
            "description": "Comment dataset page.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsComment"
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Set of unique ID(s) to remove.",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Comments"
        ]
      },
      "put": {
        "summary": "Update (edit) specific Comment text owned",
        "operationId": "UpdateComment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsComment"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resorce.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Edition of the Comment.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "text": "This is a new note about the contact's recent activity. So ..."
              },
              "properties": {
                "text": {
                  "type": "string",
                  "description": "NEW Text of the comment."
                },
                "format": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/CommentFormat"
                  },
                  "description": "NEW Text components styling format."
                }
              },
              "title": "NEW Edition of the Comment.",
              "required": [
                "text"
              ]
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Comments"
        ]
      }
    },
    "/contacts/{contact_id}/emails": {
      "get": {
        "summary": "Locates email address(es) of the contact.",
        "operationId": "ListEmails",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsEmailList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "The Contact ID linked with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: email address.\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Link(s) with unique ID only.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "primary",
            "description": "Primary email address only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "verified",
            "description": "Verified email addresses only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "type.id",
            "description": "Reference Object unique ID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type.type",
            "description": "Reference Object well-known type.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type.name",
            "description": "Reference Object display name.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Emails"
        ]
      },
      "delete": {
        "summary": "Remove email address(es) of the contact.",
        "operationId": "DeleteEmails",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsEmailList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "etag",
            "description": "Set of unique ID(s) to remove.",
            "in": "query",
            "required": true,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "pattern": "^.+$"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Emails"
        ]
      },
      "post": {
        "summary": "Update or append email address(es) of the contact.",
        "operationId": "MergeEmails",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsEmailList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Fixed set of email address(es) to be linked with the contact.\nEmail address(es) that conflicts(email) with already linked will be updated.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "example": [
                {
                  "verified": false,
                  "primary": true,
                  "email": "user@domain",
                  "type": {
                    "name": "personal"
                  }
                }
              ],
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputEmailAddress"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Emails"
        ]
      },
      "put": {
        "summary": "Resets all emails of the contact according to the input dataset.",
        "operationId": "ResetEmails",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsEmailList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Final set of email address(es) to be linked with the contact.\nEmail address(es) that are already linked with the contact\nbut not given in here will be removed.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "example": [
                {
                  "verified": true,
                  "email": "johndoe_43@gmail.com",
                  "type": {
                    "name": "personal"
                  }
                },
                {
                  "primary": true,
                  "etag": "k0WqvUn4IJGnuCyG",
                  "email": "j.doe@x-company.org",
                  "type": {
                    "id": "11",
                    "name": "business"
                  }
                }
              ],
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputEmailAddress"
              },
              "minItems": 1,
              "uniqueItems": true
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Emails"
        ]
      }
    },
    "/contacts/{contact_id}/emails/{etag}": {
      "get": {
        "summary": "Locate the email address link.",
        "operationId": "LocateEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsEmailAddress"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact source ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique mail address link IDentifier.\nAccept: `etag` (obsolete+) or `id`.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "\\w+"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Emails"
        ]
      },
      "delete": {
        "summary": "Remove the contact's email address link",
        "operationId": "DeleteEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsEmailAddress"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID to remove.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Emails"
        ]
      },
      "put": {
        "summary": "Update the contact's email address link details",
        "operationId": "UpdateEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsEmailList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resorce.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the email address link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "etag": "1679792219687",
                "verified": false,
                "primary": true,
                "email": "user@domain",
                "type": {
                  "name": "personal"
                }
              },
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "Indicates whether this phone number is default within other channels of the same type(phone)."
                },
                "verified": {
                  "type": "boolean",
                  "title": "Indicate whether Contact, as a Person, realy owns this associated phone number.\nIn other words: whether Contact is reachable thru this 'email' communication channel ?"
                },
                "email": {
                  "type": "string",
                  "description": "The email address."
                },
                "type": {
                  "$ref": "#/definitions/webitelcontactsLookup",
                  "title": "The type of the email address.\nLookup value from CommunicationType dictionary.\nThe type can be custom or one of these predefined values:\n- home\n- work\n- other"
                }
              },
              "title": "NEW Update of the email address link.",
              "required": [
                "email"
              ]
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Emails"
        ]
      },
      "patch": {
        "summary": "Update the contact's email address link details",
        "operationId": "UpdateEmail2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsEmailList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resorce.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the email address link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "etag": "1679792219687",
                "verified": false,
                "primary": true,
                "email": "user@domain",
                "type": {
                  "name": "personal"
                }
              },
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "Indicates whether this phone number is default within other channels of the same type(phone)."
                },
                "verified": {
                  "type": "boolean",
                  "title": "Indicate whether Contact, as a Person, realy owns this associated phone number.\nIn other words: whether Contact is reachable thru this 'email' communication channel ?"
                },
                "email": {
                  "type": "string",
                  "description": "The email address."
                },
                "type": {
                  "$ref": "#/definitions/webitelcontactsLookup",
                  "title": "The type of the email address.\nLookup value from CommunicationType dictionary.\nThe type can be custom or one of these predefined values:\n- home\n- work\n- other"
                }
              },
              "title": "NEW Update of the email address link.",
              "required": [
                "email"
              ]
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Emails"
        ]
      }
    },
    "/contacts/{contact_id}/groups": {
      "get": {
        "summary": "List of the Contact's group(s).",
        "operationId": "ListContactGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactGroupList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "query",
            "description": "Search term: group name;\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Record(s) with unique ID only.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ContactGroups"
        ]
      },
      "delete": {
        "summary": "Remove the Contact's group(s).",
        "operationId": "DeleteContactGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactGroupList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "etag",
            "description": "Set of unique ID(s) to remove.",
            "in": "query",
            "required": true,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ContactGroups"
        ]
      },
      "post": {
        "summary": "Associate more group(s) with the Contact.",
        "operationId": "MergeContactGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactGroupList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Array of the unique User(s) to associate with the Contact.\nAny duplicate of an already linked user{id} will result in an error.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputContactGroup"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ContactGroups"
        ]
      },
      "put": {
        "summary": "Resets all groups of the contact according to the input dataset.",
        "operationId": "ResetContactGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactGroupList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Final set of group(s) to be linked with the contact.\nGroup(s) that are already linked with the contact\nbut not given in here will be removed.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputContactGroup"
              },
              "minItems": 1,
              "uniqueItems": true
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ContactGroups"
        ]
      }
    },
    "/contacts/{contact_id}/groups/{etag}": {
      "get": {
        "summary": "Locate the Contact's group association.",
        "operationId": "LocateContactGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact source ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique group link IDentifier.\nAccept: `etag` (obsolete+) or `id`.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "\\w+"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ContactGroups"
        ]
      },
      "delete": {
        "summary": "Remove the Contact's group association.",
        "operationId": "DeleteContactGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactGroup"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID to remove.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ContactGroups"
        ]
      },
      "put": {
        "summary": "Update the Contact's group details.",
        "operationId": "UpdateContactGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactGroupList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the group link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "group": {
                  "$ref": "#/definitions/webitelcontactsLookup",
                  "description": "Group of contacts associated."
                }
              },
              "title": "NEW Update of the group link."
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ContactGroups"
        ]
      },
      "patch": {
        "summary": "Update the Contact's group details.",
        "operationId": "UpdateContactGroup2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsContactGroupList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the group link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "group": {
                  "$ref": "#/definitions/webitelcontactsLookup",
                  "description": "Group of contacts associated."
                }
              },
              "title": "NEW Update of the group link."
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ContactGroups"
        ]
      }
    },
    "/contacts/{contact_id}/imclients": {
      "get": {
        "summary": "Search IM client links",
        "operationId": "ListIMClients",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsIMClientList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: IMClient.\n`?` - matches any one character\n`*` - matches 0 or more characters\nSearch fields: {user,app}",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Link(s) with unique ID only.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "IMClients"
        ]
      }
    },
    "/contacts/{contact_id}/imclients/{id}": {
      "delete": {
        "operationId": "DeleteIMClient",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcontactsEmptyResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "IMClients"
        ]
      }
    },
    "/contacts/{contact_id}/labels": {
      "get": {
        "summary": "Locate the Contact's associated Label(s).",
        "operationId": "ListLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLabelList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = ((page-1)*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size+1)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: label tag.\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Record(s) with unique ID or ETag.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Labels"
        ]
      },
      "delete": {
        "summary": "Remove Contact Labels associations.",
        "operationId": "DeleteLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLabelList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "etag",
            "description": "Set of unique label(s).etag identifiers.",
            "in": "query",
            "required": true,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "pattern": "^(\\w+)(,\\w+)*$"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Labels"
        ]
      },
      "post": {
        "summary": "Associate NEW Labels to the Contact.",
        "operationId": "MergeLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLabelList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Fixed set of label(s) to be linked with the contact.\nLabel(s) that conflicts with already linked will be updated.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputLabel"
              },
              "minItems": 1,
              "uniqueItems": true
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Labels"
        ]
      },
      "put": {
        "summary": "Reset Labels to fit the specified final set.",
        "operationId": "ResetLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLabelList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Final set of labels(s) to be linked with the contact.\nLabel(s) that are already linked with the contact\nbut not given in here will be removed.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputLabel"
              },
              "uniqueItems": true
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Labels"
        ]
      }
    },
    "/contacts/{contact_id}/languages": {
      "get": {
        "summary": "List of the Contact's language association(s).",
        "operationId": "GetContactLanguages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLanguageList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: language tag (lang, name, region, ..)\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Language(s) with unique ID|ETag only.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "primary",
            "description": "Primary language only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "region",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Languages"
        ]
      },
      "delete": {
        "summary": "Remove the Contact's language association(s).",
        "operationId": "DelContactLanguages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLanguageList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "etag",
            "description": "Set of unique language{etag} association(s) to remove.",
            "in": "query",
            "required": true,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Languages"
        ]
      },
      "post": {
        "summary": "Associate more language(s) with the Contact.",
        "operationId": "AddContactLanguages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLanguageList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Array of the unique well-formed IETF BCP 47 language tag(s) to associate with the Contact.\nThe first element will become `primary` one.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "example": [
                "uk",
                "en-GB",
                "pl"
              ],
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputLanguage"
              },
              "minItems": 1,
              "uniqueItems": true
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Languages"
        ]
      },
      "put": {
        "summary": "Reset all Contact's languages to fit the specified fixed set.",
        "operationId": "SetContactLanguages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLanguageList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Final set [array] of the unique well-formed IETF BCP 47 language tag(s) to associate with the Contact.\nThe first element will become `primary` one.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "example": [
                "uk",
                "en-GB",
                "pl"
              ],
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputLanguage"
              },
              "minItems": 1,
              "uniqueItems": true
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Languages"
        ]
      }
    },
    "/contacts/{contact_id}/languages/{etag}": {
      "delete": {
        "summary": "Remove the Contact's language association.",
        "operationId": "DelContactLanguage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLanguage"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the language association: {id,etag,code}.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Languages"
        ]
      },
      "put": {
        "summary": "Update the Contact's language association details.",
        "operationId": "SetContactLanguage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLanguageList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing association.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Final set [array] of the unique well-formed IETF BCP 47 language tag(s) to associate with the Contact.\nThe first element will become `primary` one.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "primary": false,
                "tag": "uk"
              },
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "Indicates whether this association must be default\namong others of the same type."
                },
                "tag": {
                  "type": "string",
                  "title": "NEW, well-formed IETF BCP 47 language tag representing the locale.\nhttps://www.rfc-editor.org/info/bcp47"
                }
              },
              "title": "Final set [array] of the unique well-formed IETF BCP 47 language tag(s) to associate with the Contact.\nThe first element will become `primary` one."
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Languages"
        ]
      },
      "patch": {
        "summary": "Update the Contact's language association details.",
        "operationId": "SetContactLanguage2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsLanguageList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing association.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Final set [array] of the unique well-formed IETF BCP 47 language tag(s) to associate with the Contact.\nThe first element will become `primary` one.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "primary": false,
                "tag": "uk"
              },
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "Indicates whether this association must be default\namong others of the same type."
                },
                "tag": {
                  "type": "string",
                  "title": "NEW, well-formed IETF BCP 47 language tag representing the locale.\nhttps://www.rfc-editor.org/info/bcp47"
                }
              },
              "title": "Final set [array] of the unique well-formed IETF BCP 47 language tag(s) to associate with the Contact.\nThe first element will become `primary` one."
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Languages"
        ]
      }
    },
    "/contacts/{contact_id}/managers": {
      "get": {
        "summary": "Search the Contact's Managers.",
        "operationId": "ListManagers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsManagerList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result. offset = ((page-1)*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size of result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: user name;\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Record(s) with unique ID only.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Managers"
        ]
      },
      "delete": {
        "summary": "Remove Contact Managers associations.",
        "operationId": "DeleteManagers",
        "responses": {
          "200": {
            "description": "Manager dataset page.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsManager"
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "etag",
            "description": "Set of unique ID(s) to remove.",
            "in": "query",
            "required": true,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Managers"
        ]
      },
      "post": {
        "summary": "Associate new Managers to the Contact.",
        "operationId": "MergeManagers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsManagerList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Array of the unique User(s) to associate with the Contact.\nAny duplicate of an already linked user{id} will result in an error.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "example": [
                {
                  "primary": true,
                  "user": {
                    "id": "357",
                    "name": "Bruce Wayne"
                  }
                },
                {
                  "user": {
                    "id": "354",
                    "name": "Johnny Doe"
                  }
                }
              ],
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputManager"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Managers"
        ]
      },
      "put": {
        "summary": "Reset Managers to fit the specified final set.",
        "operationId": "ResetManagers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsManagerList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Final set of unique User(s) to be linked with the Contact.\nUser(s) that are already linked with the Contact\nbut not listed here will be removed.\nThe first element will become `primary` if no other specified.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputManager"
              },
              "minItems": 1,
              "uniqueItems": true
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Managers"
        ]
      }
    },
    "/contacts/{contact_id}/managers/{etag}": {
      "get": {
        "summary": "Locate the manager address link.",
        "operationId": "LocateManager",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsManager"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact source ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique manager link IDentifier.\nAccept: `etag` (obsolete+) or `id`.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "\\w+"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Managers"
        ]
      },
      "delete": {
        "summary": "Remove the contact's manager address link",
        "operationId": "DeleteManager",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsManager"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID to remove.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Managers"
        ]
      },
      "put": {
        "summary": "Update the contact's manager address link details",
        "operationId": "UpdateManager",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsManagerList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the manager link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "primary": true,
                "user": {
                  "id": "357",
                  "name": "Bruce Wayne"
                }
              },
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "Indicates whether this association must be default among others."
                },
                "user": {
                  "$ref": "#/definitions/webitelcontactsLookup",
                  "description": "Responsible User."
                }
              },
              "title": "NEW Update of the manager link."
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Managers"
        ]
      },
      "patch": {
        "summary": "Update the contact's manager address link details",
        "operationId": "UpdateManager2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsManagerList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the manager link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "primary": true,
                "user": {
                  "id": "357",
                  "name": "Bruce Wayne"
                }
              },
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "Indicates whether this association must be default among others."
                },
                "user": {
                  "$ref": "#/definitions/webitelcontactsLookup",
                  "description": "Responsible User."
                }
              },
              "title": "NEW Update of the manager link."
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Managers"
        ]
      }
    },
    "/contacts/{contact_id}/phones": {
      "get": {
        "summary": "Search phone number(s)",
        "operationId": "ListPhones",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoneList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "The Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: phone number.\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Link(s) with unique ID only.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "primary",
            "description": "Primary phone  only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "verified",
            "description": "Verified phone only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "type.id",
            "description": "Reference Object unique ID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type.type",
            "description": "Reference Object well-known type.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type.name",
            "description": "Reference Object display name.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Phones"
        ]
      },
      "delete": {
        "summary": "Remove the Contact's phone number association(s)",
        "operationId": "DeletePhones",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoneList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "The Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "etag",
            "description": "Set of linked ID(s) to be removed.",
            "in": "query",
            "required": true,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Phones"
        ]
      },
      "post": {
        "summary": "Associate phone number(s) with the Contact",
        "operationId": "MergePhones",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoneList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Fixed set of phone number(s) to be linked with the Contact.\nPhone number(s) that conflicts with already linked will be updated.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "example": [
                {
                  "verified": false,
                  "primary": true,
                  "number": "+38 (099) 672-23-54",
                  "type": {
                    "name": "mobile"
                  }
                }
              ],
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputPhoneNumber"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Phones"
        ]
      },
      "put": {
        "summary": "Reset the Contact's phone numbers to fit given data set.",
        "operationId": "ResetPhones",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoneList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Final set of phone number(s) to be linked with the contact.\nPhone number(s) that are already linked with the contact\nbut not given in here will be removed.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "example": [
                {
                  "etag": "1679792219687",
                  "verified": true,
                  "primary": true,
                  "number": "+38 (099) 672-23-54",
                  "type": {
                    "name": "personal"
                  }
                },
                {
                  "number": "+1 482 555-36558",
                  "type": {
                    "name": "business"
                  }
                }
              ],
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputPhoneNumber"
              },
              "minItems": 1,
              "uniqueItems": true
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Phones"
        ]
      }
    },
    "/contacts/{contact_id}/phones/{etag}": {
      "get": {
        "summary": "Locate the Contact's phone number association.",
        "operationId": "LocatePhone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoneNumber"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Reference Contact unique ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "\\w+"
          },
          {
            "name": "fields",
            "description": "Fields [Q]uery to build result record.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Phones"
        ]
      },
      "delete": {
        "summary": "Remove the Contact's phone number",
        "operationId": "DeletePhone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoneNumber"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique link ID to be removed.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Phones"
        ]
      },
      "put": {
        "summary": "Update the Contact's phone number association details",
        "operationId": "UpdatePhone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoneList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "The Contact ID to be associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resorce.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the phone number details.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "Indicates whether this phone number is default within other channels of the same type(phone)."
                },
                "verified": {
                  "type": "boolean",
                  "title": "Indicate whether Contact, as a Person, realy owns this associated phone number.\nIn other words: whether Contact is reachable thru this 'phone' communication channel ?"
                },
                "number": {
                  "type": "string",
                  "description": "The phone number."
                },
                "type": {
                  "$ref": "#/definitions/webitelcontactsLookup",
                  "title": "The type of the phone number.\nReference on CommunicationType dictionary.\nUsed for outbound routing while dialup a phone number.\nThe type can be custom or one of these predefined values:\n- home\n- work\n- mobile\n- homeFax\n- workFax\n- otherFax\n- pager\n- workMobile\n- workPager\n- main\n- googleVoice\n- other"
                }
              },
              "title": "NEW Update of the phone number details.",
              "required": [
                "number"
              ]
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Phones"
        ]
      },
      "patch": {
        "summary": "Update the Contact's phone number association details",
        "operationId": "UpdatePhone2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoneList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "The Contact ID to be associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resorce.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the phone number details.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "Indicates whether this phone number is default within other channels of the same type(phone)."
                },
                "verified": {
                  "type": "boolean",
                  "title": "Indicate whether Contact, as a Person, realy owns this associated phone number.\nIn other words: whether Contact is reachable thru this 'phone' communication channel ?"
                },
                "number": {
                  "type": "string",
                  "description": "The phone number."
                },
                "type": {
                  "$ref": "#/definitions/webitelcontactsLookup",
                  "title": "The type of the phone number.\nReference on CommunicationType dictionary.\nUsed for outbound routing while dialup a phone number.\nThe type can be custom or one of these predefined values:\n- home\n- work\n- mobile\n- homeFax\n- workFax\n- otherFax\n- pager\n- workMobile\n- workPager\n- main\n- googleVoice\n- other"
                }
              },
              "title": "NEW Update of the phone number details.",
              "required": [
                "number"
              ]
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Phones"
        ]
      }
    },
    "/contacts/{contact_id}/photos": {
      "get": {
        "summary": "Search the contact's photo(s)",
        "operationId": "SearchPhotos",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhotoList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "The Contact ID linked with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: email address.\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Link(s) with unique ID only.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "primary",
            "description": "Default photos only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Photos"
        ]
      },
      "delete": {
        "summary": "Remove the contact's photo link(s)",
        "operationId": "DeletePhotos",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhotoList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link(s) contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "etag",
            "description": "Set of linked ID(s) to be removed.",
            "in": "query",
            "required": true,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Photos"
        ]
      },
      "post": {
        "summary": "Link photo(s) with the contact",
        "operationId": "CreatePhotos",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhotoList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Fixed set of photo(s) to be linked with the contact.\nPhoto(s) that conflicts(file_id) with already linked will be updated.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "example": [
                {
                  "photo_id": "3587"
                },
                {
                  "primary": true,
                  "photo_url": "https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg"
                }
              ],
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputPhoto"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Photos"
        ]
      },
      "put": {
        "summary": "Reset the contact's photos to fit given data set.",
        "operationId": "UpdatePhotos",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhotoList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Final set of photo(s) to be linked with the contact.\nPhoto(s) that are already linked with the contact\nbut not given in here will be removed.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "example": [
                {
                  "id": "351354",
                  "ver": "1679792219687",
                  "photo_id": "3587"
                },
                {
                  "primary": true,
                  "photo_url": "https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg"
                }
              ],
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputPhoto"
              },
              "minItems": 1,
              "uniqueItems": true
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Photos"
        ]
      }
    },
    "/contacts/{contact_id}/photos/{etag}": {
      "delete": {
        "summary": "Remove the contact's photo",
        "operationId": "DeletePhoto",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoto"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique link ID to be removed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Photos"
        ]
      },
      "put": {
        "summary": "Update the contact's photo link details",
        "operationId": "UpdatePhoto",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoto"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing association.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the email address link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "True if the photo is a default photo; false if the photo is a user-provided photo."
                },
                "photo_id": {
                  "type": "string",
                  "format": "int64",
                  "title": "File unique ID within 'storage' service"
                },
                "photo_url": {
                  "type": "string",
                  "title": "The URL of the photo.\nYou can change the desired size by appending\na query parameter sz={size} at the end of the url,\nwhere {size} is the size in pixels.\nExample: https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50"
                }
              },
              "title": "NEW Update of the email address link.",
              "required": [
                "file_url"
              ]
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Photos"
        ]
      },
      "patch": {
        "summary": "Update the contact's photo link details",
        "operationId": "UpdatePhoto2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoto"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing association.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the email address link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "True if the photo is a default photo; false if the photo is a user-provided photo."
                },
                "photo_id": {
                  "type": "string",
                  "format": "int64",
                  "title": "File unique ID within 'storage' service"
                },
                "photo_url": {
                  "type": "string",
                  "title": "The URL of the photo.\nYou can change the desired size by appending\na query parameter sz={size} at the end of the url,\nwhere {size} is the size in pixels.\nExample: https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50"
                }
              },
              "title": "NEW Update of the email address link.",
              "required": [
                "file_url"
              ]
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Photos"
        ]
      }
    },
    "/contacts/{contact_id}/photos/{id}": {
      "get": {
        "summary": "Locate the contact's photo link.",
        "operationId": "LocatePhoto",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsPhoto"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Link unique ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Photos"
        ]
      }
    },
    "/contacts/{contact_id}/timeline": {
      "get": {
        "operationId": "GetTimeline",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcontactsGetTimelineResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "chat",
                "call",
                "email"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Timeline"
        ]
      }
    },
    "/contacts/{contact_id}/timeline/counter": {
      "get": {
        "operationId": "GetTimelineCounter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcontactsGetTimelineCounterResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Timeline"
        ]
      }
    },
    "/contacts/{contact_id}/timezones": {
      "get": {
        "summary": "List of the Contact's timezone(s).",
        "operationId": "ListTimezones",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsTimezoneList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: location name;\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Record(s) with unique ID only.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "primary",
            "description": "Primary timezone only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Timezones"
        ]
      },
      "delete": {
        "summary": "Remove the Contact's timezone(s).",
        "operationId": "DeleteTimezones",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsTimezoneList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "etag",
            "description": "Set of unique ID(s) to remove.",
            "in": "query",
            "required": true,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Timezones"
        ]
      },
      "post": {
        "summary": "Associate more timezone(s) with the Contact.",
        "operationId": "MergeTimezones",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsTimezoneList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Array of the unique User(s) to associate with the Contact.\nAny duplicate of an already linked user{id} will result in an error.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputTimezone"
              }
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Timezones"
        ]
      },
      "put": {
        "summary": "Resets all timezones of the contact according to the input dataset.",
        "operationId": "ResetTimezones",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsTimezoneList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Final set of timezone(s) to be linked with the contact.\nTimezone(s) that are already linked with the contact\nbut not given in here will be removed.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputTimezone"
              },
              "minItems": 1,
              "uniqueItems": true
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Timezones"
        ]
      }
    },
    "/contacts/{contact_id}/timezones/{etag}": {
      "get": {
        "summary": "Locate the Contact's timezone association.",
        "operationId": "LocateTimezone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcontactsTimezone"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact source ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique timezone link IDentifier.\nAccept: `etag` (obsolete+) or `id`.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "\\w+"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Timezones"
        ]
      },
      "delete": {
        "summary": "Remove the Contact's timezone association.",
        "operationId": "DeleteTimezone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcontactsTimezone"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID to remove.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Timezones"
        ]
      },
      "put": {
        "summary": "Update the Contact's timezone details.",
        "operationId": "UpdateTimezone",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsTimezoneList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the timezone link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "Indicates whether this association must be default among others."
                },
                "timezone": {
                  "$ref": "#/definitions/webitelcontactsLookup",
                  "description": "Timezone dictionary reference value associated."
                }
              },
              "title": "NEW Update of the timezone link."
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Timezones"
        ]
      },
      "patch": {
        "summary": "Update the Contact's timezone details.",
        "operationId": "UpdateTimezone2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsTimezoneList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the timezone link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "primary": {
                  "type": "boolean",
                  "description": "Indicates whether this association must be default among others."
                },
                "timezone": {
                  "$ref": "#/definitions/webitelcontactsLookup",
                  "description": "Timezone dictionary reference value associated."
                }
              },
              "title": "NEW Update of the timezone link."
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Timezones"
        ]
      }
    },
    "/contacts/{contact_id}/variables": {
      "get": {
        "summary": "List variables of the contact",
        "operationId": "ListVariables",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsVariableList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result. offset = ((page-1)*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size of result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term: variable key;\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Record(s) with unique ID only.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Variables"
        ]
      },
      "delete": {
        "summary": "Remove variable(s) of the contact",
        "operationId": "DeleteVariables",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsVariableList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "etag",
            "description": "Set of unique ID(s) to remove.",
            "in": "query",
            "required": true,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "pattern": "^.+$"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Variables"
        ]
      },
      "post": {
        "summary": "Update or append variables to the contact",
        "operationId": "MergeVariables",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsVariableList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Link contact ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Fixed object of unique variables to associate with a Contact.\nEach individual key of an object represents a separate variable.\nVariable{key} already linked with the Contact and listed here will be updated.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputVariable"
              },
              "minItems": 1,
              "uniqueItems": true
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Variables"
        ]
      },
      "put": {
        "summary": "Reset all variables of the contact",
        "operationId": "ResetVariables",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsVariableList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "Fixed object of unique variables to associate with a Contact.\nEach individual key of an object represents a separate variable.\nVariable{key} already linked with the Contact but not listed here will be removed.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/contactsInputVariable"
              },
              "minItems": 1,
              "uniqueItems": true
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Variables"
        ]
      }
    },
    "/contacts/{contact_id}/variables/{etag}": {
      "delete": {
        "summary": "Remove the contact's variable by etag",
        "operationId": "DeleteVariable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsVariable"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID to remove.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Variables"
        ]
      },
      "put": {
        "summary": "Update contact variable",
        "operationId": "UpdateVariable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsVariableList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resorce.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Variable update.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "key": "var_rename",
                "value": [
                  "string_item",
                  [
                    3,
                    7
                  ],
                  false,
                  null
                ]
              },
              "properties": {
                "key": {
                  "type": "string",
                  "description": "NEW Key.",
                  "pattern": "^\\w+$"
                },
                "value": {
                  "description": "NEW Value."
                }
              },
              "title": "NEW Variable update.",
              "required": [
                "key"
              ]
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Variables"
        ]
      },
      "patch": {
        "summary": "Update contact variable",
        "operationId": "UpdateVariable2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/contactsVariableList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "contact_id",
            "description": "Contact ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resorce.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Variable update.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "key": "var_rename",
                "value": [
                  "string_item",
                  [
                    3,
                    7
                  ],
                  false,
                  null
                ]
              },
              "properties": {
                "key": {
                  "type": "string",
                  "description": "NEW Key.",
                  "pattern": "^\\w+$"
                },
                "value": {
                  "description": "NEW Value."
                }
              },
              "title": "NEW Variable update.",
              "required": [
                "key"
              ]
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Variables"
        ]
      }
    },
    "/contacts/{etag}": {
      "get": {
        "summary": "Locate Contact source",
        "operationId": "LocateContact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcontactsContact"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "etag",
            "description": "The Contact source IDentifier.\nAccept: `etag` (obsolete+) or `id`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Source Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "mode",
            "description": "The requirement of a special access mode to the Source.\n\n - READ: Can `fetch` record. [GET]\n - WRITE: Can `update` record. [PUT|PATCH]\n - DELETE: Can `delete` record. [DELETE]",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "READ",
              "WRITE",
              "DELETE"
            ],
            "default": "READ"
          }
        ],
        "tags": [
          "Contacts"
        ]
      },
      "delete": {
        "summary": "Remove Contact source",
        "operationId": "DeleteContact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcontactsContact"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "etag",
            "description": "Unique ID of the latest version of a resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Contacts"
        ]
      },
      "patch": {
        "summary": "NEW Update of the Contact source",
        "operationId": "UpdateContact",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/webitelcontactsContact"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resorce.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Contact source changes",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "$ref": "#/definitions/contactsInputName",
                  "title": "The Contact's name. Singleton"
                },
                "about": {
                  "type": "string",
                  "description": "BIO. Short description about the Contact person.\nOPTIONAL. Multi-lined text."
                },
                "photos": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputPhoto"
                  },
                  "description": "Output only. The Contact's photo(s).",
                  "readOnly": true
                },
                "labels": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputLabel"
                  },
                  "description": "The Contact's associated label(s)."
                },
                "emails": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputEmailAddress"
                  },
                  "description": "The Contact's email address(es)."
                },
                "phones": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputPhoneNumber"
                  },
                  "description": "The Contact's phone numbers."
                },
                "managers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputManager"
                  },
                  "description": "The Contact's internal manager(s)."
                },
                "comments": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputComment"
                  },
                  "description": "Publish NEW comment(s) for this Contact."
                },
                "languages": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputLanguage"
                  },
                  "description": "A Contact's locale preference(s)."
                },
                "timezones": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputTimezone"
                  },
                  "description": "The Contact's timezone preference(s)."
                },
                "imclients": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputIMClient"
                  },
                  "description": "The contact's [I]nstant[M]essaging clients."
                },
                "variables": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputVariable"
                  },
                  "description": "Arbitrary client data that is populated by clients."
                },
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/contactsInputContactGroup"
                  },
                  "description": "The Contact's associated group(s)."
                }
              },
              "title": "NEW Contact source changes"
            }
          },
          {
            "name": "fields",
            "description": "Source Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Contacts"
        ]
      }
    },
    "/customer": {
      "get": {
        "summary": "rpc GetCertificate(CertificateUsageRequest) returns (CertificateUsageResponse) {}",
        "operationId": "GetCustomer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetCustomerResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Available Filters\n\nshow by customer id; serial number (uuid)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "valid",
            "description": "show if valid only!",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "domain.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Request Controls\n\nserial,",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "put": {
        "operationId": "UpdateCustomer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateCustomerResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "organization",
            "description": "[optional] e.g.: Example Org.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "logo_picture",
            "description": "[optional] logo source image",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "certificate",
            "description": "[optional] raw bytes protobuf::base64.RawStdEncoding != certificate::base64.StdEncoding",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "revoke",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/customer/{customer_id}/license": {
      "get": {
        "operationId": "LicenseUsage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLicenseUsageResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "description": "----- Search Options ----- //\n\ndefault: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "default: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "set of output fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "user.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "domain.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "by serial number(s)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "product",
            "description": "by product name(s)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "valid",
            "description": "view: all|valid|grantable\n\nshow: available to be granted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "q",
            "description": "filter: term of search",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/customer/{id}": {
      "get": {
        "summary": "rpc GetCertificate(CertificateUsageRequest) returns (CertificateUsageResponse) {}",
        "operationId": "GetCustomer2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetCustomerResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Available Filters\n\nshow by customer id; serial number (uuid)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "valid",
            "description": "show if valid only!",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "domain.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Request Controls\n\nserial,",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/devices": {
      "get": {
        "operationId": "SearchDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSearchDeviceResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "size",
            "description": "----- Select Options -------------------------\n\ndefault: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "default: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "ids",
            "description": "----- Search Basic Filters ---------------------------\n\nselection: by unique identifier",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "term-of-search: lookup[name,account,hotdesk,brand,model,mac,ip]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "case-ignore substring match: ILIKE '*' - any; '?' - one",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "access",
            "description": "[M]andatory[A]ccess[C]ontrol: with access mode (action) granted!",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "account",
            "description": "----- Device-Specific Filters ----------------\n\nsubstring like '%name%'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "hotdesk",
            "description": "filter: has hotdesk (=pattern); is hotdesk (=*)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user.id",
            "description": "Object ID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "Display Name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "mac",
            "description": "filter: by MAC address",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ip",
            "description": "filter: by IP address",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Devices"
        ]
      },
      "delete": {
        "operationId": "DeleteDevice2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteDeviceResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "description": "bulk",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "permanent",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Devices"
        ]
      },
      "post": {
        "operationId": "CreateDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCreateDeviceResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "device",
            "description": "string password = 2;",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDevice"
            }
          }
        ],
        "tags": [
          "Devices"
        ]
      }
    },
    "/devices/{device.id}": {
      "put": {
        "operationId": "UpdateDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateDeviceResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "device.id",
            "description": "object id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "device",
            "description": "Device profile",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "display name",
                  "title": "kind of\nDeviceType type = 19;"
                },
                "account": {
                  "type": "string",
                  "description": "username",
                  "title": "credentials"
                },
                "password": {
                  "type": "string",
                  "title": "password"
                },
                "user": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "[optional] The user that 'owns' the device;"
                },
                "logged_in": {
                  "type": "string",
                  "format": "int64",
                  "title": "caller profile\n webitel.adt.caller caller = 4;"
                },
                "hotdesk": {
                  "type": "boolean",
                  "description": "act as a hotdesk",
                  "title": "Hotdesk: this workstation aliases"
                },
                "hotdesks": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "associated aliases"
                },
                "provision": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "provision extra data"
                },
                "brand": {
                  "type": "string",
                  "description": "vendor brand name",
                  "title": "provision"
                },
                "model": {
                  "type": "string"
                },
                "mac": {
                  "type": "string",
                  "title": "static"
                },
                "ip": {
                  "type": "string"
                },
                "reged": {
                  "type": "boolean",
                  "title": "TODO: something like PresenceStatus instead of Registration\n repeated Registration contacts = 16;"
                },
                "created_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "created_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                },
                "updated_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "updated_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                },
                "deleted_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "deleted_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                }
              },
              "title": "Device profile"
            }
          },
          {
            "name": "fields",
            "description": "PATCH: partial update",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Devices"
        ]
      },
      "patch": {
        "operationId": "UpdateDevice2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateDeviceResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "device.id",
            "description": "object id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "device",
            "description": "Device profile",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "display name",
                  "title": "kind of\nDeviceType type = 19;"
                },
                "account": {
                  "type": "string",
                  "description": "username",
                  "title": "credentials"
                },
                "password": {
                  "type": "string",
                  "title": "password"
                },
                "user": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "[optional] The user that 'owns' the device;"
                },
                "logged_in": {
                  "type": "string",
                  "format": "int64",
                  "title": "caller profile\n webitel.adt.caller caller = 4;"
                },
                "hotdesk": {
                  "type": "boolean",
                  "description": "act as a hotdesk",
                  "title": "Hotdesk: this workstation aliases"
                },
                "hotdesks": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "associated aliases"
                },
                "provision": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "provision extra data"
                },
                "brand": {
                  "type": "string",
                  "description": "vendor brand name",
                  "title": "provision"
                },
                "model": {
                  "type": "string"
                },
                "mac": {
                  "type": "string",
                  "title": "static"
                },
                "ip": {
                  "type": "string"
                },
                "reged": {
                  "type": "boolean",
                  "title": "TODO: something like PresenceStatus instead of Registration\n repeated Registration contacts = 16;"
                },
                "created_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "created_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                },
                "updated_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "updated_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                },
                "deleted_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "deleted_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                }
              },
              "title": "Device profile"
            }
          },
          {
            "name": "fields",
            "description": "PATCH: partial update",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Devices"
        ]
      }
    },
    "/devices/{device.id}/registered": {
      "get": {
        "operationId": "ListRegistrations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListRegistrationsResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "device.id",
            "description": "Object ID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.id",
            "description": "Object ID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "Display Name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "device.name",
            "description": "Display Name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Devices"
        ]
      }
    },
    "/devices/{device.id}/users/audit": {
      "get": {
        "summary": "----- Details (1:M) ----------------------------------------------",
        "operationId": "SearchDeviceAudit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeviceAuditResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "device.id",
            "description": "Object ID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.id",
            "description": "Object ID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "Display Name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "device.name",
            "description": "Display Name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "time_from",
            "description": "Filter: timing range (optional)\n\nunix milliseconds",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "time_till",
            "description": "unix milliseconds",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "Search Options",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Devices"
        ]
      }
    },
    "/devices/{id}": {
      "get": {
        "operationId": "ReadDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReadDeviceResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "output selection",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Devices"
        ]
      },
      "delete": {
        "operationId": "DeleteDevice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteDeviceResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "permanent",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "ids",
            "description": "bulk",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Devices"
        ]
      }
    },
    "/domain": {
      "get": {
        "operationId": "ReadDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReadDomainResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dc",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Domains"
        ]
      },
      "delete": {
        "operationId": "DeleteDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteDomainResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dc",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Domains"
        ]
      }
    },
    "/domains": {
      "get": {
        "operationId": "SearchDomains",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSearchDomainsResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "description": "like",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "attrs",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Domains"
        ]
      },
      "post": {
        "operationId": "CreateDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCreateDomainResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateDomainRequest"
            }
          }
        ],
        "tags": [
          "Domains"
        ]
      }
    },
    "/domains/{dc}": {
      "get": {
        "operationId": "ReadDomain2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReadDomainResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "dc",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Domains"
        ]
      },
      "delete": {
        "operationId": "DeleteDomain2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteDomainResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "dc",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Domains"
        ]
      }
    },
    "/domains/{domain.dc}": {
      "put": {
        "operationId": "UpdateDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateDomainResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "domain.dc",
            "description": "component",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DomainsUpdateDomainBody"
            }
          }
        ],
        "tags": [
          "Domains"
        ]
      },
      "patch": {
        "operationId": "UpdateDomain2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateDomainResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "domain.dc",
            "description": "component",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DomainsUpdateDomainBody"
            }
          }
        ],
        "tags": [
          "Domains"
        ]
      }
    },
    "/email/profile": {
      "get": {
        "summary": "Search EmailProfile",
        "operationId": "SearchEmailProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListEmailProfile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "EmailProfileService"
        ]
      },
      "post": {
        "summary": "Create EmailProfile",
        "operationId": "CreateEmailProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineEmailProfile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateEmailProfileRequest"
            }
          }
        ],
        "tags": [
          "EmailProfileService"
        ]
      }
    },
    "/email/profile/{id}": {
      "get": {
        "summary": "EmailProfile item",
        "operationId": "ReadEmailProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineEmailProfile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "EmailProfileService"
        ]
      },
      "delete": {
        "summary": "Remove EmailProfile",
        "operationId": "DeleteEmailProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineEmailProfile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "EmailProfileService"
        ]
      },
      "put": {
        "summary": "Update EmailProfile",
        "operationId": "UpdateEmailProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineEmailProfile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailProfileServiceUpdateEmailProfileBody"
            }
          }
        ],
        "tags": [
          "EmailProfileService"
        ]
      },
      "patch": {
        "operationId": "PatchEmailProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineEmailProfile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailProfileServicePatchEmailProfileBody"
            }
          }
        ],
        "tags": [
          "EmailProfileService"
        ]
      }
    },
    "/email/profile/{id}/login": {
      "get": {
        "operationId": "LoginEmailProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineLoginEmailProfileResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "EmailProfileService"
        ]
      }
    },
    "/email/profile/{id}/logout": {
      "patch": {
        "operationId": "LogoutEmailProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineLogoutEmailProfileResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "EmailProfileService"
        ]
      }
    },
    "/email/profile/{id}/test": {
      "get": {
        "summary": "EmailProfile check login",
        "operationId": "TestEmailProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineTestEmailProfileResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "EmailProfileService"
        ]
      }
    },
    "/hook": {
      "get": {
        "summary": "List of WebHook",
        "operationId": "SearchWebHook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListWebHook"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "WebHookService"
        ]
      },
      "post": {
        "summary": "Create WebHook",
        "operationId": "CreateWebHook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineWebHook"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateWebHookRequest"
            }
          }
        ],
        "tags": [
          "WebHookService"
        ]
      }
    },
    "/hook/{id}": {
      "get": {
        "summary": "WebHook item",
        "operationId": "ReadWebHook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineWebHook"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "WebHookService"
        ]
      },
      "delete": {
        "summary": "Remove WebHook",
        "operationId": "DeleteWebHook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineWebHook"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "WebHookService"
        ]
      },
      "put": {
        "summary": "Update WebHook",
        "operationId": "UpdateWebHook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineWebHook"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebHookServiceUpdateWebHookBody"
            }
          }
        ],
        "tags": [
          "WebHookService"
        ]
      },
      "patch": {
        "summary": "Patch WebHook",
        "operationId": "PatchWebHook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineWebHook"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebHookServicePatchWebHookBody"
            }
          }
        ],
        "tags": [
          "WebHookService"
        ]
      }
    },
    "/ldap": {
      "get": {
        "summary": "Search for LDAP directories ...",
        "operationId": "SearchLDAPCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSearchLDAPResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\n\nselection: by unique identifier",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "term-of-search: lookup[name]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "case-ignore substring match: ILIKE '*' - any; '?' - one",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "access",
            "description": "[M]andatory[A]ccess[C]ontrol: with access mode (action) granted!",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "delete": {
        "summary": "Delete LDAP profile(s) ...",
        "operationId": "DeleteLDAPCatalog2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPCatalog"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDeleteLDAPRequest"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "post": {
        "summary": "Create LDAP profile",
        "operationId": "CreateLDAPCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPCatalog"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiLDAPCatalog"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/search": {
      "get": {
        "summary": "LDAPSearch performs LDAP Search operation ...",
        "operationId": "LDAPSearch4",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPSearchResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "----- connection -----\nOptional. ID of the preconfigured LDAP catalog",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "url",
            "description": "Optional. URL to establish connection to LDAP catalog\n\nURL e.g.: [(ldap|ldapi|ldaps)://]host[:port]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tls.PEM",
            "description": "TODO: (!)\n\nbase64",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "bind",
            "description": "----- BIND: Authorization -----\n\nauthorization method e.g.: SIMPLE, SAML, NTLM, etc.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "description": "bind_dn",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "description": "password",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseObject",
            "description": "----- SearchRequest -----\nbaseObject [D]istinguished[N]ame",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "baseObject              (0),\nsingleLevel             (1),\nwholeSubtree            (2)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "derefAliases",
            "description": "neverDerefAliases       (0),\nderefInSearching        (1),\nderefFindingBaseObj     (2),\nderefAlways             (3)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sizeLimit",
            "description": "INTEGER (0 ..  maxInt),",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "timeLimit",
            "description": "INTEGER (0 ..  maxInt),",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "typesOnly",
            "description": "BOOLEAN,",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter",
            "description": "Filter,",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "attributes",
            "description": "AttributeSelection",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "post": {
        "summary": "LDAPSearch performs LDAP Search operation ...",
        "operationId": "LDAPSearch3",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPSearchResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiLDAPSearchRequest"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{catalog.id}": {
      "put": {
        "summary": "Update LDAP profile details",
        "operationId": "UpdateLDAPCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPCatalog"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog.id",
            "description": "identity\nint64 dc = 1;",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LDAPUpdateLDAPCatalogBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "patch": {
        "summary": "Update LDAP profile details",
        "operationId": "UpdateLDAPCatalog2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPCatalog"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog.id",
            "description": "identity\nint64 dc = 1;",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LDAPUpdateLDAPCatalogBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{catalog.id}/templates": {
      "post": {
        "operationId": "CreateLDAPTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPTemplate"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LDAPCreateLDAPTemplateBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{catalog_id}/rsync": {
      "get": {
        "summary": "(ResyncLDAPResponse) {",
        "operationId": "SearchLDAProcess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAProcessResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "REQUIRED. Parent LDAP catalog IDentifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\nOPTIONAL. Search process by unique .id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "OPTIONAL. Filter(s) SET",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "template",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "objclass",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "failed",
            "description": "WITH .errs",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "enabled",
            "description": "created|updated",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "disabled",
            "description": "deleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "post": {
        "summary": "Resync LDAP directory catalog changes ...",
        "description": "(ResyncLDAPResponse) {",
        "operationId": "ResyncLDAPCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAProcess"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "LDAP Catalog unique IDentifier to sync with\n\ncatalog_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LDAPResyncLDAPCatalogBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{catalog_id}/rsync/{id}": {
      "get": {
        "summary": "(ResyncLDAPResponse) {",
        "operationId": "LocateLDAProcess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAProcess"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "REQUIRED. Parent LDAP catalog IDentifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\nOPTIONAL. Search process by unique .id",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "OPTIONAL. Filter(s) SET",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "template",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "objclass",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "failed",
            "description": "WITH .errs",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "enabled",
            "description": "created|updated",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "disabled",
            "description": "deleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{catalog_id}/search": {
      "get": {
        "summary": "LDAPSearch performs LDAP Search operation ...",
        "operationId": "LDAPSearch2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPSearchResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "----- connection -----\nOptional. ID of the preconfigured LDAP catalog",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "url",
            "description": "Optional. URL to establish connection to LDAP catalog\n\nURL e.g.: [(ldap|ldapi|ldaps)://]host[:port]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tls.PEM",
            "description": "TODO: (!)\n\nbase64",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "bind",
            "description": "----- BIND: Authorization -----\n\nauthorization method e.g.: SIMPLE, SAML, NTLM, etc.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "description": "bind_dn",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "description": "password",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseObject",
            "description": "----- SearchRequest -----\nbaseObject [D]istinguished[N]ame",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "baseObject              (0),\nsingleLevel             (1),\nwholeSubtree            (2)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "derefAliases",
            "description": "neverDerefAliases       (0),\nderefInSearching        (1),\nderefFindingBaseObj     (2),\nderefAlways             (3)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sizeLimit",
            "description": "INTEGER (0 ..  maxInt),",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "timeLimit",
            "description": "INTEGER (0 ..  maxInt),",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "typesOnly",
            "description": "BOOLEAN,",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter",
            "description": "Filter,",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "attributes",
            "description": "AttributeSelection",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "post": {
        "summary": "LDAPSearch performs LDAP Search operation ...",
        "operationId": "LDAPSearch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPSearchResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "----- connection -----\nOptional. ID of the preconfigured LDAP catalog",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LDAPLDAPSearchBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{catalog_id}/templates": {
      "get": {
        "operationId": "SearchLDAPTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPTemplateResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "REQUIRED. Parent LDAP catalog IDentifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\nOPTIONAL. Search templates by .id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "OPTIONAL. Filter(s) SET",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "base_dn",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "objclass",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "disabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "delete": {
        "operationId": "DeleteLDAPTemplate2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPTemplateResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "REQUIRED. Parent LDAP catalog IDentifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LDAPDeleteLDAPTemplateBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{catalog_id}/templates/{id}": {
      "get": {
        "operationId": "LocateLDAPTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPTemplate"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "REQUIRED. Parent LDAP catalog IDentifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\nOPTIONAL. Search templates by .id",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "OPTIONAL. Filter(s) SET",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "base_dn",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "objclass",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "disabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "delete": {
        "operationId": "DeleteLDAPTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPTemplateResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "catalog_id",
            "description": "REQUIRED. Parent LDAP catalog IDentifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\nOPTIONAL. Search templates by .id",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LDAPDeleteLDAPTemplateBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{id}": {
      "get": {
        "summary": "Read LDAP catalog profile by .id",
        "operationId": "LocateLDAPCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPCatalog"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\n\nselection: by unique identifier",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "term-of-search: lookup[name]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "case-ignore substring match: ILIKE '*' - any; '?' - one",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "access",
            "description": "[M]andatory[A]ccess[C]ontrol: with access mode (action) granted!",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "delete": {
        "summary": "Delete LDAP profile(s) ...",
        "operationId": "DeleteLDAPCatalog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPCatalog"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "catalog id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "related_objects",
            "description": "WITH objects bound to ?",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/ldap/{template.catalog.id}/templates/{template.id}": {
      "put": {
        "operationId": "UpdateLDAPTemplate2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPTemplate"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "template.catalog.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "template.id",
            "description": "ID unique",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LDAPUpdateLDAPTemplateBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      },
      "patch": {
        "operationId": "UpdateLDAPTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLDAPTemplate"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "template.catalog.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "template.id",
            "description": "ID unique",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LDAPUpdateLDAPTemplateBody"
            }
          }
        ],
        "tags": [
          "LDAP"
        ]
      }
    },
    "/license": {
      "get": {
        "operationId": "LicenseUsage2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLicenseUsageResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "size",
            "description": "----- Search Options ----- //\n\ndefault: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "default: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "set of output fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "user.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "domain.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "by serial number(s)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "product",
            "description": "by product name(s)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "valid",
            "description": "view: all|valid|grantable\n\nshow: available to be granted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "q",
            "description": "filter: term of search",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/logger/available_objects": {
      "get": {
        "operationId": "ReadSystemObjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/loggerSystemObjects"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "include_existing",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "ConfigService"
        ]
      }
    },
    "/logger/config": {
      "get": {
        "operationId": "SearchConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/loggerConfigs"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "object",
            "description": "NOT USED",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "cc_queue",
                "schema",
                "users",
                "devices",
                "calendars",
                "cc_list",
                "cc_team",
                "cc_agent",
                "cc_resource",
                "cc_resource_group",
                "chat_bots",
                "cases",
                "contacts",
                "cc_list_number",
                "case_comments",
                "record_file"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ConfigService"
        ]
      },
      "post": {
        "operationId": "CreateConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/loggerConfig"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/loggerCreateConfigRequest"
            }
          }
        ],
        "tags": [
          "ConfigService"
        ]
      }
    },
    "/logger/config/{config_id}": {
      "get": {
        "operationId": "ReadConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/loggerConfig"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "config_id",
            "description": "int32 domainId = 8;",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "ConfigService"
        ]
      },
      "delete": {
        "operationId": "DeleteConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/loggerEmpty"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "ConfigService"
        ]
      },
      "put": {
        "operationId": "UpdateConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/loggerConfig"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfigServiceUpdateConfigBody"
            }
          }
        ],
        "tags": [
          "ConfigService"
        ]
      },
      "patch": {
        "operationId": "PatchConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/loggerConfig"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfigServicePatchConfigBody"
            }
          }
        ],
        "tags": [
          "ConfigService"
        ]
      }
    },
    "/logger/config/{config_id}/logs": {
      "get": {
        "operationId": "SearchLogByConfigId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/loggerLogs"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "config_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "action",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "default_no_action",
                "create",
                "update",
                "read",
                "delete"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "user_ip",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "LoggerService"
        ]
      }
    },
    "/logger/user/{user_id}/logs": {
      "get": {
        "operationId": "SearchLogByUserId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/loggerLogs"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "description": "REQUIRED filter",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "object_id",
            "description": "SPECIFIC filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "action",
            "description": "GENERAL filters",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "default_no_action",
                "create",
                "update",
                "read",
                "delete"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "user_ip",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "LoggerService"
        ]
      }
    },
    "/logger/{object}/record/{record_id}/logs": {
      "get": {
        "operationId": "SearchLogByRecordId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/loggerLogs"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "object",
            "description": "SPECIFIC filter",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "cc_queue",
              "schema",
              "users",
              "devices",
              "calendars",
              "cc_list",
              "cc_team",
              "cc_agent",
              "cc_resource",
              "cc_resource_group",
              "chat_bots",
              "cases",
              "contacts",
              "cc_list_number",
              "case_comments",
              "record_file"
            ]
          },
          {
            "name": "record_id",
            "description": "REQUIRED filter",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "action",
            "description": "GENERAL filters",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "default_no_action",
                "create",
                "update",
                "read",
                "delete"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "user_ip",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "date_from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "date_to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "LoggerService"
        ]
      }
    },
    "/oauth/apps": {
      "get": {
        "operationId": "SearchOAuthService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSearchOAuthServiceResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\n\nselection: by unique identifier",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "term-of-search: lookup[name]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "case-ignore substring match: ILIKE '*' - any; '?' - one",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "access",
            "description": "[M]andatory[A]ccess[C]ontrol: with access mode (action) granted!",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "enabled",
            "description": "----- OAuthService-Specific Filters ----------------",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "OAuth2Federation"
        ]
      },
      "delete": {
        "operationId": "DeleteOAuthService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteOAuthServiceResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiDeleteOAuthServiceRequest"
            }
          }
        ],
        "tags": [
          "OAuth2Federation"
        ]
      },
      "post": {
        "operationId": "CreateOAuthService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOAuthService"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiOAuthService"
            }
          }
        ],
        "tags": [
          "OAuth2Federation"
        ]
      }
    },
    "/oauth/apps/{changes.id}": {
      "put": {
        "operationId": "UpdateOAuthService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOAuthService"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "changes.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OAuth2FederationUpdateOAuthServiceBody"
            }
          }
        ],
        "tags": [
          "OAuth2Federation"
        ]
      },
      "patch": {
        "operationId": "UpdateOAuthService2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOAuthService"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "changes.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OAuth2FederationUpdateOAuthServiceBody"
            }
          }
        ],
        "tags": [
          "OAuth2Federation"
        ]
      }
    },
    "/oauth/apps/{id}": {
      "get": {
        "operationId": "LocateOAuthService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiOAuthService"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "----- Search Basic Filters ---------------------------\n\nselection: by unique identifier",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "page",
            "description": "----- Select Options -------------------------\n\ndefault: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "default: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "attributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "term-of-search: lookup[name]",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "case-ignore substring match: ILIKE '*' - any; '?' - one",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "access",
            "description": "[M]andatory[A]ccess[C]ontrol: with access mode (action) granted!",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "enabled",
            "description": "----- OAuthService-Specific Filters ----------------",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "OAuth2Federation"
        ]
      },
      "delete": {
        "operationId": "DeleteOAuthService2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteOAuthServiceResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "csv",
            "minItems": 1
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OAuth2FederationDeleteOAuthServiceBody"
            }
          }
        ],
        "tags": [
          "OAuth2Federation"
        ]
      }
    },
    "/objclass": {
      "get": {
        "operationId": "SearchClasses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSearchClassesResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "description": "TO BE REMOVED // bound to session.domain.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "class",
            "description": "[filter]: like '%class%'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "int64 id = 3;  // [filter]: obj.id = id\ncontrols\n\noutput",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "sort: \"field\" asc; \"!field\" desc",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "description": "page number",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Classes"
        ]
      }
    },
    "/objclass/{class.id}": {
      "put": {
        "operationId": "UpdateClass",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateClassResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "class.id",
            "description": "(class::object).id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClassesUpdateClassBody"
            }
          }
        ],
        "tags": [
          "Classes"
        ]
      },
      "patch": {
        "operationId": "UpdateClass2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateClassResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "class.id",
            "description": "(class::object).id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClassesUpdateClassBody"
            }
          }
        ],
        "tags": [
          "Classes"
        ]
      }
    },
    "/objclass/{id}": {
      "get": {
        "operationId": "ReadClass",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReadClassResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "[filter]: obj.id = id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "class",
            "description": "[filter]: like '%class%'",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Classes"
        ]
      }
    },
    "/permissions": {
      "get": {
        "summary": "GetPermissions list available from application",
        "operationId": "GetPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSearchPermissionResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "q",
            "description": "TermOfSearch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "= ANY(id)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "not",
            "description": "\u003c\u003e ANY(not)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "controls\n\noutput",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "sort: \"field\" asc; \"!field\" desc",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "description": "page number",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Permissions"
        ]
      }
    },
    "/presence": {
      "patch": {
        "summary": "set(presence) (notify, error)",
        "description": "(UserPresence) {",
        "operationId": "SetStatus2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPresenceStatus"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSetStatusRequest"
            }
          }
        ],
        "tags": [
          "Presence"
        ]
      }
    },
    "/products": {
      "get": {
        "operationId": "LicenseUsage3",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLicenseUsageResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "size",
            "description": "----- Search Options ----- //\n\ndefault: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "default: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "set of output fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "user.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "domain.id",
            "description": "identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "by serial number(s)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "product",
            "description": "by product name(s)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "valid",
            "description": "view: all|valid|grantable\n\nshow: available to be granted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "q",
            "description": "filter: term of search",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/products/{id}/users": {
      "get": {
        "operationId": "LicenseUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLicenseUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "----- Search Filters ----- //\n\nREQUIRED Product ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "size",
            "description": "----- Search Options ----- //\n\ndefault: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "default: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "set of output fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "filter: term of search (username)",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/regions": {
      "get": {
        "operationId": "SearchRegion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListRegion"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "timezone_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "RegionService"
        ]
      },
      "post": {
        "operationId": "CreateRegion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineRegion"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateRegionRequest"
            }
          }
        ],
        "tags": [
          "RegionService"
        ]
      }
    },
    "/regions/{id}": {
      "get": {
        "operationId": "ReadRegion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineRegion"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "RegionService"
        ]
      },
      "delete": {
        "operationId": "DeleteRegion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineRegion"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "RegionService"
        ]
      },
      "put": {
        "operationId": "UpdateRegion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineRegion"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegionServiceUpdateRegionBody"
            }
          }
        ],
        "tags": [
          "RegionService"
        ]
      },
      "patch": {
        "operationId": "PatchRegion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineRegion"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegionServicePatchRegionBody"
            }
          }
        ],
        "tags": [
          "RegionService"
        ]
      }
    },
    "/roles": {
      "get": {
        "operationId": "SearchRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSearchRolesResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "description": "----- Role-specific Filters ----------------- //\n\nfilter: .id = any(:ids...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "description": "filter: group name like",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user.id",
            "description": "Object ID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "Display Name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "description": "filter: term of search (name, description)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "bool admin = 4;  // filter: where CURRENT user is 'ADMIN' of\ncontrols\n\noutput",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "sort: \"field\" asc; \"!field\" desc",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "description": "page number",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "operationId": "CreateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCreateRoleResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateRoleRequest"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/roles/metadata": {
      "get": {
        "operationId": "RoleMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiRoleMetadataResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Optional. Unique ID of metadata role owner",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "key",
            "description": "Optional. Partial metadata document key name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "merge.null_value",
            "description": "Represents a null value.\n\n - NULL_VALUE: Null value.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NULL_VALUE"
            ],
            "default": "NULL_VALUE"
          },
          {
            "name": "merge.number_value",
            "description": "Represents a double value.",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "merge.string_value",
            "description": "Represents a string value.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "merge.bool_value",
            "description": "Represents a boolean value.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "merge.struct_value",
            "description": "Represents a structured value.",
            "in": "query",
            "required": false,
            "type": "object"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/roles/objects/{object}/records/{record.id}": {
      "get": {
        "operationId": "SearchRecordAvailableRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSearchRolesResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "object",
            "description": "bool admin = 4;  // filter: where CURRENT user is 'ADMIN' of\nREQUIRED !",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "contacts",
              "cc_list",
              "cc_bucket",
              "calendars",
              "devices",
              "cc_agent",
              "cc_team",
              "cc_resource",
              "cc_resource_group",
              "cc_queue",
              "roles",
              "users",
              "cognitive_profile"
            ]
          },
          {
            "name": "record.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "ids",
            "description": "----- Role-specific Filters ----------------- //\n\nfilter: .id = any(:ids...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "description": "filter: group name like",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "user.id",
            "description": "Object ID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "Display Name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "description": "filter: term of search (name, description)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "record.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "controls\n\noutput",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "sort: \"field\" asc; \"!field\" desc",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "description": "page number",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "page size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/roles/{id}": {
      "get": {
        "operationId": "ReadRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReadRoleResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "role.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "select projection\n\nselect: output (fields,...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Roles"
        ]
      },
      "delete": {
        "operationId": "DeleteRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteRoleResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "DELETE /roles/{id}",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "ids",
            "description": "POST /roles/delete {\"ids\"}",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "permanent",
            "description": "deleteOrMark 'deleted' ?",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/roles/{role.id}": {
      "put": {
        "operationId": "UpdateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateRoleResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "role.id",
            "description": "oid",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RolesUpdateRoleBody"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      },
      "patch": {
        "operationId": "UpdateRole2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateRoleResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "role.id",
            "description": "oid",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RolesUpdateRoleBody"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/routing/outbound/calls": {
      "get": {
        "summary": "List of RoutingOutboundCall",
        "operationId": "SearchRoutingOutboundCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListRoutingOutboundCall"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "schema_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pattern",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RoutingOutboundCallService"
        ]
      },
      "post": {
        "summary": "Create RoutingOutboundCall",
        "operationId": "CreateRoutingOutboundCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineRoutingOutboundCall"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateRoutingOutboundCallRequest"
            }
          }
        ],
        "tags": [
          "RoutingOutboundCallService"
        ]
      }
    },
    "/routing/outbound/calls/{from_id}/to/{to_id}": {
      "patch": {
        "summary": "Move RoutingOutboundCall",
        "operationId": "MovePositionRoutingOutboundCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineMovePositionRoutingOutboundCallResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "from_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "to_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoutingOutboundCallServiceMovePositionRoutingOutboundCallBody"
            }
          }
        ],
        "tags": [
          "RoutingOutboundCallService"
        ]
      }
    },
    "/routing/outbound/calls/{id}": {
      "get": {
        "summary": "RoutingOutboundCall item",
        "operationId": "ReadRoutingOutboundCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineRoutingOutboundCall"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "RoutingOutboundCallService"
        ]
      },
      "delete": {
        "summary": "Remove RoutingOutboundCall",
        "operationId": "DeleteRoutingOutboundCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineRoutingOutboundCall"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "RoutingOutboundCallService"
        ]
      },
      "put": {
        "summary": "Update RoutingOutboundCall",
        "operationId": "UpdateRoutingOutboundCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineRoutingOutboundCall"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoutingOutboundCallServiceUpdateRoutingOutboundCallBody"
            }
          }
        ],
        "tags": [
          "RoutingOutboundCallService"
        ]
      },
      "patch": {
        "summary": "Patch RoutingOutboundCall",
        "operationId": "PatchRoutingOutboundCall",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineRoutingOutboundCall"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoutingOutboundCallServicePatchRoutingOutboundCallBody"
            }
          }
        ],
        "tags": [
          "RoutingOutboundCallService"
        ]
      }
    },
    "/routing/outbound/chat": {
      "get": {
        "operationId": "SearchChatPlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListChatPlan"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "RoutingChatPlanService"
        ]
      },
      "post": {
        "operationId": "CreateChatPlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineChatPlan"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateChatPlanRequest"
            }
          }
        ],
        "tags": [
          "RoutingChatPlanService"
        ]
      }
    },
    "/routing/outbound/chat/{id}": {
      "get": {
        "operationId": "ReadChatPlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineChatPlan"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "RoutingChatPlanService"
        ]
      },
      "delete": {
        "operationId": "DeleteChatPlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineChatPlan"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "RoutingChatPlanService"
        ]
      },
      "put": {
        "operationId": "UpdateChatPlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineChatPlan"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoutingChatPlanServiceUpdateChatPlanBody"
            }
          }
        ],
        "tags": [
          "RoutingChatPlanService"
        ]
      },
      "patch": {
        "operationId": "PatchChatPlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineChatPlan"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoutingChatPlanServicePatchChatPlanBody"
            }
          }
        ],
        "tags": [
          "RoutingChatPlanService"
        ]
      }
    },
    "/routing/schema": {
      "get": {
        "summary": "List RoutingSchema",
        "operationId": "SearchRoutingSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListRoutingSchema"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "default",
                "voice",
                "chat",
                "processing",
                "service"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "editor",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "RoutingSchemaService"
        ]
      },
      "post": {
        "summary": "Create RoutingSchema",
        "operationId": "CreateRoutingSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineRoutingSchema"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateRoutingSchemaRequest"
            }
          }
        ],
        "tags": [
          "RoutingSchemaService"
        ]
      }
    },
    "/routing/schema/tags": {
      "get": {
        "summary": "List RoutingSchemaTags",
        "operationId": "SearchRoutingSchemaTags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListRoutingSchemaTags"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "default",
                "voice",
                "chat",
                "processing",
                "service"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "RoutingSchemaService"
        ]
      }
    },
    "/routing/schema/variables": {
      "get": {
        "operationId": "SearchSchemaVariable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListSchemaVariable"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "SchemaVariablesService"
        ]
      },
      "post": {
        "operationId": "CreateSchemaVariable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineSchemaVariable"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateSchemaVariableRequest"
            }
          }
        ],
        "tags": [
          "SchemaVariablesService"
        ]
      }
    },
    "/routing/schema/variables/{id}": {
      "get": {
        "operationId": "ReadSchemaVariable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineSchemaVariable"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "SchemaVariablesService"
        ]
      },
      "delete": {
        "operationId": "DeleteSchemaVariable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineSchemaVariable"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "SchemaVariablesService"
        ]
      },
      "put": {
        "operationId": "UpdateSchemaVariable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineSchemaVariable"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SchemaVariablesServiceUpdateSchemaVariableBody"
            }
          }
        ],
        "tags": [
          "SchemaVariablesService"
        ]
      },
      "patch": {
        "operationId": "PatchSchemaVariable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineSchemaVariable"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SchemaVariablesServicePatchSchemaVariableBody"
            }
          }
        ],
        "tags": [
          "SchemaVariablesService"
        ]
      }
    },
    "/routing/schema/{id}": {
      "get": {
        "summary": "RoutingSchema item",
        "operationId": "ReadRoutingSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineRoutingSchema"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "RoutingSchemaService"
        ]
      },
      "delete": {
        "summary": "Remove RoutingSchema",
        "operationId": "DeleteRoutingSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineRoutingSchema"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "RoutingSchemaService"
        ]
      },
      "put": {
        "summary": "Update RoutingSchema",
        "operationId": "UpdateRoutingSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineRoutingSchema"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoutingSchemaServiceUpdateRoutingSchemaBody"
            }
          }
        ],
        "tags": [
          "RoutingSchemaService"
        ]
      },
      "patch": {
        "summary": "Patch RoutingSchema",
        "operationId": "PatchRoutingSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineRoutingSchema"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoutingSchemaServicePatchRoutingSchemaBody"
            }
          }
        ],
        "tags": [
          "RoutingSchemaService"
        ]
      }
    },
    "/routing/schema/{schema_id}/versions": {
      "get": {
        "operationId": "SearchSchemaVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineSearchSchemaVersionResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "schema_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "SchemaVersionService"
        ]
      }
    },
    "/routing/variables": {
      "get": {
        "summary": "List of RoutingVariable",
        "operationId": "SearchRoutingVariable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListRoutingVariable"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "RoutingVariableService"
        ]
      },
      "post": {
        "summary": "Create RoutingVariable",
        "operationId": "CreateRoutingVariable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineRoutingVariable"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateRoutingVariableRequest"
            }
          }
        ],
        "tags": [
          "RoutingVariableService"
        ]
      }
    },
    "/routing/variables/{id}": {
      "get": {
        "summary": "RoutingVariable item",
        "operationId": "ReadRoutingVariable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineRoutingVariable"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "RoutingVariableService"
        ]
      },
      "delete": {
        "summary": "Remove RoutingVariable",
        "operationId": "DeleteRoutingVariable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineRoutingVariable"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "RoutingVariableService"
        ]
      },
      "put": {
        "summary": "Update RoutingVariable",
        "operationId": "UpdateRoutingVariable",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineRoutingVariable"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoutingVariableServiceUpdateRoutingVariableBody"
            }
          }
        ],
        "tags": [
          "RoutingVariableService"
        ]
      }
    },
    "/search": {
      "get": {
        "operationId": "Search",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ftsSearchResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "object_name",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "FTSService"
        ]
      }
    },
    "/settings": {
      "get": {
        "operationId": "SearchSystemSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListSystemSetting"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "description": "Filter by setting names",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "empty_system_settings_name",
                "enable_omnichannel",
                "member_chunk_size",
                "amd_cancel_not_human",
                "scheme_version_limit",
                "enable_2fa",
                "export_settings",
                "search_number_length",
                "chat_ai_connection",
                "password_reg_exp",
                "password_validation_text",
                "autolink_call_to_contact",
                "period_to_playback_records",
                "is_fulltext_search_enabled",
                "wbt_hide_contact",
                "show_full_contact",
                "call_end_sound_notification",
                "call_end_push_notification",
                "chat_end_sound_notification",
                "chat_end_push_notification",
                "task_end_sound_notification",
                "task_end_push_notification",
                "push_notification_timeout",
                "labels_to_limit_contacts"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "SystemSettingService"
        ]
      },
      "post": {
        "operationId": "CreateSystemSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineSystemSetting"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateSystemSettingRequest"
            }
          }
        ],
        "tags": [
          "SystemSettingService"
        ]
      }
    },
    "/settings/available": {
      "get": {
        "operationId": "SearchAvailableSystemSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListAvailableSystemSetting"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "SystemSettingService"
        ]
      }
    },
    "/settings/{id}": {
      "get": {
        "operationId": "ReadSystemSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineSystemSetting"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "SystemSettingService"
        ]
      },
      "delete": {
        "operationId": "DeleteSystemSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineSystemSetting"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "SystemSettingService"
        ]
      },
      "put": {
        "operationId": "UpdateSystemSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineSystemSetting"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemSettingServiceUpdateSystemSettingBody"
            }
          }
        ],
        "tags": [
          "SystemSettingService"
        ]
      },
      "patch": {
        "operationId": "PatchSystemSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineSystemSetting"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemSettingServicePatchSystemSettingBody"
            }
          }
        ],
        "tags": [
          "SystemSettingService"
        ]
      }
    },
    "/signup": {
      "post": {
        "summary": "Signup new domain with superior access token",
        "operationId": "Signup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLoginResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "description": "domain name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "description": "username",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "description": "user password",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "description": "scope request control",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "certificate",
            "description": "license/certificate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "mobile",
            "description": "OPTIONAL. Mobile device /login request ?",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Auth"
        ]
      }
    },
    "/slas/{sla_id}/sla_condition": {
      "post": {
        "summary": "Create a new SLACondition",
        "operationId": "CreateSLACondition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesSLACondition"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "sla_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputSLACondition"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "SLAConditions"
        ]
      }
    },
    "/slas/{sla_id}/sla_condition/{id}": {
      "get": {
        "summary": "Locate an SLACondition by ID",
        "operationId": "LocateSLACondition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesLocateSLAConditionResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "sla_id",
            "description": "Unique identifier of the SLACondition",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "description": "Unique identifier of the SLACondition",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "SLAConditions"
        ]
      },
      "delete": {
        "summary": "Delete an SLACondition",
        "operationId": "DeleteSLACondition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesSLACondition"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "sla_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "SLAConditions"
        ]
      },
      "put": {
        "summary": "Update an existing SLACondition",
        "operationId": "UpdateSLACondition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesSLACondition"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "sla_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputSLACondition"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "SLAConditions"
        ]
      },
      "patch": {
        "summary": "Update an existing SLACondition",
        "operationId": "UpdateSLACondition2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesSLACondition"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "sla_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputSLACondition"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "SLAConditions"
        ]
      }
    },
    "/slas/{sla_id}/sla_conditions": {
      "get": {
        "summary": "Retrieve a list of SLAConditions or search SLACondition conditions",
        "operationId": "ListSLAConditions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesSLAConditionList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "sla_id",
            "description": "Filter by SLA Id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Filter by unique IDs.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search query string for filtering by name. Supports:\n- Wildcards (*) for substring matching\n- Placeholder (?) for single character substitution\n- Exact match for full names",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sla_condition_id",
            "description": "Filter by SLACondition Id.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "priority_id",
            "description": "filter by priority id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "SLAConditions"
        ]
      }
    },
    "/spaces": {
      "get": {
        "description": "| Field       | Type \n| ----------- | ---- \n| **----------- READ-ONLY -----------** | \n| `id`        | int64 \n| `ver`       | int32 \n| `etag`      | string \n| **---------- OPERATIONAL ----------** | \n| `created_at` | int64(epoch:milli) \n| `created_by` | lookup(user) \n| `updated_at` | int64(epoch:milli) \n| `updated_by` | lookup(user) \n| **---------- ATTRIBUTES -----------** | \n| `name`      | name! \n| `home_page`   | string (home_page) \n| `state`       | bool \n| `has_children`| bool \n",
        "operationId": "ListSpaces",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseSpaceList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Limit of result page records count.   _default(16); limit=(size\u003c=0?-1:size+1);_\n\n```javascript\nconst\n    default = 16\n  , maximum = 32\n;\n\n```",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "description": "Search term:\n`?` - matches any character\n`*` - matches 0 or more characters\nUsed to query records within a set of `qin` fields, eg: name, etc...",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort result dataset of records by fields.\n```\nsort ::= *( ORDER name )\n\nORDER  = ASC / DESC\nDESC   = \"-\" / \"!\"\nASC    = [ \"+\" ]   ; Default\n```\n\nFields available\n\n- `id`(seq)\n- `domain`{name}\n- `state`",
            "in": "query",
            "required": false,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "default": "id",
              "pattern": "^[+|-|!]?\\w+$"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "default": "*"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "description": "Records with unique IDentifier(s).\nAccept: `id` -or- `etag`.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Spaces"
        ]
      },
      "post": {
        "summary": "Create NEW Space",
        "operationId": "CreateSpace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseSpace"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "input",
            "description": "NEW Spaces source changes",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/knowledgebaseInputSpace"
              }
            }
          },
          {
            "name": "fields",
            "description": "Source Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Spaces"
        ]
      }
    },
    "/spaces/search": {
      "get": {
        "operationId": "SpacesArticlesSearch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseCombinedList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search term: location name;\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "description": "Active Article only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tags",
            "description": "Tags associated with the article.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "KnowledgebaseSearch"
        ]
      }
    },
    "/spaces/tags": {
      "get": {
        "summary": "List of the all Articles's Tag(s).",
        "operationId": "ListTags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseTagsList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Tags"
        ]
      }
    },
    "/spaces/{etag}": {
      "get": {
        "summary": "Locate spaces source",
        "operationId": "LocateSpace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseSpace"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "etag",
            "description": "The Space source IDentifier.\nAccept: `etag` (obsolete+) or `id`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Source Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Spaces"
        ]
      },
      "delete": {
        "summary": "Remove Space source",
        "operationId": "DeleteSpace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseSpace"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "etag",
            "description": "Unique ID of the latest version of a resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Spaces"
        ]
      },
      "patch": {
        "summary": "NEW Update of the Space source",
        "operationId": "UpdateSpace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseSpace"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resorce.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Space source changes",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Represents the name of the knowledge base space."
                },
                "home_page": {
                  "type": "string",
                  "description": "BIO. Short description about the space.\nOPTIONAL. Multi-lined text."
                },
                "state": {
                  "type": "boolean",
                  "description": "The state of the space."
                }
              },
              "title": "NEW Space source changes"
            }
          },
          {
            "name": "fields",
            "description": "Source Fields to return into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Spaces"
        ]
      }
    },
    "/spaces/{space_id}/articles": {
      "get": {
        "summary": "List of the Space's Article(s).",
        "operationId": "ListArticles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseArticleList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "space_id",
            "description": "Space ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search term: location name;\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "article_id",
            "description": "Record(s) with unique ID only.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "description": "Active Article only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tags",
            "description": "Tags associated with the article.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Articles"
        ]
      },
      "post": {
        "operationId": "CreateArticle",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseArticleList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "space_id",
            "description": "Link space ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the Article link.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/knowledgebaseInputArticle"
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Articles"
        ]
      }
    },
    "/spaces/{space_id}/articles/{article_id}/attachments": {
      "get": {
        "operationId": "ArticlesAttachmentList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseAttachmentList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "space_id",
            "description": "Space ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "article_id",
            "description": "Record(s) with unique ID only.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Articles"
        ]
      }
    },
    "/spaces/{space_id}/articles/{article_id}/childrens": {
      "get": {
        "summary": "List of the Space's Article(s).",
        "operationId": "ListArticles2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseArticleList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "space_id",
            "description": "Space ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "article_id",
            "description": "Record(s) with unique ID only.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search term: location name;\n`?` - matches any one character\n`*` - matches 0 or more characters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "description": "Active Article only.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tags",
            "description": "Tags associated with the article.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Articles"
        ]
      }
    },
    "/spaces/{space_id}/articles/{article_id}/history": {
      "get": {
        "operationId": "ArticleVersionsList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseArticleVersionList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "space_id",
            "description": "Space ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "article_id",
            "description": "Record(s) with unique ID only.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Articles"
        ]
      }
    },
    "/spaces/{space_id}/articles/{article_id}/history/{version_id}": {
      "get": {
        "operationId": "LocateArticleVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseArticleVersion"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "space_id",
            "description": "Space ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "article_id",
            "description": "Record(s) with unique ID only.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "description": "The unique ID of version record",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Articles"
        ]
      }
    },
    "/spaces/{space_id}/articles/{etag}": {
      "get": {
        "summary": "Locate the space's Article association.",
        "operationId": "LocateArticle",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseArticle"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "space_id",
            "description": "Space ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique Article link IDentifier.\nAccept: `etag` (obsolete+) or `id`.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "\\w+"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Articles"
        ]
      },
      "delete": {
        "summary": "Remove the space's Article association.",
        "operationId": "DeleteArticle",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseArticle"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "space_id",
            "description": "Space ID associated with.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID to remove.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Articles"
        ]
      },
      "patch": {
        "summary": "Update the space's Article details.",
        "operationId": "UpdateArticle",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/knowledgebaseArticleList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "space_id",
            "description": "Link space ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "etag",
            "description": "Unique ID of the latest version of an existing resource.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "input",
            "description": "NEW Update of the Article link.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "space_id": {
                  "type": "string",
                  "format": "int64",
                  "description": "[VALUE]: --------------------------------------\nSpace ID associated with."
                },
                "state": {
                  "type": "boolean",
                  "description": "Indicates if article is active and actual."
                },
                "text": {
                  "type": "string",
                  "description": "The text content of the article."
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Tags associated with the article."
                },
                "title": {
                  "type": "string",
                  "description": "The title of the article."
                },
                "parent_article": {
                  "type": "string",
                  "format": "int64",
                  "description": "The parent article ID."
                },
                "pinned": {
                  "type": "boolean",
                  "description": "Indicates that the article is pinned on the top of list."
                }
              },
              "title": "NEW Update of the Article link."
            }
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved into result of changes.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Articles"
        ]
      }
    },
    "/srvinfo": {
      "get": {
        "operationId": "ServerInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiServerInfoResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "tags": [
          "Customers"
        ]
      }
    },
    "/statuses/{status_id}/status": {
      "get": {
        "summary": "Retrieve a list of statuses or search status conditions",
        "operationId": "ListStatusConditions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesStatusConditionList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "status_id",
            "description": "Filter by Status Id.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "description": "Page number of result dataset records. offset = (page*size)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "Size count of records on result page. limit = (size++)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "Sort the result according to fields.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Filter by unique IDs.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "Search query string for filtering by name. Supports:\n- Wildcards (*) for substring matching\n- Placeholder (?) for single character substitution\n- Exact match for full names",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "StatusConditions"
        ]
      },
      "post": {
        "summary": "Create a new status condition",
        "operationId": "CreateStatusCondition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesStatusCondition"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "status_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputCreateStatusCondition"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "StatusConditions"
        ]
      }
    },
    "/statuses/{status_id}/status/{id}": {
      "get": {
        "summary": "Locate a status condition by ID",
        "operationId": "LocateStatusCondition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesLocateStatusConditionResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "status_id",
            "description": "ID of the status to be located",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "description": "ID of the status condition to be located",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "Fields to be retrieved as a result.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "StatusConditions"
        ]
      },
      "delete": {
        "summary": "Delete a status condition",
        "operationId": "DeleteStatusCondition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesStatusCondition"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "status_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "StatusConditions"
        ]
      },
      "put": {
        "summary": "Update an existing status condition",
        "operationId": "UpdateStatusCondition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesStatusCondition"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "status_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputStatusCondition"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "StatusConditions"
        ]
      },
      "patch": {
        "summary": "Update an existing status condition",
        "operationId": "UpdateStatusCondition2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/casesStatusCondition"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "status_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/casesInputStatusCondition"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "StatusConditions"
        ]
      }
    },
    "/storage/backend_profiles": {
      "get": {
        "summary": "List of BackendProfile",
        "operationId": "SearchBackendProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageListBackendProfile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "BackendProfileService"
        ]
      },
      "post": {
        "summary": "Create BackendProfile",
        "operationId": "CreateBackendProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageBackendProfile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageCreateBackendProfileRequest"
            }
          }
        ],
        "tags": [
          "BackendProfileService"
        ]
      }
    },
    "/storage/backend_profiles/{id}": {
      "get": {
        "summary": "BackendProfile item",
        "operationId": "ReadBackendProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageBackendProfile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "BackendProfileService"
        ]
      },
      "delete": {
        "summary": "Remove BackendProfile",
        "operationId": "DeleteBackendProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageBackendProfile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "BackendProfileService"
        ]
      },
      "put": {
        "summary": "Update BackendProfile",
        "operationId": "UpdateBackendProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageBackendProfile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BackendProfileServiceUpdateBackendProfileBody"
            }
          }
        ],
        "tags": [
          "BackendProfileService"
        ]
      },
      "patch": {
        "summary": "Patch BackendProfile",
        "operationId": "PatchBackendProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageBackendProfile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BackendProfileServicePatchBackendProfileBody"
            }
          }
        ],
        "tags": [
          "BackendProfileService"
        ]
      }
    },
    "/storage/cognitive_profiles": {
      "get": {
        "operationId": "SearchCognitiveProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageListCognitiveProfile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "DefaultService",
                "STT",
                "TTS"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "CognitiveProfileService"
        ]
      },
      "post": {
        "operationId": "CreateCognitiveProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageCognitiveProfile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Create cognitive profile request body for TTS and TTS",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageCreateCognitiveProfileRequest"
            }
          }
        ],
        "tags": [
          "CognitiveProfileService"
        ]
      }
    },
    "/storage/cognitive_profiles/{id}": {
      "get": {
        "operationId": "ReadCognitiveProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageCognitiveProfile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "CognitiveProfileService"
        ]
      },
      "delete": {
        "summary": "Remove BackendProfile",
        "operationId": "DeleteCognitiveProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageCognitiveProfile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "CognitiveProfileService"
        ]
      },
      "put": {
        "operationId": "UpdateCognitiveProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageCognitiveProfile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CognitiveProfileServiceUpdateCognitiveProfileBody"
            }
          }
        ],
        "tags": [
          "CognitiveProfileService"
        ]
      },
      "patch": {
        "operationId": "PatchCognitiveProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageCognitiveProfile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CognitiveProfileServicePatchCognitiveProfileBody"
            }
          }
        ],
        "tags": [
          "CognitiveProfileService"
        ]
      }
    },
    "/storage/cognitive_profiles/{id}/voice": {
      "get": {
        "summary": "Search Voices",
        "operationId": "SearchCognitiveProfileVoices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageListCognitiveProfileVoices"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CognitiveProfileService"
        ]
      }
    },
    "/storage/file": {
      "get": {
        "operationId": "SearchFiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageListFile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "uploaded_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "uploaded_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "uploaded_by",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "reference_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UnknownChannel",
                "ChatChannel",
                "MailChannel",
                "CallChannel",
                "LogChannel",
                "MediaChannel",
                "KnowledgebaseChannel",
                "CasesChannel",
                "ScreenshotChannel",
                "ScreenSharingChannel"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "retention_until.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "retention_until.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "FileService"
        ]
      },
      "delete": {
        "operationId": "DeleteFiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageDeleteFilesResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageDeleteFilesRequest"
            }
          }
        ],
        "tags": [
          "FileService"
        ]
      }
    },
    "/storage/file_policies": {
      "get": {
        "summary": "List of FilePolicy",
        "operationId": "SearchFilePolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageListFilePolicies"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "FilePoliciesService"
        ]
      },
      "post": {
        "summary": "Create FilePolicy",
        "operationId": "CreateFilePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageFilePolicy"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageCreateFilePolicyRequest"
            }
          }
        ],
        "tags": [
          "FilePoliciesService"
        ]
      }
    },
    "/storage/file_policies/{from_id}/to/{to_id}": {
      "patch": {
        "operationId": "MovePositionFilePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageMovePositionFilePolicyResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "from_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "to_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FilePoliciesServiceMovePositionFilePolicyBody"
            }
          }
        ],
        "tags": [
          "FilePoliciesService"
        ]
      }
    },
    "/storage/file_policies/{id}": {
      "get": {
        "summary": "FilePolicy item",
        "operationId": "ReadFilePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageFilePolicy"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "FilePoliciesService"
        ]
      },
      "delete": {
        "summary": "Remove FilePolicy",
        "operationId": "DeleteFilePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageFilePolicy"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "FilePoliciesService"
        ]
      },
      "put": {
        "summary": "Update FilePolicy",
        "operationId": "UpdateFilePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageFilePolicy"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FilePoliciesServiceUpdateFilePolicyBody"
            }
          }
        ],
        "tags": [
          "FilePoliciesService"
        ]
      },
      "patch": {
        "summary": "Patch FilePolicy",
        "operationId": "PatchFilePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageFilePolicy"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FilePoliciesServicePatchFilePolicyBody"
            }
          }
        ],
        "tags": [
          "FilePoliciesService"
        ]
      }
    },
    "/storage/file_policies/{id}/apply": {
      "patch": {
        "operationId": "FilePolicyApply",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageFilePolicyApplyResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FilePoliciesServiceFilePolicyApplyBody"
            }
          }
        ],
        "tags": [
          "FilePoliciesService"
        ]
      }
    },
    "/storage/import_templates": {
      "get": {
        "operationId": "SearchImportTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageListImportTemplate"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ImportTemplateService"
        ]
      },
      "post": {
        "operationId": "CreateImportTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageImportTemplate"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Create import template for CSV",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageCreateImportTemplateRequest"
            }
          }
        ],
        "tags": [
          "ImportTemplateService"
        ]
      }
    },
    "/storage/import_templates/{id}": {
      "get": {
        "operationId": "ReadImportTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageImportTemplate"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "ImportTemplateService"
        ]
      },
      "delete": {
        "operationId": "DeleteImportTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageImportTemplate"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "ImportTemplateService"
        ]
      },
      "put": {
        "operationId": "UpdateImportTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageImportTemplate"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImportTemplateServiceUpdateImportTemplateBody"
            }
          }
        ],
        "tags": [
          "ImportTemplateService"
        ]
      },
      "patch": {
        "operationId": "PatchImportTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageImportTemplate"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImportTemplateServicePatchImportTemplateBody"
            }
          }
        ],
        "tags": [
          "ImportTemplateService"
        ]
      }
    },
    "/storage/media": {
      "get": {
        "summary": "Search MediaFile",
        "operationId": "SearchMediaFile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageListMedia"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "MediaFileService"
        ]
      }
    },
    "/storage/media/{id}": {
      "get": {
        "summary": "MediaFile item",
        "operationId": "ReadMediaFile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageMediaFile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "MediaFileService"
        ]
      },
      "delete": {
        "summary": "Remove MediaFile",
        "operationId": "DeleteMediaFile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageMediaFile"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "domain_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "MediaFileService"
        ]
      }
    },
    "/storage/p2p/upload/video": {
      "post": {
        "operationId": "UploadP2PVideo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageUploadP2PVideoResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "sdp_offer",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "uuid",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FileService"
        ]
      }
    },
    "/storage/transcript_file": {
      "delete": {
        "operationId": "DeleteFileTranscript",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageDeleteFileTranscriptResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageDeleteFileTranscriptRequest"
            }
          }
        ],
        "tags": [
          "FileTranscriptService"
        ]
      },
      "post": {
        "operationId": "CreateFileTranscript",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageStartFileTranscriptResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageStartFileTranscriptRequest"
            }
          }
        ],
        "tags": [
          "FileTranscriptService"
        ]
      },
      "put": {
        "operationId": "PutFileTranscript",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storagePutFileTranscriptResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storagePutFileTranscriptRequest"
            }
          }
        ],
        "tags": [
          "FileTranscriptService"
        ]
      }
    },
    "/storage/transcript_file/{id}/phrases": {
      "get": {
        "operationId": "GetFileTranscriptPhrases",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageListPhrases"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "FileTranscriptService"
        ]
      }
    },
    "/trigger": {
      "get": {
        "summary": "List of Trigger",
        "operationId": "SearchTrigger",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListTrigger"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "schema_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "TriggerService"
        ]
      },
      "post": {
        "summary": "Create Trigger",
        "operationId": "CreateTrigger",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineTrigger"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/engineCreateTriggerRequest"
            }
          }
        ],
        "tags": [
          "TriggerService"
        ]
      }
    },
    "/trigger/{id}": {
      "get": {
        "summary": "Trigger item",
        "operationId": "ReadTrigger",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineTrigger"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "TriggerService"
        ]
      },
      "delete": {
        "summary": "Remove Trigger",
        "operationId": "DeleteTrigger",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineTrigger"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "TriggerService"
        ]
      },
      "put": {
        "summary": "Update Trigger",
        "operationId": "UpdateTrigger",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineTrigger"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TriggerServiceUpdateTriggerBody"
            }
          }
        ],
        "tags": [
          "TriggerService"
        ]
      },
      "patch": {
        "operationId": "PatchTrigger",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineTrigger"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TriggerServicePatchTriggerBody"
            }
          }
        ],
        "tags": [
          "TriggerService"
        ]
      }
    },
    "/trigger/{trigger_id}/job": {
      "get": {
        "operationId": "SearchTriggerJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineListTriggerJob"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "trigger_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "created_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "created_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "started_at.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "started_at.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "duration.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "duration.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "idle",
                "active",
                "done",
                "error"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "TriggerService"
        ]
      },
      "post": {
        "operationId": "CreateTriggerJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineTriggerJob"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "trigger_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TriggerServiceCreateTriggerJobBody"
            }
          }
        ],
        "tags": [
          "TriggerService"
        ]
      }
    },
    "/user": {
      "get": {
        "operationId": "ReadUser2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReadUserResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "partial output",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/user/device/config/{type}": {
      "get": {
        "operationId": "DefaultDeviceConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineDefaultDeviceConfigResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserHelperService"
        ]
      }
    },
    "/user/settings/{key}": {
      "get": {
        "summary": "GET /user/settings/{key=*}",
        "operationId": "GetUserSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserSetting"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          }
        ],
        "tags": [
          "UserSettings"
        ]
      },
      "put": {
        "summary": "Create -or- Update",
        "description": "PUT /user/settings/{key=*}\nContent-Type: application/json; charset=utf-8\n\n${value=.body}",
        "operationId": "SetUserSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserSetting"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "value",
            "in": "body",
            "required": true,
            "schema": {}
          }
        ],
        "tags": [
          "UserSettings"
        ]
      }
    },
    "/user/widget/activity/today": {
      "get": {
        "operationId": "ActivityWorkspaceWidget",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/engineActivityWorkspaceWidgetResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "UserHelperService"
        ]
      }
    },
    "/userinfo": {
      "get": {
        "summary": "The UserInfo Endpoint is an OAuth 2.0 Protected Resource that returns Claims about the authenticated End-User.",
        "operationId": "UserInfo2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserinfo"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "access_token",
            "description": "string id_token = 2;",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ]
      },
      "post": {
        "summary": "The UserInfo Endpoint is an OAuth 2.0 Protected Resource that returns Claims about the authenticated End-User.",
        "operationId": "UserInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserinfo"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "access_token",
            "description": "string id_token = 2;",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Auth"
        ]
      }
    },
    "/users": {
      "get": {
        "operationId": "SearchUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSearchUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "----- Base Filters ---------------------------\n\nfilter: .id = any({id}...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "not_id",
            "description": "filter: .id \u003c\u003e all({not_ids}...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "----- User-specific Filters ------------------\n\nfilter: (.name|.username|.extension|.status) ILIKE '{q}'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "filter: .name ILIKE '{name}'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "filter: .status ILIKE '{status}'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "username",
            "description": "filter: .username ILIKE '{username}'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "extension",
            "description": "filter: .extension LIKE '{extension}'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "any",
            "description": "----- View Modes -----------------------------\nNOTE: by default, search NOT 'deleted' objects ONLY\n\nfilter: include 'deleted' ALSO ! (inactive)",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "deleted",
            "description": "filter: .deleted_at NOTNULL (view: RECYCLE)",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "presence.status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "presence.note",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "// navigation filter\nrepeated int64 roles = 7;\n----- Search Options -------------------------\n\nselect: output (fields,...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "select: order by (fields,...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "description": "select: offset {page}",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "select: limit {size}",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "operationId": "DeleteUsers2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "selection",
            "description": "MANY /users .ids=[id,...]",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "description": "ONE /users/{id}",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "permanent",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "post": {
        "operationId": "CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCreateUserResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateUserRequest"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/search": {
      "post": {
        "operationId": "SearchUsers2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSearchUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSearchUsersRequest"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "ReadUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReadUserResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "description": "partial output",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "operationId": "DeleteUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDeleteUsersResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ONE /users/{id}",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "selection",
            "description": "MANY /users .ids=[id,...]",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "permanent",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}/logout": {
      "post": {
        "operationId": "LogoutUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiLogoutUserResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UsersLogoutUserBody"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{publish.id}/presence": {
      "patch": {
        "summary": "set(presence) (notify, error)",
        "description": "(UserPresence) {",
        "operationId": "SetStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPresenceStatus"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "publish.id",
            "description": "[required] user identity",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PresenceSetStatusBody"
            }
          }
        ],
        "tags": [
          "Presence"
        ]
      }
    },
    "/users/{token.user.id}/tokens": {
      "post": {
        "operationId": "AddUserAccessToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserAccessToken"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "token.user.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "token",
            "description": "processing\n------------\ntoken.user.id // [required] authorization\ntoken.usage   // [optional] short description",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "title": "tokenKey::token_key"
                },
                "token": {
                  "type": "string",
                  "title": "tokenString::access_token"
                },
                "usage": {
                  "type": "string",
                  "title": "[optional] short usage description"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "title": "display name"
                    }
                  },
                  "title": "[optional] output depends on API endpoint"
                },
                "created_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix::ms"
                },
                "created_by": {
                  "$ref": "#/definitions/apiObjectId"
                },
                "updated_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix::ms"
                },
                "updated_by": {
                  "$ref": "#/definitions/apiObjectId"
                },
                "deleted_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "[optional] disabled at"
                },
                "deleted_by": {
                  "$ref": "#/definitions/apiObjectId",
                  "title": "[optional] disabled by"
                }
              },
              "title": "processing\n------------\ntoken.user.id // [required] authorization\ntoken.usage   // [optional] short description"
            }
          },
          {
            "name": "enable",
            "description": "ObjectId user = 1; // [required]\n string usage = 2;  // [optional] usage description\n bool enable = 3;",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "UserAccessTokens"
        ]
      }
    },
    "/users/{update.user.id}/tokens/{update.id}": {
      "put": {
        "operationId": "UpdateUserAccessToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserAccessToken"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "update.user.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "update.id",
            "description": "tokenKey::token_key",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "update",
            "description": "[required] identification + modifications(about)",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "title": "tokenString::access_token"
                },
                "usage": {
                  "type": "string",
                  "title": "[optional] short usage description"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "title": "display name"
                    }
                  },
                  "title": "[optional] output depends on API endpoint"
                },
                "created_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix::ms"
                },
                "created_by": {
                  "$ref": "#/definitions/apiObjectId"
                },
                "updated_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix::ms"
                },
                "updated_by": {
                  "$ref": "#/definitions/apiObjectId"
                },
                "deleted_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "[optional] disabled at"
                },
                "deleted_by": {
                  "$ref": "#/definitions/apiObjectId",
                  "title": "[optional] disabled by"
                }
              },
              "title": "[required] identification + modifications(about)"
            }
          },
          {
            "name": "fields",
            "description": "[optional] PATCH implementation",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "enable",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "UserAccessTokens"
        ]
      },
      "patch": {
        "operationId": "UpdateUserAccessToken2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserAccessToken"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "update.user.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "update.id",
            "description": "tokenKey::token_key",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "update",
            "description": "[required] identification + modifications(about)",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "title": "tokenString::access_token"
                },
                "usage": {
                  "type": "string",
                  "title": "[optional] short usage description"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "title": "display name"
                    }
                  },
                  "title": "[optional] output depends on API endpoint"
                },
                "created_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix::ms"
                },
                "created_by": {
                  "$ref": "#/definitions/apiObjectId"
                },
                "updated_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix::ms"
                },
                "updated_by": {
                  "$ref": "#/definitions/apiObjectId"
                },
                "deleted_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "[optional] disabled at"
                },
                "deleted_by": {
                  "$ref": "#/definitions/apiObjectId",
                  "title": "[optional] disabled by"
                }
              },
              "title": "[required] identification + modifications(about)"
            }
          },
          {
            "name": "fields",
            "description": "[optional] PATCH implementation",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "enable",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "UserAccessTokens"
        ]
      }
    },
    "/users/{user.id}": {
      "put": {
        "operationId": "UpdateUser",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "user.id",
            "description": "Object ID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user",
            "description": "body: modifications/changes",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "title": "Caller-ID-Name: Display Name"
                },
                "email": {
                  "type": "string"
                },
                "username": {
                  "type": "string",
                  "title": "alphanumeric username (login)"
                },
                "password": {
                  "type": "string"
                },
                "extension": {
                  "type": "string",
                  "title": "Caller-ID-Number:"
                },
                "presence": {
                  "$ref": "#/definitions/apiUserPresence",
                  "description": "string presence = 7; // unique set of \u003cuser\u003e presentity \u003cstatus:basic\u003e tuples open[ed]\n string status = 8; // short display status (short description)",
                  "title": "CallerId caller = 5; // extension\nPresenceStatus presence = 8;"
                },
                "device": {
                  "$ref": "#/definitions/apiObjectId",
                  "title": "[optional] default device assigned ? WebRTC register ?"
                },
                "devices": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/apiObjectId"
                  },
                  "description": "[editable] list of unique `regular` devices, attached to this user",
                  "title": "map\u003cint64, string\u003e devices = 13;"
                },
                "hotdesks": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/apiObjectId"
                  },
                  "title": "[readonly] list of unique `hotdesk` devices, assigned to this user"
                },
                "profile": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "list of variables, assigned to this user as an environment unit"
                },
                "permissions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/apiPermission"
                  },
                  "title": "set of operational permission grants"
                },
                "license": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/apiLicenseUser"
                  },
                  "title": "list of unique licenses, granted to this user"
                },
                "roles": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/apiObjectId"
                  },
                  "title": "roles, member of which is this user"
                },
                "totp_url": {
                  "type": "string",
                  "title": "[readonly][optional] one time password if setting (2fa) is enabled"
                },
                "contact": {
                  "$ref": "#/definitions/apiObjectId",
                  "description": "[optional] contact connected to this user",
                  "title": "repeated Call calls = 13; // order by created_at\nrepeated Registration reged = 13; // order by register_last"
                },
                "created_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "created_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                },
                "updated_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "updated_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                },
                "deleted_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "deleted_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                },
                "chat_name": {
                  "type": "string",
                  "description": "The \"chat_name\" field is used to store the name displayed externally on the platform.\nFor example, \"chat_name\" is shown when an agent connects to chats with clients."
                }
              },
              "title": "body: modifications/changes"
            }
          },
          {
            "name": "fields",
            "description": "PATCH: partial update",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "operationId": "UpdateUser2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "user.id",
            "description": "Object ID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user",
            "description": "body: modifications/changes",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "title": "Caller-ID-Name: Display Name"
                },
                "email": {
                  "type": "string"
                },
                "username": {
                  "type": "string",
                  "title": "alphanumeric username (login)"
                },
                "password": {
                  "type": "string"
                },
                "extension": {
                  "type": "string",
                  "title": "Caller-ID-Number:"
                },
                "presence": {
                  "$ref": "#/definitions/apiUserPresence",
                  "description": "string presence = 7; // unique set of \u003cuser\u003e presentity \u003cstatus:basic\u003e tuples open[ed]\n string status = 8; // short display status (short description)",
                  "title": "CallerId caller = 5; // extension\nPresenceStatus presence = 8;"
                },
                "device": {
                  "$ref": "#/definitions/apiObjectId",
                  "title": "[optional] default device assigned ? WebRTC register ?"
                },
                "devices": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/apiObjectId"
                  },
                  "description": "[editable] list of unique `regular` devices, attached to this user",
                  "title": "map\u003cint64, string\u003e devices = 13;"
                },
                "hotdesks": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/apiObjectId"
                  },
                  "title": "[readonly] list of unique `hotdesk` devices, assigned to this user"
                },
                "profile": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "list of variables, assigned to this user as an environment unit"
                },
                "permissions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/apiPermission"
                  },
                  "title": "set of operational permission grants"
                },
                "license": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/apiLicenseUser"
                  },
                  "title": "list of unique licenses, granted to this user"
                },
                "roles": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/apiObjectId"
                  },
                  "title": "roles, member of which is this user"
                },
                "totp_url": {
                  "type": "string",
                  "title": "[readonly][optional] one time password if setting (2fa) is enabled"
                },
                "contact": {
                  "$ref": "#/definitions/apiObjectId",
                  "description": "[optional] contact connected to this user",
                  "title": "repeated Call calls = 13; // order by created_at\nrepeated Registration reged = 13; // order by register_last"
                },
                "created_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "created_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                },
                "updated_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "updated_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                },
                "deleted_at": {
                  "type": "string",
                  "format": "int64",
                  "title": "unix"
                },
                "deleted_by": {
                  "$ref": "#/definitions/apiUserId",
                  "title": "user"
                },
                "chat_name": {
                  "type": "string",
                  "description": "The \"chat_name\" field is used to store the name displayed externally on the platform.\nFor example, \"chat_name\" is shown when an agent connects to chats with clients."
                }
              },
              "title": "body: modifications/changes"
            }
          },
          {
            "name": "fields",
            "description": "PATCH: partial update",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{user.id}/tokens": {
      "get": {
        "operationId": "ListUserAccessToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserAccessTokenList"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "user.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "user.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "description": "int32 page = 2;\nint64 size = 3;\n\n.usage ILIKE :q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "----- Search Options -------------------------\n\nselect: output (fields,...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "select: order by (fields,...)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "page",
            "description": "select: offset {page}",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "description": "select: limit {size}",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "UserAccessTokens"
        ]
      }
    },
    "/users/{user.id}/tokens/{id}": {
      "get": {
        "operationId": "GetUserAccessToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserAccessToken"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "user.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "description": "tokenKey::uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserAccessTokens"
        ]
      },
      "delete": {
        "operationId": "DeleteUserAccessToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserAccessToken"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "user.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "description": "tokenKey::uuid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user.name",
            "description": "display name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserAccessTokens"
        ]
      }
    },
    "/users/{user_id}/2fa": {
      "get": {
        "summary": "GetUserTfaKey locates the secret for user and returns it as a TOTP url",
        "operationId": "GetUserTfaKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetUserTfaKeyResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "TwoFactorAuthentication"
        ]
      },
      "post": {
        "summary": "GenerateUserTfaKey generates new or regenerates secret for the concrete user",
        "operationId": "GenerateUserTfaKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGenerateUserTfaKeyResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "TwoFactorAuthentication"
        ]
      }
    },
    "/wfm/agents/absences": {
      "get": {
        "summary": "Searches absences by filters.",
        "operationId": "SearchAgentsAbsences",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmSearchAgentsAbsencesResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "q",
            "description": "Searches by agent name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filters",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "AgentAbsenceService"
        ]
      },
      "post": {
        "summary": "Creates absences for multiple specified agents.",
        "operationId": "CreateAgentsAbsences",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmCreateAgentsAbsencesResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/wfmCreateAgentsAbsencesRequest"
            }
          }
        ],
        "tags": [
          "AgentAbsenceService"
        ]
      }
    },
    "/wfm/agents/working_schedules/{working_schedule_id}": {
      "get": {
        "operationId": "SearchAgentsWorkingSchedule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmSearchAgentsWorkingScheduleResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "working_schedule_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "date.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "date.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "supervisor_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "team_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "skill_id",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AgentWorkingScheduleService"
        ]
      },
      "post": {
        "operationId": "CreateAgentsWorkingScheduleShifts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmCreateAgentsWorkingScheduleShiftsResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "working_schedule_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentWorkingScheduleServiceCreateAgentsWorkingScheduleShiftsBody"
            }
          }
        ],
        "tags": [
          "AgentWorkingScheduleService"
        ]
      }
    },
    "/wfm/agents/{agent_id}/absences": {
      "get": {
        "summary": "Searches agent absences by filters.",
        "operationId": "SearchAgentAbsence",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmSearchAgentAbsenceResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filters",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "AgentAbsenceService"
        ]
      },
      "post": {
        "summary": "Creates one-day-absence for one agent.",
        "operationId": "CreateAgentAbsence",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmCreateAgentAbsenceResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentAbsenceServiceCreateAgentAbsenceBody"
            }
          }
        ],
        "tags": [
          "AgentAbsenceService"
        ]
      }
    },
    "/wfm/agents/{agent_id}/absences/{id}": {
      "get": {
        "summary": "Reads one absence per agent by its id.",
        "operationId": "ReadAgentAbsence",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmReadAgentAbsenceResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AgentAbsenceService"
        ]
      },
      "delete": {
        "summary": "Deletes agent concrete absence by its id.",
        "operationId": "DeleteAgentAbsence",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmDeleteAgentAbsenceResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AgentAbsenceService"
        ]
      }
    },
    "/wfm/agents/{agent_id}/absences/{item.id}": {
      "put": {
        "summary": "Updates agent concrete absence by its id.",
        "operationId": "UpdateAgentAbsence",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmUpdateAgentAbsenceResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "item.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentAbsenceServiceUpdateAgentAbsenceBody"
            }
          }
        ],
        "tags": [
          "AgentAbsenceService"
        ]
      }
    },
    "/wfm/agents/{agent_id}/conditions": {
      "get": {
        "operationId": "ReadAgentWorkingConditions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmReadAgentWorkingConditionsResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "AgentWorkingConditionsService"
        ]
      },
      "put": {
        "operationId": "UpdateAgentWorkingConditions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmUpdateAgentWorkingConditionsResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AgentWorkingConditionsServiceUpdateAgentWorkingConditionsBody"
            }
          }
        ],
        "tags": [
          "AgentWorkingConditionsService"
        ]
      }
    },
    "/wfm/lookups/forecast_calculation": {
      "get": {
        "operationId": "SearchForecastCalculation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmSearchForecastCalculationResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ForecastCalculationService"
        ]
      },
      "post": {
        "operationId": "CreateForecastCalculation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmCreateForecastCalculationResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/wfmCreateForecastCalculationRequest"
            }
          }
        ],
        "tags": [
          "ForecastCalculationService"
        ]
      }
    },
    "/wfm/lookups/forecast_calculation/{id}": {
      "get": {
        "operationId": "ReadForecastCalculation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmReadForecastCalculationResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ForecastCalculationService"
        ]
      },
      "delete": {
        "operationId": "DeleteForecastCalculation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmDeleteForecastCalculationResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ForecastCalculationService"
        ]
      }
    },
    "/wfm/lookups/forecast_calculation/{id}/execute": {
      "get": {
        "operationId": "ExecuteForecastCalculation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmExecuteForecastCalculationResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "team_id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "forecast_data.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "forecast_data.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ForecastCalculationService"
        ]
      }
    },
    "/wfm/lookups/forecast_calculation/{item.id}": {
      "put": {
        "operationId": "UpdateForecastCalculation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmUpdateForecastCalculationResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "item.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ForecastCalculationServiceUpdateForecastCalculationBody"
            }
          }
        ],
        "tags": [
          "ForecastCalculationService"
        ]
      }
    },
    "/wfm/lookups/pause_templates": {
      "get": {
        "operationId": "SearchPauseTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmSearchPauseTemplateResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PauseTemplateService"
        ]
      },
      "post": {
        "operationId": "CreatePauseTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmCreatePauseTemplateResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/wfmCreatePauseTemplateRequest"
            }
          }
        ],
        "tags": [
          "PauseTemplateService"
        ]
      }
    },
    "/wfm/lookups/pause_templates/{id}": {
      "get": {
        "operationId": "ReadPauseTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmReadPauseTemplateResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PauseTemplateService"
        ]
      },
      "delete": {
        "operationId": "DeletePauseTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmDeletePauseTemplateResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "PauseTemplateService"
        ]
      }
    },
    "/wfm/lookups/pause_templates/{item.id}": {
      "put": {
        "summary": "UpdatePauseTemplateCauseBulk updates a pause template with a list of causes.\nUpdate existing cause, create that not exists in database and delete that not exists in the list.",
        "operationId": "UpdatePauseTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmUpdatePauseTemplateResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "item.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PauseTemplateServiceUpdatePauseTemplateBody"
            }
          }
        ],
        "tags": [
          "PauseTemplateService"
        ]
      }
    },
    "/wfm/lookups/shift_templates": {
      "get": {
        "operationId": "SearchShiftTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmSearchShiftTemplateResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ShiftTemplateService"
        ]
      },
      "post": {
        "operationId": "CreateShiftTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmCreateShiftTemplateResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/wfmCreateShiftTemplateRequest"
            }
          }
        ],
        "tags": [
          "ShiftTemplateService"
        ]
      }
    },
    "/wfm/lookups/shift_templates/{id}": {
      "get": {
        "operationId": "ReadShiftTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmReadShiftTemplateResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ShiftTemplateService"
        ]
      },
      "delete": {
        "operationId": "DeleteShiftTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmDeleteShiftTemplateResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ShiftTemplateService"
        ]
      }
    },
    "/wfm/lookups/shift_templates/{item.id}": {
      "put": {
        "summary": "UpdateShiftTemplate updates a shift template with a list times.\nUpdate existing time, create that not exists in database and delete that not exists in the list.",
        "operationId": "UpdateShiftTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmUpdateShiftTemplateResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "item.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShiftTemplateServiceUpdateShiftTemplateBody"
            }
          }
        ],
        "tags": [
          "ShiftTemplateService"
        ]
      }
    },
    "/wfm/lookups/working_conditions": {
      "get": {
        "operationId": "SearchWorkingCondition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmSearchWorkingConditionResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "WorkingConditionService"
        ]
      },
      "post": {
        "operationId": "CreateWorkingCondition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmCreateWorkingConditionResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/wfmCreateWorkingConditionRequest"
            }
          }
        ],
        "tags": [
          "WorkingConditionService"
        ]
      }
    },
    "/wfm/lookups/working_conditions/{id}": {
      "get": {
        "operationId": "ReadWorkingCondition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmReadWorkingConditionResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "WorkingConditionService"
        ]
      },
      "delete": {
        "operationId": "DeleteWorkingCondition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmDeleteWorkingConditionResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "WorkingConditionService"
        ]
      }
    },
    "/wfm/lookups/working_conditions/{item.id}": {
      "put": {
        "operationId": "UpdateWorkingCondition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmUpdateWorkingConditionResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "item.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkingConditionServiceUpdateWorkingConditionBody"
            }
          }
        ],
        "tags": [
          "WorkingConditionService"
        ]
      }
    },
    "/wfm/lookups/working_schedules": {
      "get": {
        "operationId": "SearchWorkingSchedule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmSearchWorkingScheduleResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "WorkingScheduleService"
        ]
      },
      "post": {
        "operationId": "CreateWorkingSchedule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmCreateWorkingScheduleResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/wfmCreateWorkingScheduleRequest"
            }
          }
        ],
        "tags": [
          "WorkingScheduleService"
        ]
      }
    },
    "/wfm/lookups/working_schedules/{id}": {
      "get": {
        "operationId": "ReadWorkingSchedule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmReadWorkingScheduleResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "WorkingScheduleService"
        ]
      },
      "delete": {
        "operationId": "DeleteWorkingSchedule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmDeleteWorkingScheduleResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "WorkingScheduleService"
        ]
      }
    },
    "/wfm/lookups/working_schedules/{id}/agents": {
      "post": {
        "operationId": "UpdateWorkingScheduleAddAgents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmUpdateWorkingScheduleAddAgentsResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkingScheduleServiceUpdateWorkingScheduleAddAgentsBody"
            }
          }
        ],
        "tags": [
          "WorkingScheduleService"
        ]
      }
    },
    "/wfm/lookups/working_schedules/{id}/agents/{agent_id}": {
      "delete": {
        "operationId": "UpdateWorkingScheduleRemoveAgent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmUpdateWorkingScheduleRemoveAgentResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "WorkingScheduleService"
        ]
      }
    },
    "/wfm/lookups/working_schedules/{id}/forecast": {
      "get": {
        "operationId": "ReadWorkingScheduleForecast",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmReadWorkingScheduleForecastResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "date.from",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "date.to",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "WorkingScheduleService"
        ]
      }
    },
    "/wfm/lookups/working_schedules/{item.id}": {
      "put": {
        "operationId": "UpdateWorkingSchedule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/wfmUpdateWorkingScheduleResponse"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "item.id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkingScheduleServiceUpdateWorkingScheduleBody"
            }
          }
        ],
        "tags": [
          "WorkingScheduleService"
        ]
      }
    },
    "/{object.name}/{object.id}/acl": {
      "get": {
        "operationId": "ListObjectAccess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListAccessResponseV1"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "object.name",
            "description": "display name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "object.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "grantor",
            "description": "--- filters ---\n\n[optional] [FROM] each rule owner is any of role(s) id; user -or- role",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "grantee",
            "description": "[optional] [TO] subject role(s) id; user -or- role",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "granted",
            "description": "[xrwdxrwd] [R]ecord-[b]ased-[A]ccess-[C]ontrol level check(!)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "q",
            "description": "[optional] [TO] subject.name ILIKE ?q=; user -or- role",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "description": "----- Select Options -------------------------\n\nattributes list",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "description": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "size",
            "description": "pagedResultsControl\n\ndefault: 16",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "default: 1",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "AccessStore"
        ]
      },
      "patch": {
        "summary": "TODO: replace with GrantAccess API, to become command like GRANT REVOKE ... with empty access rights string",
        "operationId": "ToggleObjectAccess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUpdateAccessResponseV1"
            }
          },
          "400": {
            "description": "Bad Request - Invalid request arguments",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "404": {
            "description": "Not Found - Resource does not exist",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "409": {
            "description": "Conflict - Resource already exists or conflict detected",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/generalError"
            }
          }
        },
        "parameters": [
          {
            "name": "object.name",
            "description": "display name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "object.id",
            "description": "identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "list",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/apiGrantAccessRequestV1"
              }
            }
          }
        ],
        "tags": [
          "AccessStore"
        ]
      }
    }
  },
  "definitions": {
    "AccessGrant": {
      "type": "object",
      "properties": {
        "grantor": {
          "$ref": "#/definitions/apiRoleId",
          "title": "NEED to be rechecked !!!"
        },
        "grantee": {
          "$ref": "#/definitions/apiRoleId",
          "title": "NEED to be rechecked !!!"
        },
        "privileges": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "[\"SEARCH\",\"MODIFY\",\"DELETE\",\"CREATE\"]"
        },
        "grantable": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "[\"SEARCH\",\"MODIFY\",\"DELETE\",\"CREATE\"]"
        }
      }
    },
    "AccessStoreToggleDefaultAccessBody": {
      "type": "object",
      "properties": {
        "object": {
          "type": "object",
          "title": "[ON] objclass (either: by entity .id -or- class .name)"
        },
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiGrantAccessRequestV1"
          },
          "description": "list of changes ...\n\n[TO] (GRANT/REVOKE)"
        }
      }
    },
    "AgentAbsenceServiceCreateAgentAbsenceBody": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmAbsence"
        }
      }
    },
    "AgentAbsenceServiceUpdateAgentAbsenceBody": {
      "type": "object",
      "properties": {
        "item": {
          "type": "object",
          "properties": {
            "domain_id": {
              "type": "string",
              "format": "int64"
            },
            "created_at": {
              "type": "string",
              "format": "int64"
            },
            "created_by": {
              "$ref": "#/definitions/wfmLookupEntity"
            },
            "updated_at": {
              "type": "string",
              "format": "int64"
            },
            "updated_by": {
              "$ref": "#/definitions/wfmLookupEntity"
            },
            "type_id": {
              "$ref": "#/definitions/wfmAbsenceType"
            },
            "absent_at": {
              "type": "string",
              "format": "int64"
            }
          }
        }
      }
    },
    "AgentInQueueAgentsInQueue": {
      "type": "object",
      "properties": {
        "online": {
          "type": "integer",
          "format": "int64"
        },
        "pause": {
          "type": "integer",
          "format": "int64"
        },
        "offline": {
          "type": "integer",
          "format": "int64"
        },
        "free": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "allow_pause": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AgentInQueueStatisticsAgentInQueueStatisticsItem": {
      "type": "object",
      "properties": {
        "bucket": {
          "$ref": "#/definitions/engineLookup"
        },
        "skill": {
          "$ref": "#/definitions/engineLookup"
        },
        "member_waiting": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AgentPauseCauseServicePatchAgentPauseCauseBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "limit_min": {
          "type": "integer",
          "format": "int64"
        },
        "allow_supervisor": {
          "type": "boolean"
        },
        "allow_agent": {
          "type": "boolean"
        },
        "allow_admin": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "AgentPauseCauseServiceUpdateAgentPauseCauseBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "limit_min": {
          "type": "integer",
          "format": "int64"
        },
        "allow_supervisor": {
          "type": "boolean"
        },
        "allow_agent": {
          "type": "boolean"
        },
        "allow_admin": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "AgentServiceAgentSetStateBody": {
      "type": "object"
    },
    "AgentServicePatchAgentBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user": {
          "$ref": "#/definitions/engineLookup"
        },
        "description": {
          "type": "string"
        },
        "progressive_count": {
          "type": "integer",
          "format": "int32"
        },
        "greeting_media": {
          "$ref": "#/definitions/engineLookup"
        },
        "allow_channels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "chat_count": {
          "type": "integer",
          "format": "int64"
        },
        "supervisor": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "team": {
          "$ref": "#/definitions/engineLookup"
        },
        "region": {
          "$ref": "#/definitions/engineLookup"
        },
        "auditor": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "is_supervisor": {
          "type": "boolean"
        }
      }
    },
    "AgentServiceUpdateAgentBody": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/engineLookup"
        },
        "description": {
          "type": "string"
        },
        "progressive_count": {
          "type": "integer",
          "format": "int32"
        },
        "greeting_media": {
          "$ref": "#/definitions/engineLookup"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "allow_channels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "chat_count": {
          "type": "integer",
          "format": "int64"
        },
        "supervisor": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "team": {
          "$ref": "#/definitions/engineLookup"
        },
        "region": {
          "$ref": "#/definitions/engineLookup"
        },
        "auditor": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "is_supervisor": {
          "type": "boolean"
        },
        "task_count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AgentServiceUpdateAgentStatusBody": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "title": "FIXME enumerate"
        },
        "on_demand": {
          "type": "boolean"
        },
        "channels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "payload": {
          "type": "string"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "AgentSkillServiceCreateAgentSkillBody": {
      "type": "object",
      "properties": {
        "skill": {
          "$ref": "#/definitions/engineLookup"
        },
        "capacity": {
          "type": "integer",
          "format": "int32"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "AgentSkillServiceCreateAgentSkillsBody": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineCreateAgentSkillBulkItem"
          }
        }
      }
    },
    "AgentSkillServicePatchAgentSkillBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "skill": {
          "$ref": "#/definitions/engineLookup"
        },
        "capacity": {
          "type": "integer",
          "format": "int32"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "AgentSkillServicePatchAgentSkillsBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "skill_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "capacity": {
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "AgentSkillServiceUpdateAgentSkillBody": {
      "type": "object",
      "properties": {
        "skill": {
          "$ref": "#/definitions/engineLookup"
        },
        "capacity": {
          "type": "integer",
          "format": "int32"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "AgentTeamServiceUpdateAgentTeamBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "strategy": {
          "type": "string"
        },
        "max_no_answer": {
          "type": "integer",
          "format": "int32"
        },
        "no_answer_delay_time": {
          "type": "integer",
          "format": "int32"
        },
        "wrap_up_time": {
          "type": "integer",
          "format": "int32"
        },
        "call_timeout": {
          "type": "integer",
          "format": "int32"
        },
        "admin": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "invite_chat_timeout": {
          "type": "integer",
          "format": "int32"
        },
        "task_accept_timeout": {
          "type": "integer",
          "format": "int32"
        },
        "forecast_calculation": {
          "$ref": "#/definitions/engineLookup"
        }
      }
    },
    "AgentWorkingConditionsServiceUpdateAgentWorkingConditionsBody": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmAgentWorkingConditions"
        }
      }
    },
    "AgentWorkingScheduleServiceCreateAgentsWorkingScheduleShiftsBody": {
      "type": "object",
      "properties": {
        "date": {
          "$ref": "#/definitions/wfmFilterBetween"
        },
        "agents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmLookupEntity"
          }
        },
        "items": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/wfmAgentScheduleShift"
          },
          "description": "Map key is a day of week: 0 - Sunday, ..., 6 - Saturday."
        }
      }
    },
    "AuditFormServicePatchAuditFormBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "questions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineQuestion"
          }
        },
        "teams": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          },
          "title": "bool archive = 8;"
        }
      }
    },
    "AuditFormServiceUpdateAuditFormBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "questions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineQuestion"
          }
        },
        "teams": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          },
          "title": "bool archive = 7;"
        }
      }
    },
    "AuditFormServiceUpdateAuditRateBody": {
      "type": "object",
      "properties": {
        "answers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineUpdateQuestionAnswerRequest"
          }
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "BackendProfileServicePatchBackendProfileBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "expire_days": {
          "type": "integer",
          "format": "int32"
        },
        "max_size": {
          "type": "string",
          "format": "int64"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "BackendProfileServiceUpdateBackendProfileBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "expire_days": {
          "type": "integer",
          "format": "int32"
        },
        "max_size": {
          "type": "string",
          "format": "int64"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "BucketServiceUpdateBucketBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "CalendarServiceUpdateCalendarBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "start_at": {
          "type": "string",
          "format": "int64"
        },
        "end_at": {
          "type": "string",
          "format": "int64"
        },
        "timezone": {
          "$ref": "#/definitions/engineLookup"
        },
        "description": {
          "type": "string"
        },
        "accepts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAcceptOfDay"
          }
        },
        "excepts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineExceptDate"
          }
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "specials": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAcceptOfDay"
          }
        }
      }
    },
    "CallServiceBlindTransferCallBody": {
      "type": "object",
      "properties": {
        "app_id": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "CallServiceCreateCallAnnotationBody": {
      "type": "object",
      "properties": {
        "note": {
          "type": "string"
        },
        "start_sec": {
          "type": "integer",
          "format": "int32"
        },
        "end_sec": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CallServiceDtmfCallBody": {
      "type": "object",
      "properties": {
        "app_id": {
          "type": "string"
        },
        "digit": {
          "type": "string"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "CallServiceEavesdropCallBody": {
      "type": "object",
      "properties": {
        "app_id": {
          "type": "string"
        },
        "control": {
          "type": "boolean"
        },
        "listen_a": {
          "type": "boolean"
        },
        "listen_b": {
          "type": "boolean"
        },
        "whisper_a": {
          "type": "boolean"
        },
        "whisper_b": {
          "type": "boolean"
        },
        "from": {
          "$ref": "#/definitions/engineEavesdropCallRequestEndpointRequest"
        }
      }
    },
    "CallServiceHangupCallBody": {
      "type": "object",
      "properties": {
        "cause": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "CallServiceHoldCallBody": {
      "type": "object",
      "properties": {
        "app_id": {
          "type": "string"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "CallServicePatchHistoryCallBody": {
      "type": "object",
      "properties": {
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "hide_missed": {
          "type": "boolean"
        }
      }
    },
    "CallServiceRedialCallBody": {
      "type": "object"
    },
    "CallServiceSetVariablesCallBody": {
      "type": "object",
      "properties": {
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "CallServiceUnHoldCallBody": {
      "type": "object",
      "properties": {
        "app_id": {
          "type": "string"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "CallServiceUpdateCallAnnotationBody": {
      "type": "object",
      "properties": {
        "note": {
          "type": "string"
        },
        "start_sec": {
          "type": "integer",
          "format": "int32"
        },
        "end_sec": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ClassesUpdateClassBody": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string",
          "title": "TO BE REMOVED // bound to session.domain.id"
        },
        "class": {
          "type": "object",
          "properties": {
            "class": {
              "type": "string",
              "title": "(class::object).name"
            },
            "abac": {
              "type": "boolean",
              "title": "[a]ttribute-[b]ased [a]ccess [c]ontrol"
            },
            "obac": {
              "type": "boolean",
              "title": "[o]peration-[b]ased [a]ccess [c]ontrol (from::collection.dal)"
            },
            "rbac": {
              "type": "boolean",
              "title": "[r]ecord-[b]ased [a]ccess [c]ontrol (from::resource.acl)"
            }
          }
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "PATCH: partial update"
        }
      }
    },
    "CognitiveProfileServicePatchCognitiveProfileBody": {
      "type": "object",
      "properties": {
        "provider": {
          "$ref": "#/definitions/storageProviderType"
        },
        "properties": {},
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/storageServiceType"
        },
        "default": {
          "type": "boolean"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CognitiveProfileServiceUpdateCognitiveProfileBody": {
      "type": "object",
      "properties": {
        "provider": {
          "$ref": "#/definitions/storageProviderType"
        },
        "properties": {},
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/storageServiceType"
        },
        "default": {
          "type": "boolean"
        }
      }
    },
    "CommentFormat": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Offset text runes count."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "Length text runes count."
        },
        "link": {
          "$ref": "#/definitions/FormatLink"
        },
        "bold": {
          "$ref": "#/definitions/FormatBold"
        },
        "italic": {
          "$ref": "#/definitions/FormatItalic"
        },
        "underline": {
          "$ref": "#/definitions/FormatUnderline"
        },
        "strikethrough": {
          "$ref": "#/definitions/FormatStrikethrough"
        },
        "monospace": {
          "$ref": "#/definitions/FormatMonospace"
        },
        "codeblock": {
          "$ref": "#/definitions/FormatCodeblock"
        }
      }
    },
    "CommunicationTypeServicePatchCommunicationTypeBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "channel": {
          "$ref": "#/definitions/engineCommunicationChannels"
        },
        "default": {
          "type": "boolean"
        }
      }
    },
    "CommunicationTypeServiceUpdateCommunicationTypeBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "channel": {
          "$ref": "#/definitions/engineCommunicationChannels"
        },
        "description": {
          "type": "string"
        },
        "default": {
          "type": "boolean"
        }
      }
    },
    "ConfigServicePatchConfigBody": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "days_to_store": {
          "type": "integer",
          "format": "int32"
        },
        "period": {
          "type": "integer",
          "format": "int32"
        },
        "storage": {
          "$ref": "#/definitions/loggerLookup"
        },
        "description": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ConfigServiceUpdateConfigBody": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "days_to_store": {
          "type": "integer",
          "format": "int32"
        },
        "period": {
          "type": "integer",
          "format": "int32"
        },
        "storage": {
          "$ref": "#/definitions/loggerLookup"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "CreateAgentsAbsencesRequestabsentType": {
      "type": "object",
      "properties": {
        "type_id": {
          "$ref": "#/definitions/wfmAbsenceType"
        },
        "date_from": {
          "type": "string",
          "format": "int64"
        },
        "date_to": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "CreateCallRequestCallSettings": {
      "type": "object",
      "properties": {
        "timeout": {
          "type": "integer",
          "format": "int32"
        },
        "audio": {
          "type": "boolean"
        },
        "video": {
          "type": "boolean"
        },
        "screen": {
          "type": "boolean"
        },
        "record": {
          "type": "boolean"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "display": {
          "type": "string"
        },
        "disable_stun": {
          "type": "boolean"
        },
        "cancel_distribute": {
          "type": "boolean"
        },
        "is_online": {
          "type": "boolean"
        },
        "disable_auto_answer": {
          "type": "boolean"
        },
        "hide_number": {
          "type": "boolean"
        }
      }
    },
    "DefaultDeviceConfigResponseSipDeviceConfig": {
      "type": "object",
      "properties": {
        "auth": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "extension": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "proxy": {
          "type": "string"
        }
      }
    },
    "DefaultDeviceConfigResponseWebRTCDeviceConfig": {
      "type": "object",
      "properties": {
        "authorization_user": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "extension": {
          "type": "string"
        },
        "ha1": {
          "type": "string"
        },
        "realm": {
          "type": "string"
        },
        "server": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "DistributeAttemptResponseCancel": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "next_distribute_sec": {
          "type": "integer",
          "format": "int64"
        },
        "stop": {
          "type": "boolean"
        }
      }
    },
    "DistributeAttemptResponseConfirm": {
      "type": "object",
      "properties": {
        "destination": {
          "type": "string"
        },
        "display": {
          "type": "string"
        }
      }
    },
    "DomainsUpdateDomainBody": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "object",
          "properties": {
            "domain": {
              "type": "string",
              "title": "FQDN"
            },
            "organization": {
              "type": "string"
            },
            "country": {
              "type": "string"
            },
            "locality": {
              "type": "string"
            },
            "stateOrProvince": {
              "type": "string"
            },
            "streetAddress": {
              "type": "string"
            },
            "postalCode": {
              "type": "string"
            },
            "postalAddress": {
              "type": "string"
            },
            "telephoneNumber": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "createdAt": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "createdBy": {
              "type": "string",
              "title": "user"
            },
            "updatedAt": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "updatedBy": {
              "type": "string",
              "title": "user"
            }
          }
        }
      },
      "title": "PUT /domain/{domain.dc}"
    },
    "DynamicConditionsCreateConditionBody": {
      "type": "object",
      "properties": {
        "expression": {
          "type": "string",
          "description": "The query or condition expression used to evaluate the group."
        },
        "group": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The ID of the static group that should be assigned if the condition is met."
        },
        "assignee": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The ID of the assignee that should be assigned if the condition is met (optional)."
        }
      },
      "description": "Request message for creating a new condition."
    },
    "EmailProfileParamsOAuth2": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string"
        },
        "client_secret": {
          "type": "string"
        },
        "redirect_url": {
          "type": "string"
        }
      }
    },
    "EmailProfileServicePatchEmailProfileBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "enabled": {
          "type": "boolean"
        },
        "imap_host": {
          "type": "string"
        },
        "login": {
          "type": "string"
        },
        "mailbox": {
          "type": "string"
        },
        "smtp_port": {
          "type": "integer",
          "format": "int32"
        },
        "imap_port": {
          "type": "integer",
          "format": "int32"
        },
        "password": {
          "type": "string"
        },
        "smtp_host": {
          "type": "string"
        },
        "fetch_interval": {
          "type": "integer",
          "format": "int32"
        },
        "listen": {
          "type": "boolean"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EmailProfileServiceUpdateEmailProfileBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "enabled": {
          "type": "boolean"
        },
        "imap_host": {
          "type": "string"
        },
        "login": {
          "type": "string"
        },
        "mailbox": {
          "type": "string"
        },
        "smtp_port": {
          "type": "integer",
          "format": "int32"
        },
        "imap_port": {
          "type": "integer",
          "format": "int32"
        },
        "password": {
          "type": "string"
        },
        "smtp_host": {
          "type": "string"
        },
        "fetch_interval": {
          "type": "integer",
          "format": "int32"
        },
        "auth_type": {
          "$ref": "#/definitions/engineEmailAuthType"
        },
        "listen": {
          "type": "boolean"
        },
        "params": {
          "$ref": "#/definitions/engineEmailProfileParams"
        }
      }
    },
    "FilePoliciesServiceFilePolicyApplyBody": {
      "type": "object"
    },
    "FilePoliciesServiceMovePositionFilePolicyBody": {
      "type": "object"
    },
    "FilePoliciesServicePatchFilePolicyBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "mime_types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "speed_download": {
          "type": "string",
          "format": "int64"
        },
        "speed_upload": {
          "type": "string",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageUploadFileChannel"
          }
        },
        "retention_days": {
          "type": "integer",
          "format": "int32"
        },
        "max_upload_size": {
          "type": "string",
          "format": "int64"
        },
        "encrypt": {
          "type": "boolean"
        }
      }
    },
    "FilePoliciesServiceUpdateFilePolicyBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "mime_types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "speed_download": {
          "type": "string",
          "format": "int64"
        },
        "speed_upload": {
          "type": "string",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageUploadFileChannel"
          }
        },
        "retention_days": {
          "type": "integer",
          "format": "int32"
        },
        "max_upload_size": {
          "type": "string",
          "format": "int64"
        },
        "encrypt": {
          "type": "boolean"
        }
      }
    },
    "ForecastCalculationServiceUpdateForecastCalculationBody": {
      "type": "object",
      "properties": {
        "item": {
          "type": "object",
          "properties": {
            "domain_id": {
              "type": "string",
              "format": "int64"
            },
            "created_at": {
              "type": "string",
              "format": "int64"
            },
            "created_by": {
              "$ref": "#/definitions/wfmLookupEntity"
            },
            "updated_at": {
              "type": "string",
              "format": "int64"
            },
            "updated_by": {
              "$ref": "#/definitions/wfmLookupEntity"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "procedure": {
              "type": "string"
            },
            "args": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "FormatBold": {
      "type": "object"
    },
    "FormatCodeblock": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string"
        }
      }
    },
    "FormatItalic": {
      "type": "object"
    },
    "FormatLink": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "title": "REQUIRED. If text[offset:length] is a regular plaintext, NOT an URL itself !"
        }
      }
    },
    "FormatMonospace": {
      "type": "object"
    },
    "FormatStrikethrough": {
      "type": "object"
    },
    "FormatUnderline": {
      "type": "object"
    },
    "HistoryFileJobHistoryFileJobAction": {
      "type": "string",
      "enum": [
        "undefined",
        "STT",
        "delete"
      ],
      "default": "undefined"
    },
    "HistoryFileJobHistoryFileJobState": {
      "type": "string",
      "enum": [
        "idle",
        "active",
        "finished",
        "error"
      ],
      "default": "idle",
      "title": "- error: TODO"
    },
    "ImportTemplateServicePatchImportTemplateBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "parameters": {
          "type": "object"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Patch import template for CSV",
      "title": "Patch import template request body"
    },
    "ImportTemplateServiceUpdateImportTemplateBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "parameters": {
          "type": "object"
        },
        "source": {
          "$ref": "#/definitions/engineLookup"
        }
      },
      "description": "Update import template for CSV",
      "title": "Update import template request body",
      "required": [
        "name"
      ]
    },
    "LDAPCreateLDAPTemplateBody": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "ID unique"
        },
        "name": {
          "type": "string",
          "title": "Name this template"
        },
        "base_dn": {
          "type": "string",
          "title": "Optional. LDAP Search base entry DN"
        },
        "search": {
          "type": "string",
          "title": "Required. LDAP Search filter string"
        },
        "catalog": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "display name"
            }
          },
          "title": "LDAPCatalog belongs to"
        },
        "enabled": {
          "type": "boolean",
          "title": "Optional. This Template is activated ?"
        },
        "role": {
          "type": "object",
          "title": "OPTIONAL. Role objclass fields mapping (Not implemented yet)"
        },
        "device": {
          "type": "object",
          "title": "OPTIONAL. Device objclass fields mapping"
        },
        "user": {
          "type": "object",
          "title": "OPTIONAL. User objclass fields mapping"
        },
        "agent": {
          "type": "object",
          "title": "OPTIONAL. Agent objclass fields mapping"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "unix",
          "title": "READONLY. Operational attributes"
        },
        "created_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        }
      },
      "title": "LDAPTemplate is an LDAP search entries to webitel objects transformation template"
    },
    "LDAPDeleteLDAPTemplateBody": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "default: 1",
          "title": "----- Select Options -------------------------"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "default: 16"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "attributes list"
        },
        "sort": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "e.g.: \"updated_at\" - ASC; \"!updated_at\" - DESC;"
        },
        "id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "title": "----- Search Basic Filters ---------------------------\nOPTIONAL. Search templates by .id"
        },
        "q": {
          "type": "string",
          "title": "OPTIONAL. Filter(s) SET"
        },
        "name": {
          "type": "string"
        },
        "base_dn": {
          "type": "string"
        },
        "objclass": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        }
      }
    },
    "LDAPLDAPSearchBody": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]",
          "title": "Optional. URL to establish connection to LDAP catalog"
        },
        "tls": {
          "$ref": "#/definitions/apiLDAPSearchRequestTLSConfig"
        },
        "bind": {
          "type": "string",
          "description": "authorization method e.g.: SIMPLE, SAML, NTLM, etc.",
          "title": "----- BIND: Authorization -----"
        },
        "username": {
          "type": "string",
          "title": "bind_dn"
        },
        "password": {
          "type": "string",
          "title": "password"
        },
        "baseObject": {
          "type": "string",
          "title": "----- SearchRequest -----\nbaseObject [D]istinguished[N]ame"
        },
        "scope": {
          "type": "integer",
          "format": "int32",
          "title": "baseObject              (0),\nsingleLevel             (1),\nwholeSubtree            (2)"
        },
        "derefAliases": {
          "type": "integer",
          "format": "int32",
          "title": "neverDerefAliases       (0),\nderefInSearching        (1),\nderefFindingBaseObj     (2),\nderefAlways             (3)"
        },
        "sizeLimit": {
          "type": "string",
          "format": "int64",
          "title": "INTEGER (0 ..  maxInt),"
        },
        "timeLimit": {
          "type": "string",
          "format": "int64",
          "title": "INTEGER (0 ..  maxInt),"
        },
        "typesOnly": {
          "type": "boolean",
          "title": "BOOLEAN,"
        },
        "filter": {
          "type": "string",
          "title": "Filter,"
        },
        "attributes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "AttributeSelection"
        },
        "controls": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLDAPControl"
          },
          "title": "----- LDAPMessage -----\nControls NOT implemented yet !"
        }
      },
      "title": "https://datatracker.ietf.org/doc/html/rfc4511#section-4.5.1"
    },
    "LDAPResyncLDAPCatalogBody": {
      "type": "object",
      "properties": {
        "options": {
          "$ref": "#/definitions/apiLDAProcessOptions",
          "title": "Options"
        }
      }
    },
    "LDAPUpdateLDAPCatalogBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Fields for partial update. PATCH"
        },
        "catalog": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "Meaningfull title name"
            },
            "url": {
              "type": "string",
              "description": "URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]",
              "title": "----- Connection Options -----"
            },
            "tls": {
              "$ref": "#/definitions/apiLDAPCatalogTLSConfig"
            },
            "bind": {
              "type": "string",
              "description": "authorization method e.g.: SIMPLE, SAML, NTLM, etc.",
              "title": "----- BIND: Authorization -----"
            },
            "base_dn": {
              "type": "string",
              "title": "base_dn, aka domain e.g.: 'dc=example,dc=org'"
            },
            "username": {
              "type": "string",
              "title": "bind_dn"
            },
            "password": {
              "type": "string",
              "title": "password"
            },
            "cron": {
              "type": "string",
              "description": "[CRON]OS SPEC ! github.com/robfig/cron/v3",
              "title": "----- RSYNC Processing -----\nint32  priority = 4;"
            },
            "sync": {
              "$ref": "#/definitions/apiLDAProcessOptions"
            },
            "entry_uuid": {
              "type": "string",
              "description": "entry unique id (except DN which may be updated)",
              "title": "----- DOMAIN: Entry model -----"
            },
            "entry_modify": {
              "type": "string",
              "title": "last modification timestamp attribute type"
            },
            "templates": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/apiLDAPTemplate"
              },
              "title": "// // ----- MAP: user(s) settings -----\nLDAPUsersMap users = 26; // DEPRECATED: Use Template(s) instead\nSYNC Object's search and mappings"
            },
            "process": {
              "$ref": "#/definitions/apiLDAProcess",
              "title": "Last OR Current SYNC process details"
            },
            "created_at": {
              "type": "string",
              "format": "int64",
              "description": "unix",
              "title": "basic: last operation details"
            },
            "created_by": {
              "$ref": "#/definitions/apiUserId",
              "title": "user"
            },
            "updated_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "updated_by": {
              "$ref": "#/definitions/apiUserId",
              "title": "user"
            }
          },
          "description": "LDAP Catalog changes.",
          "title": "LDAP Catalog changes."
        }
      }
    },
    "LDAPUpdateLDAPTemplateBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "OPTIONAL. Fields for partial update. PATCH"
        },
        "template": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "Name this template"
            },
            "base_dn": {
              "type": "string",
              "title": "Optional. LDAP Search base entry DN"
            },
            "search": {
              "type": "string",
              "title": "Required. LDAP Search filter string"
            },
            "catalog": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "title": "display name"
                }
              },
              "title": "LDAPCatalog belongs to"
            },
            "enabled": {
              "type": "boolean",
              "title": "Optional. This Template is activated ?"
            },
            "role": {
              "type": "object",
              "title": "OPTIONAL. Role objclass fields mapping (Not implemented yet)"
            },
            "device": {
              "type": "object",
              "title": "OPTIONAL. Device objclass fields mapping"
            },
            "user": {
              "type": "object",
              "title": "OPTIONAL. User objclass fields mapping"
            },
            "agent": {
              "type": "object",
              "title": "OPTIONAL. Agent objclass fields mapping"
            },
            "created_at": {
              "type": "string",
              "format": "int64",
              "description": "unix",
              "title": "READONLY. Operational attributes"
            },
            "created_by": {
              "$ref": "#/definitions/apiUserId",
              "title": "user"
            },
            "updated_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "updated_by": {
              "$ref": "#/definitions/apiUserId",
              "title": "user"
            }
          },
          "description": "Template changes.",
          "title": "Template changes."
        }
      }
    },
    "ListServiceCreateListCommunicationBody": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "expire_at": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "ListServiceUpdateListBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "ListServiceUpdateListCommunicationBody": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "expire_at": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "ListSkillAgentListSkillAgg": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "MediaAttributeAudio": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "title": "Name of the song"
        },
        "performer": {
          "type": "string",
          "title": "Song Performer"
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "title": "Duration in seconds"
        },
        "waveform": {
          "type": "string",
          "format": "byte",
          "description": "Waveform: consists in a series of bitpacked 5-bit values."
        }
      },
      "title": "// Defines an animated GIF\nmessage Animated {}\nDefines an audio"
    },
    "MediaAttributeImage": {
      "type": "object",
      "properties": {
        "width": {
          "type": "integer",
          "format": "int64",
          "title": "Width of image"
        },
        "height": {
          "type": "integer",
          "format": "int64",
          "title": "Height of image"
        },
        "animated": {
          "type": "boolean",
          "title": "Defines an animated GIF"
        }
      },
      "title": "Defines the width and height of an image uploaded"
    },
    "MediaAttributeVideo": {
      "type": "object",
      "properties": {
        "width": {
          "type": "integer",
          "format": "int64",
          "title": "Video width"
        },
        "height": {
          "type": "integer",
          "format": "int64",
          "title": "Video height"
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "title": "Duration in seconds"
        }
      },
      "title": "Defines a video"
    },
    "MemberServiceAttemptCallbackBody": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "min_offering_at": {
          "type": "string",
          "format": "int64"
        },
        "expire_at": {
          "type": "string",
          "format": "int64"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "display": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "agent_id": {
          "type": "integer",
          "format": "int32"
        },
        "exclude_current_communication": {
          "type": "boolean"
        },
        "wait_between_retries": {
          "type": "integer",
          "format": "int32"
        },
        "only_current_communication": {
          "type": "boolean"
        }
      }
    },
    "MemberServiceAttemptsRenewalResultBody": {
      "type": "object",
      "properties": {
        "renewal": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "MemberServiceCreateAttemptBody": {
      "type": "object",
      "properties": {
        "agent_id": {
          "type": "string",
          "format": "int64"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "MemberServiceCreateMemberBody": {
      "type": "object",
      "properties": {
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "expire_at": {
          "type": "string",
          "format": "int64"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "timezone": {
          "$ref": "#/definitions/engineLookup"
        },
        "communications": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineMemberCommunicationCreateRequest"
          }
        },
        "bucket": {
          "$ref": "#/definitions/engineLookup"
        },
        "min_offering_at": {
          "type": "string",
          "format": "int64"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "agent": {
          "$ref": "#/definitions/engineLookup"
        },
        "skill": {
          "$ref": "#/definitions/engineLookup"
        }
      }
    },
    "MemberServiceCreateMemberBulkBody": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineCreateMemberBulkItem"
          }
        },
        "file_name": {
          "type": "string"
        }
      }
    },
    "MemberServiceDeleteMembersBody": {
      "type": "object",
      "properties": {
        "q": {
          "type": "string"
        },
        "id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "title": "deprecated"
        },
        "bucket_id": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "destination": {
          "type": "string"
        },
        "created_at": {
          "$ref": "#/definitions/engineFilterBetween"
        },
        "offering_at": {
          "$ref": "#/definitions/engineFilterBetween"
        },
        "stop_cause": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "priority": {
          "$ref": "#/definitions/engineFilterBetween"
        },
        "name": {
          "type": "string"
        },
        "attempts": {
          "$ref": "#/definitions/engineFilterBetween"
        },
        "agent_id": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "numbers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "type": "string"
        },
        "without_members": {
          "type": "boolean"
        }
      }
    },
    "MemberServicePatchMemberBody": {
      "type": "object",
      "properties": {
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "expire_at": {
          "type": "string",
          "format": "int64"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "timezone": {
          "$ref": "#/definitions/engineLookup"
        },
        "communications": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineMemberCommunicationCreateRequest"
          }
        },
        "bucket": {
          "$ref": "#/definitions/engineLookup"
        },
        "min_offering_at": {
          "type": "string",
          "format": "int64"
        },
        "stop_cause": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "agent": {
          "$ref": "#/definitions/engineLookup"
        },
        "skill": {
          "$ref": "#/definitions/engineLookup"
        },
        "attempts": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MemberServicePatchMemberOneBody": {
      "type": "object",
      "properties": {
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "expire_at": {
          "type": "string",
          "format": "int64"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "timezone": {
          "$ref": "#/definitions/engineLookup"
        },
        "communications": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineMemberCommunicationCreateRequest"
          }
        },
        "bucket": {
          "$ref": "#/definitions/engineLookup"
        },
        "min_offering_at": {
          "type": "string",
          "format": "int64"
        },
        "stop_cause": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "agent": {
          "$ref": "#/definitions/engineLookup"
        },
        "skill": {
          "$ref": "#/definitions/engineLookup"
        },
        "attempts": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MemberServiceResetMembersBody": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "bucket_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "stop_cause": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "agent_id": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "numbers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "created_at": {
          "$ref": "#/definitions/engineFilterBetween"
        },
        "priority": {
          "$ref": "#/definitions/engineFilterBetween"
        }
      }
    },
    "MemberServiceUpdateMemberBody": {
      "type": "object",
      "properties": {
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "expire_at": {
          "type": "string",
          "format": "int64"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "timezone": {
          "$ref": "#/definitions/engineLookup"
        },
        "communications": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineMemberCommunicationCreateRequest"
          }
        },
        "bucket": {
          "$ref": "#/definitions/engineLookup"
        },
        "min_offering_at": {
          "type": "string",
          "format": "int64"
        },
        "stop_cause": {
          "type": "string"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "agent": {
          "$ref": "#/definitions/engineLookup"
        },
        "skill": {
          "$ref": "#/definitions/engineLookup"
        }
      }
    },
    "OAuth2FederationDeleteOAuthServiceBody": {
      "type": "object",
      "properties": {
        "permanent": {
          "type": "boolean"
        }
      }
    },
    "OAuth2FederationUpdateOAuthServiceBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Fields for partial update. PATCH"
        },
        "changes": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "display"
            },
            "domain": {
              "$ref": "#/definitions/apiObjectId"
            },
            "type": {
              "type": "string",
              "title": "well-known vendor; provider"
            },
            "logo": {
              "type": "string"
            },
            "scopes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Scopes to be requested"
            },
            "claims": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/apiClaim"
              },
              "description": "google.protobuf.Struct claims = 7;",
              "title": "Identity claims policy rules\nNOTE: Order matters"
            },
            "enabled": {
              "type": "boolean"
            },
            "client_id": {
              "type": "string"
            },
            "client_secret": {
              "type": "string"
            },
            "auth_url": {
              "type": "string",
              "title": "OAuth 2.0 Authorization Endpoint"
            },
            "token_url": {
              "type": "string",
              "title": "OAuth 2.0 Token Endpoint"
            },
            "userinfo_url": {
              "type": "string",
              "title": "OpenID Connect Userinfo Endpoint"
            },
            "discovery_url": {
              "type": "string",
              "title": "OpenID Connect Service Discovery"
            },
            "metadata": {
              "type": "object"
            },
            "created_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "created_by": {
              "$ref": "#/definitions/apiObjectId",
              "title": "user"
            },
            "updated_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "updated_by": {
              "$ref": "#/definitions/apiObjectId",
              "title": "user"
            }
          },
          "description": "Configuration changes.",
          "title": "Configuration changes."
        }
      }
    },
    "OriginateRequestExtension": {
      "type": "object",
      "properties": {
        "appName": {
          "type": "string"
        },
        "args": {
          "type": "string"
        }
      }
    },
    "OriginateRequestStrategy": {
      "type": "string",
      "enum": [
        "FAILOVER",
        "MULTIPLE"
      ],
      "default": "FAILOVER"
    },
    "OutboundResourceGroupServiceCreateOutboundResourceInGroupBody": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/engineLookup"
        },
        "reserve_resource": {
          "$ref": "#/definitions/engineLookup"
        },
        "priority": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "OutboundResourceGroupServiceUpdateOutboundResourceGroupBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "strategy": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "communication": {
          "$ref": "#/definitions/engineLookup"
        },
        "time": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineOutboundResourceTimeRange"
          }
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "OutboundResourceGroupServiceUpdateOutboundResourceInGroupBody": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/engineLookup"
        },
        "reserve_resource": {
          "$ref": "#/definitions/engineLookup"
        },
        "priority": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "OutboundResourceServiceCreateOutboundResourceDisplayBody": {
      "type": "object",
      "properties": {
        "display": {
          "type": "string"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "OutboundResourceServiceCreateOutboundResourceDisplayBulkBody": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineCreateOutboundResourceDisplayRequest"
          }
        }
      }
    },
    "OutboundResourceServicePatchOutboundResourceBody": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "type": "boolean"
        },
        "rps": {
          "type": "integer",
          "format": "int32"
        },
        "reserve": {
          "type": "boolean"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "number": {
          "type": "string"
        },
        "max_successively_errors": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "error_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gateway": {
          "$ref": "#/definitions/engineLookup"
        },
        "description": {
          "type": "string"
        },
        "patterns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "failure_dial_delay": {
          "type": "integer",
          "format": "int64"
        },
        "parameters": {
          "$ref": "#/definitions/engineOutboundResourceParameters"
        }
      }
    },
    "OutboundResourceServiceUpdateOutboundResourceBody": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "type": "boolean"
        },
        "rps": {
          "type": "integer",
          "format": "int32"
        },
        "reserve": {
          "type": "boolean"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "number": {
          "type": "string"
        },
        "max_successively_errors": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "error_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gateway": {
          "$ref": "#/definitions/engineLookup"
        },
        "description": {
          "type": "string"
        },
        "patterns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "failure_dial_delay": {
          "type": "integer",
          "format": "int64"
        },
        "parameters": {
          "$ref": "#/definitions/engineOutboundResourceParameters"
        }
      }
    },
    "OutboundResourceServiceUpdateOutboundResourceDisplayBody": {
      "type": "object",
      "properties": {
        "display": {
          "type": "string"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "PauseTemplateServiceUpdatePauseTemplateBody": {
      "type": "object",
      "properties": {
        "item": {
          "type": "object",
          "properties": {
            "domain_id": {
              "type": "string",
              "format": "int64"
            },
            "created_at": {
              "type": "string",
              "format": "int64"
            },
            "created_by": {
              "$ref": "#/definitions/wfmLookupEntity"
            },
            "updated_at": {
              "type": "string",
              "format": "int64"
            },
            "updated_by": {
              "$ref": "#/definitions/wfmLookupEntity"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "causes": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/wfmPauseTemplateCause"
              }
            }
          }
        }
      }
    },
    "PresenceSetStatusBody": {
      "type": "object",
      "properties": {
        "publish": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "title": "[optional] set of unique 'active' presentities {dnd,dlg,sip,wss}; assume {offline} if omitted"
            },
            "note": {
              "type": "string",
              "title": "[optional] human readable comment"
            },
            "expires": {
              "type": "integer",
              "format": "int32",
              "title": "[optional] \u003cnote\u003e will be cleaned up after seconds"
            },
            "timestamp": {
              "type": "string",
              "format": "int64",
              "title": "[required] last activity time"
            }
          },
          "description": "BODY: partial modifications",
          "title": "int64 id = 1; // user.id"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "PATCH: partial attributes"
        }
      }
    },
    "PresetQueryServicePatchPresetQueryBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "preset": {},
        "section": {
          "type": "string"
        }
      }
    },
    "PresetQueryServiceUpdatePresetQueryBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "preset": {},
        "section": {
          "type": "string"
        }
      }
    },
    "QuestionOption": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "score": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "QueueBucketServiceCreateQueueBucketBody": {
      "type": "object",
      "properties": {
        "ratio": {
          "type": "integer",
          "format": "int32"
        },
        "bucket": {
          "$ref": "#/definitions/engineLookup"
        },
        "disabled": {
          "type": "boolean"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "QueueBucketServicePatchQueueBucketBody": {
      "type": "object",
      "properties": {
        "ratio": {
          "type": "integer",
          "format": "int32"
        },
        "bucket": {
          "$ref": "#/definitions/engineLookup"
        },
        "disabled": {
          "type": "boolean"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "QueueBucketServiceUpdateQueueBucketBody": {
      "type": "object",
      "properties": {
        "ratio": {
          "type": "integer",
          "format": "int32"
        },
        "bucket": {
          "$ref": "#/definitions/engineLookup"
        },
        "disabled": {
          "type": "boolean"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "QueueEventBridgedData": {
      "type": "object",
      "properties": {
        "agent_id": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "QueueEventJoinedData": {
      "type": "object",
      "properties": {
        "attempt_id": {
          "type": "string",
          "format": "int64"
        },
        "app_id": {
          "type": "string"
        }
      }
    },
    "QueueEventLeavingData": {
      "type": "object",
      "properties": {
        "result": {
          "type": "string"
        }
      }
    },
    "QueueEventMissedAgent": {
      "type": "object",
      "properties": {
        "timeout": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "QueueEventOfferingData": {
      "type": "object",
      "properties": {
        "agent_id": {
          "type": "integer",
          "format": "int32"
        },
        "agent_call_id": {
          "type": "string"
        },
        "agent_name": {
          "type": "string"
        }
      }
    },
    "QueueHookServiceCreateQueueHookBody": {
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "event": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "properties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "QueueHookServicePatchQueueHookBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "event": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "properties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "QueueHookServiceUpdateQueueHookBody": {
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "event": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "properties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "QueueResourcesServiceCreateQueueResourceGroupBody": {
      "type": "object",
      "properties": {
        "resource_group": {
          "$ref": "#/definitions/engineLookup"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "QueueResourcesServiceUpdateQueueResourceGroupBody": {
      "type": "object",
      "properties": {
        "resource_group": {
          "$ref": "#/definitions/engineLookup"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "QueueServicePatchQueueBody": {
      "type": "object",
      "properties": {
        "strategy": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "payload": {},
        "calendar": {
          "$ref": "#/definitions/engineLookup"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "timeout": {
          "type": "integer",
          "format": "int32"
        },
        "dnc_list": {
          "$ref": "#/definitions/engineLookup"
        },
        "sec_locate_agent": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "integer",
          "format": "int32"
        },
        "team": {
          "$ref": "#/definitions/engineLookup"
        },
        "description": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "ringtone": {
          "$ref": "#/definitions/engineLookup"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "do_schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "after_schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "sticky_agent": {
          "type": "boolean"
        },
        "processing": {
          "type": "boolean",
          "title": "deprecated"
        },
        "processing_sec": {
          "type": "integer",
          "format": "int64",
          "title": "deprecated"
        },
        "processing_renewal_sec": {
          "type": "integer",
          "format": "int64",
          "title": "deprecated"
        },
        "form_schema": {
          "$ref": "#/definitions/engineLookup",
          "title": "deprecated"
        },
        "task_processing": {
          "$ref": "#/definitions/engineTaskProcessing"
        },
        "grantee": {
          "$ref": "#/definitions/engineLookup"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineTag"
          }
        }
      }
    },
    "QueueServiceUpdateQueueBody": {
      "type": "object",
      "properties": {
        "strategy": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "payload": {},
        "calendar": {
          "$ref": "#/definitions/engineLookup"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "timeout": {
          "type": "integer",
          "format": "int32"
        },
        "dnc_list": {
          "$ref": "#/definitions/engineLookup"
        },
        "sec_locate_agent": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "integer",
          "format": "int32"
        },
        "team": {
          "$ref": "#/definitions/engineLookup"
        },
        "description": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "ringtone": {
          "$ref": "#/definitions/engineLookup"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "do_schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "after_schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "sticky_agent": {
          "type": "boolean"
        },
        "processing": {
          "type": "boolean",
          "title": "deprecated"
        },
        "processing_sec": {
          "type": "integer",
          "format": "int64",
          "title": "deprecated"
        },
        "processing_renewal_sec": {
          "type": "integer",
          "format": "int64",
          "title": "deprecated"
        },
        "form_schema": {
          "$ref": "#/definitions/engineLookup",
          "title": "deprecated"
        },
        "task_processing": {
          "$ref": "#/definitions/engineTaskProcessing"
        },
        "grantee": {
          "$ref": "#/definitions/engineLookup"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineTag"
          }
        }
      }
    },
    "QueueSkillServiceCreateQueueSkillBody": {
      "type": "object",
      "properties": {
        "skill": {
          "$ref": "#/definitions/engineLookup"
        },
        "buckets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "lvl": {
          "type": "integer",
          "format": "int32"
        },
        "min_capacity": {
          "type": "integer",
          "format": "int32"
        },
        "max_capacity": {
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "QueueSkillServicePatchQueueSkillBody": {
      "type": "object",
      "properties": {
        "skill": {
          "$ref": "#/definitions/engineLookup"
        },
        "buckets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "lvl": {
          "type": "integer",
          "format": "int32"
        },
        "min_capacity": {
          "type": "integer",
          "format": "int32"
        },
        "max_capacity": {
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "type": "boolean"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "QueueSkillServiceUpdateQueueSkillBody": {
      "type": "object",
      "properties": {
        "skill": {
          "$ref": "#/definitions/engineLookup"
        },
        "buckets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "lvl": {
          "type": "integer",
          "format": "int32"
        },
        "min_capacity": {
          "type": "integer",
          "format": "int32"
        },
        "max_capacity": {
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "QuickRepliesServicePatchQuickReplyBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "teams": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "article": {
          "$ref": "#/definitions/engineLookup"
        },
        "queues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        }
      }
    },
    "QuickRepliesServiceUpdateQuickReplyBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "teams": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "article": {
          "$ref": "#/definitions/engineLookup"
        },
        "queues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        }
      }
    },
    "RegionServicePatchRegionBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "timezone": {
          "$ref": "#/definitions/engineLookup"
        }
      }
    },
    "RegionServiceUpdateRegionBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "timezone": {
          "$ref": "#/definitions/engineLookup"
        }
      }
    },
    "ResultAttemptResponseAbandoned": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "max_attempts": {
          "type": "integer",
          "format": "int64"
        },
        "wait_between_retries": {
          "type": "integer",
          "format": "int64"
        },
        "exclude_current_communication": {
          "type": "boolean"
        },
        "redial": {
          "type": "boolean"
        },
        "agent_id": {
          "type": "integer",
          "format": "int32"
        },
        "display": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "ResultAttemptResponseRetry": {
      "type": "object",
      "properties": {
        "next_resource": {
          "type": "boolean"
        },
        "sleep": {
          "type": "integer",
          "format": "int32"
        },
        "resource_id": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ResultAttemptResponseSuccess": {
      "type": "object"
    },
    "RolesUpdateRoleBody": {
      "type": "object",
      "properties": {
        "role": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "display common name"
            },
            "user": {
              "type": "boolean",
              "title": "READONLY. Report whether this Role refers to the internal User(=true) or Group(=false)"
            },
            "description": {
              "type": "string",
              "title": "short description"
            },
            "permissions": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/apiPermission"
              }
            },
            "members": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/apiObjectId"
              },
              "description": "users/roles",
              "title": "Caller caller = 4; // TOBE removed !!!\nmap\u003cint64, string\u003e users = 4;"
            },
            "metadata": {
              "type": "object",
              "title": "Optional. Metadata bound to this role by the third party integrations\nEach attribute of this object represents separate various data\nto be able to store and merge separate keys (documents)"
            },
            "created_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "created_by": {
              "$ref": "#/definitions/apiUserId",
              "title": "user"
            },
            "updated_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "updated_by": {
              "$ref": "#/definitions/apiUserId",
              "title": "user"
            },
            "deleted_at": {
              "type": "string",
              "format": "int64",
              "title": "unix"
            },
            "deleted_by": {
              "$ref": "#/definitions/apiUserId",
              "title": "user"
            }
          },
          "title": "modifications"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "partial changes"
        }
      }
    },
    "RoutingChatPlanServicePatchChatPlanBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "enabled": {
          "type": "boolean"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "RoutingChatPlanServiceUpdateChatPlanBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "RoutingOutboundCallServiceMovePositionRoutingOutboundCallBody": {
      "type": "object",
      "properties": {
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "RoutingOutboundCallServicePatchRoutingOutboundCallBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "pattern": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "RoutingOutboundCallServiceUpdateRoutingOutboundCallBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "pattern": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "RoutingSchemaServicePatchRoutingSchemaBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/engineRoutingSchemaType"
        },
        "schema": {},
        "payload": {},
        "debug": {
          "type": "boolean"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "editor": {
          "type": "boolean"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineSchemaTag"
          }
        },
        "note": {
          "type": "string"
        }
      }
    },
    "RoutingSchemaServiceUpdateRoutingSchemaBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/engineRoutingSchemaType"
        },
        "schema": {},
        "payload": {},
        "debug": {
          "type": "boolean"
        },
        "editor": {
          "type": "boolean"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineSchemaTag"
          }
        },
        "note": {
          "type": "string"
        }
      }
    },
    "RoutingVariableServiceUpdateRoutingVariableBody": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "SafeUploadFileResponsePart": {
      "type": "object",
      "properties": {
        "upload_id": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "SchemaVariablesServicePatchSchemaVariableBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "value": {},
        "encrypt": {
          "type": "boolean"
        }
      }
    },
    "SchemaVariablesServiceUpdateSchemaVariableBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {},
        "encrypt": {
          "type": "boolean"
        }
      }
    },
    "SearchUsersRequestPresence": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "note": {
          "type": "string"
        }
      },
      "title": "simplified presence filter params"
    },
    "ShiftTemplateServiceUpdateShiftTemplateBody": {
      "type": "object",
      "properties": {
        "item": {
          "type": "object",
          "properties": {
            "domain_id": {
              "type": "string",
              "format": "int64"
            },
            "created_at": {
              "type": "string",
              "format": "int64"
            },
            "created_by": {
              "$ref": "#/definitions/wfmLookupEntity"
            },
            "updated_at": {
              "type": "string",
              "format": "int64"
            },
            "updated_by": {
              "$ref": "#/definitions/wfmLookupEntity"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "times": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/wfmShiftTemplateTime"
              }
            }
          }
        }
      }
    },
    "SkillServiceCreateSkillAgentBody": {
      "type": "object",
      "properties": {
        "agent": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "capacity": {
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "SkillServiceDeleteSkillAgentBody": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "agent_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        }
      }
    },
    "SkillServicePatchSkillAgentBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "skill": {
          "$ref": "#/definitions/engineLookup"
        },
        "capacity": {
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "agent_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        }
      }
    },
    "SkillServiceUpdateSkillBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "StartFileTranscriptResponseTranscriptJob": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "file_id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "action": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "SystemSettingServicePatchSystemSettingBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "value": {}
      }
    },
    "SystemSettingServiceUpdateSystemSettingBody": {
      "type": "object",
      "properties": {
        "value": {}
      }
    },
    "TeamHookServiceCreateTeamHookBody": {
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "event": {
          "$ref": "#/definitions/engineTeamHookEvent"
        },
        "enabled": {
          "type": "boolean"
        },
        "properties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TeamHookServicePatchTeamHookBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "event": {
          "$ref": "#/definitions/engineTeamHookEvent"
        },
        "enabled": {
          "type": "boolean"
        },
        "properties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TeamHookServiceUpdateTeamHookBody": {
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "event": {
          "$ref": "#/definitions/engineTeamHookEvent"
        },
        "enabled": {
          "type": "boolean"
        },
        "properties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TeamTriggerServiceCreateTeamTriggerBody": {
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "TeamTriggerServicePatchTeamTriggerBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "TeamTriggerServiceRunTeamTriggerBody": {
      "type": "object",
      "properties": {
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TeamTriggerServiceUpdateTeamTriggerBody": {
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "TriggerServiceCreateTriggerJobBody": {
      "type": "object",
      "properties": {
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TriggerServicePatchTriggerBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/engineTriggerType"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "expression": {
          "type": "string"
        },
        "timezone": {
          "$ref": "#/definitions/engineLookup"
        },
        "timeout": {
          "type": "integer",
          "format": "int32"
        },
        "object": {
          "$ref": "#/definitions/engineTriggerObjectType"
        },
        "event": {
          "$ref": "#/definitions/engineTriggerEventType"
        }
      }
    },
    "TriggerServiceUpdateTriggerBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/engineTriggerType"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "expression": {
          "type": "string"
        },
        "timezone": {
          "$ref": "#/definitions/engineLookup"
        },
        "timeout": {
          "type": "integer",
          "format": "int32"
        },
        "object": {
          "$ref": "#/definitions/engineTriggerObjectType"
        },
        "event": {
          "$ref": "#/definitions/engineTriggerEventType"
        }
      }
    },
    "UpdateAccessRequestChanges": {
      "type": "object",
      "properties": {
        "grantee_id": {
          "type": "string",
          "format": "int64",
          "title": "subject (role::object).id"
        },
        "access": {
          "type": "string",
          "title": "[ObAC]: \"crud\" all object class privileges\n[RbAC]: \"r*u*d*\" all object privileges with grant options\n[NOTE]: empty access string denote \"delete\" operation (REVOKE)\n        others - \"add\" or \"replace\" (GRANT)"
        }
      }
    },
    "UploadMediaRequestInputData": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "binary": {
          "type": "string",
          "format": "byte"
        },
        "cancel": {
          "$ref": "#/definitions/googlerpcStatus"
        }
      },
      "title": "Multipart Chunk"
    },
    "UsersLogoutUserBody": {
      "type": "object"
    },
    "WebHookServicePatchWebHookBody": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "origin": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "enabled": {
          "type": "boolean"
        },
        "authorization": {
          "type": "string"
        }
      }
    },
    "WebHookServiceUpdateWebHookBody": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "origin": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "enabled": {
          "type": "boolean"
        },
        "authorization": {
          "type": "string"
        }
      }
    },
    "WorkingConditionServiceUpdateWorkingConditionBody": {
      "type": "object",
      "properties": {
        "item": {
          "type": "object",
          "properties": {
            "domain_id": {
              "type": "string",
              "format": "int64"
            },
            "created_at": {
              "type": "string",
              "format": "int64"
            },
            "created_by": {
              "$ref": "#/definitions/wfmLookupEntity"
            },
            "updated_at": {
              "type": "string",
              "format": "int64"
            },
            "updated_by": {
              "$ref": "#/definitions/wfmLookupEntity"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "workday_hours": {
              "type": "integer",
              "format": "int32"
            },
            "workdays_per_month": {
              "type": "integer",
              "format": "int32"
            },
            "vacation": {
              "type": "integer",
              "format": "int32"
            },
            "sick_leaves": {
              "type": "integer",
              "format": "int32"
            },
            "days_off": {
              "type": "integer",
              "format": "int32"
            },
            "pause_duration": {
              "type": "integer",
              "format": "int32"
            },
            "pause_template": {
              "$ref": "#/definitions/wfmLookupEntity"
            },
            "shift_template": {
              "$ref": "#/definitions/wfmLookupEntity"
            }
          }
        }
      }
    },
    "WorkingScheduleServiceUpdateWorkingScheduleAddAgentsBody": {
      "type": "object",
      "properties": {
        "agents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmLookupEntity"
          }
        }
      }
    },
    "WorkingScheduleServiceUpdateWorkingScheduleBody": {
      "type": "object",
      "properties": {
        "item": {
          "type": "object",
          "properties": {
            "domain_id": {
              "type": "string",
              "format": "int64"
            },
            "created_at": {
              "type": "string",
              "format": "int64"
            },
            "created_by": {
              "$ref": "#/definitions/wfmLookupEntity"
            },
            "updated_at": {
              "type": "string",
              "format": "int64"
            },
            "updated_by": {
              "$ref": "#/definitions/wfmLookupEntity"
            },
            "name": {
              "type": "string"
            },
            "state": {
              "$ref": "#/definitions/wfmWorkingScheduleState"
            },
            "team": {
              "$ref": "#/definitions/wfmLookupEntity"
            },
            "calendar": {
              "$ref": "#/definitions/wfmLookupEntity"
            },
            "start_date_at": {
              "type": "string",
              "format": "int64"
            },
            "end_date_at": {
              "type": "string",
              "format": "int64"
            },
            "start_time_at": {
              "type": "string",
              "format": "int64"
            },
            "end_time_at": {
              "type": "string",
              "format": "int64"
            },
            "extra_skills": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/wfmLookupEntity"
              }
            },
            "block_outside_activity": {
              "type": "boolean"
            },
            "agents": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/wfmLookupEntity"
              }
            },
            "total_agents": {
              "type": "string",
              "format": "int64"
            }
          }
        }
      }
    },
    "apiAccessRule": {
      "type": "object",
      "properties": {
        "grantor": {
          "$ref": "#/definitions/apiRoleId",
          "description": "[WHO]: operational; current user NEED to be rechecked !!!",
          "title": "ObjectId object = 1;"
        },
        "grantee": {
          "$ref": "#/definitions/apiRoleId",
          "title": "[WHOM]: required; NEED to be rechecked !!!"
        },
        "granted": {
          "type": "string",
          "title": "[WHAT]: full: [xrwdxrwd]; privileges: [----xrwd]; grantable: [xrwd----]"
        }
      }
    },
    "apiAccessScope": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "class: object id",
          "title": "Inherit::ObjectClass"
        },
        "class": {
          "type": "string",
          "title": "class: alphanumeric code name"
        },
        "access": {
          "type": "integer",
          "format": "int64",
          "title": "flags: [ CREATE | SELECT | UPDATE | DELETE ]"
        },
        "abac": {
          "type": "boolean",
          "description": "[A]ttribute-[b]ased;  not implemented; next releases ...",
          "title": "Is [?]-[b]ased [A]ccess [C]ontrol *model enabled ?"
        },
        "obac": {
          "type": "boolean",
          "title": "[O]peration-[b]ased;  Mandatory: control access to object.class (alias: collection, section, etc.)"
        },
        "rbac": {
          "type": "boolean",
          "title": "[R]ecord-[b]ased; Discretionary: control access to object.entry (alias: resource, record, etc.)"
        }
      },
      "title": "AccessScope represents authorized access level\nto object class declaration within domain namespace"
    },
    "apiAccessToken": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string",
          "description": "REQUIRED. The access token issued by the authorization server."
        },
        "token_type": {
          "type": "string",
          "description": "REQUIRED. The type of the token issued. Value is case insensitive."
        },
        "expires_in": {
          "type": "integer",
          "format": "int32",
          "description": "RECOMMENDED. The lifetime in seconds of the access token."
        },
        "refresh_token": {
          "type": "string",
          "description": "OPTIONAL. The refresh token, which can be used to obtain\nnew access tokens using the same authorization grant."
        },
        "state": {
          "type": "string",
          "description": "OPTIONAL, if identical to the scope requested by the client;\notherwise, REQUIRED. The scope of the access token.\nrepeated string scope = 5 [ json_name = \"scope\" ];\nREQUIRED if the \"state\" parameter was present in the client\nauthorization request. The exact value received from the client."
        }
      },
      "title": "OAuth 2.0 Access Token Response compatible"
    },
    "apiAuthorization": {
      "type": "object",
      "properties": {
        "dc": {
          "type": "string",
          "format": "int64",
          "description": "current domain component",
          "title": "current::authorization"
        },
        "domain": {
          "type": "string",
          "title": "current domain name"
        },
        "role_id": {
          "type": "string",
          "format": "int64",
          "title": "current role id"
        },
        "username": {
          "type": "string",
          "title": "current role name"
        },
        "session": {
          "$ref": "#/definitions/apiSession",
          "title": "session::authorization (primary)"
        },
        "roles": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "map[:role]:oid",
          "title": "authorization::subject(s) whose privileges extends to the current role"
        },
        "privs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "map[:priv]:uuid { \"sysadmin\":1, \"CALL_MANAGER\":712342168, \"CALL_CENTER\":32435456 }",
          "title": "MAC: set of access privileges assigned to current role::subject(s)"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiAccessScope"
          },
          "description": "[{ \"id\":1, \"class\":\"queue\", \"obac\":false, \"rbac\":true, \"access\":7 },...]",
          "title": "DAC: set of object class(es) on which at least SELECT privilege is granted to current role::subject(s)"
        }
      },
      "description": "Authorization. Current."
    },
    "apiAuthorizationCode": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "REQUIRED. The authorization code generated by the\nauthorization server. The authorization code MUST expire\nshortly after it is issued to mitigate the risk of leaks.\nA maximum authorization code lifetime of 10 minutes is\nRECOMMENDED. The client MUST NOT use the authorization code\nmore than once. If an authorization code is used more than\nonce, the authorization server MUST deny the request and SHOULD\nrevoke (when possible) all tokens previously issued based on\nthat authorization code. The authorization code is bound to\nthe client identifier and redirection URI."
        },
        "state": {
          "type": "string",
          "description": "REQUIRED if the \"state\" parameter was present in the client\nauthorization request. The exact value received from the client.\n\n---------------------------------------------------------------------\n HTTP/1.1 302 Found\n  Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA\n  \u0026state=xyz"
        }
      }
    },
    "apiAuthorizationResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/apiErrorResponse"
        },
        "code": {
          "$ref": "#/definitions/apiAuthorizationCode"
        },
        "token": {
          "$ref": "#/definitions/apiAccessToken"
        }
      }
    },
    "apiCall": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "title": "[optional] !uuid ? channel.uuid : uuid"
        },
        "channel": {
          "$ref": "#/definitions/apiChannel"
        }
      }
    },
    "apiCaller": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "title": "[required] unique_id (channel.uuid)"
        },
        "proto": {
          "type": "string",
          "title": "[required] protocol; channel source: sip|sips|webrtc"
        },
        "origin": {
          "$ref": "#/definitions/apiCallerId",
          "description": "[optional] [From]: source",
          "title": "From:"
        },
        "caller": {
          "$ref": "#/definitions/apiCallerId",
          "title": "[required] leg[A] display; at least is the same as origin"
        },
        "callee": {
          "$ref": "#/definitions/apiCallerId",
          "title": "[optional] leg[B] display"
        },
        "ANI": {
          "type": "string",
          "title": "[optional] [A]utomatic[N]umber[I]dentification"
        },
        "direction": {
          "type": "string",
          "description": "[required] inbound | outbound",
          "title": "To:"
        },
        "destination": {
          "type": "string",
          "title": "[required] [To]: in most cases this is the number"
        },
        "transferred": {
          "type": "string",
          "title": "[optional] transfer source"
        },
        "created_at": {
          "type": "string",
          "format": "uint64",
          "description": "[required] !",
          "title": "Timing of stages"
        },
        "progress_at": {
          "type": "string",
          "format": "uint64",
          "title": "[optional]"
        },
        "progress_media_at": {
          "type": "string",
          "format": "uint64",
          "title": "[optional]"
        },
        "answered_at": {
          "type": "string",
          "format": "uint64",
          "title": "[optional]"
        },
        "bridged_at": {
          "type": "string",
          "format": "uint64",
          "title": "[optional]"
        },
        "hangup_at": {
          "type": "string",
          "format": "uint64",
          "title": "[optional] unlil hangup state reached"
        },
        "onhold_at": {
          "type": "string",
          "format": "uint64",
          "title": "[optional] last 'hold' at time"
        },
        "onhold_ms": {
          "type": "string",
          "format": "uint64",
          "title": "[optional] 'hold' time accumulated"
        },
        "commutation": {
          "type": "string",
          "description": "[optional] 'originator' | 'originatee' FIXME: 'bridge' ?",
          "title": "Other-Leg: oneof below or nothing"
        },
        "originator": {
          "$ref": "#/definitions/apiCaller",
          "title": "defines::leg[A]; thisis:leg[B]"
        },
        "originatee": {
          "$ref": "#/definitions/apiCaller",
          "title": "defines::leg[B]; thisis:leg[A]"
        }
      },
      "title": "The Caller profile"
    },
    "apiCallerId": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "number": {
          "type": "string"
        }
      },
      "description": "CallerId display value."
    },
    "apiCertificate": {
      "type": "object",
      "properties": {
        "serial": {
          "type": "string",
          "title": "serial number assigned (global::Customer-ID)"
        },
        "version": {
          "type": "string",
          "title": "version"
        },
        "validity": {
          "$ref": "#/definitions/apiValidity",
          "title": "int32 competitive = 4; // zero-based competitive sessions limit ?"
        },
        "license": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLicense"
          },
          "title": "grants issued"
        },
        "this_update": {
          "type": "string",
          "format": "int64",
          "title": "unix: issuer signed at"
        },
        "next_update": {
          "type": "string",
          "format": "int64",
          "title": "unix: signature expires; update required"
        },
        "valid": {
          "type": "boolean",
          "title": "validation status"
        },
        "domains": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "apiCertificateUsageResponse": {
      "type": "object",
      "properties": {
        "certificate": {
          "$ref": "#/definitions/apiCertificate",
          "title": "detailed"
        }
      }
    },
    "apiChannel": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "title": "[required] unique_id"
        },
        "proto": {
          "type": "string",
          "title": "[required] source; protocol"
        },
        "state": {
          "type": "string",
          "title": "[required] call_state"
        },
        "active": {
          "type": "string",
          "title": "[optional] answer_state"
        },
        "hangup": {
          "type": "string",
          "title": "[optional] hangup_cause"
        },
        "profile": {
          "$ref": "#/definitions/apiCaller",
          "title": "[required] profile in front of this channel"
        },
        "direction": {
          "type": "string",
          "title": "[required] inbound | outbound"
        }
      }
    },
    "apiClaim": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "apiCreateDeviceResponse": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/apiDevice"
        }
      }
    },
    "apiCreateDomainRequest": {
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/apiOrganization"
        },
        "superuser": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "title": "POST /domains"
    },
    "apiCreateDomainResponse": {
      "type": "object"
    },
    "apiCreateRoleRequest": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/apiRole",
          "title": "entity to be created"
        },
        "copy_id": {
          "type": "string",
          "format": "int64",
          "title": "----- Query parameters -----\nOptional. Source role unique identifier\nto copy access (+default) control list from"
        }
      }
    },
    "apiCreateRoleResponse": {
      "type": "object",
      "properties": {
        "created": {
          "$ref": "#/definitions/apiRole",
          "title": "entity to be created"
        }
      }
    },
    "apiCreateUserRequest": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/apiUser",
          "title": "user entity to be created"
        },
        "user_password": {
          "type": "string",
          "title": "cleartext passphrase"
        },
        "confirm_password": {
          "type": "string",
          "title": "cleartext passphrase"
        }
      }
    },
    "apiCreateUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/apiUser"
        }
      }
    },
    "apiCustomer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "serial number assigned (global::Customer-ID)"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "local created ms",
          "title": "string version = 2; // version\nlocal store details"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "last uploaded ms"
        },
        "revoked_at": {
          "type": "string",
          "format": "int64",
          "title": "local revoked ms"
        },
        "organization": {
          "type": "string",
          "title": "registration name"
        },
        "issued_at": {
          "type": "string",
          "format": "int64",
          "description": "[required] issuer(CA) created at",
          "title": "validity boundaries"
        },
        "not_before": {
          "type": "string",
          "format": "int64",
          "title": "[optional] valid from"
        },
        "not_after": {
          "type": "string",
          "format": "int64",
          "title": "[required] valid till"
        },
        "this_update": {
          "type": "string",
          "format": "int64",
          "description": "[optional]: issuer(CA) signed at",
          "title": "signature validity"
        },
        "next_update": {
          "type": "string",
          "format": "int64",
          "title": "[optional]: signature expires; update required after"
        },
        "verify": {
          "$ref": "#/definitions/apiVerification",
          "description": "[optional] validation results",
          "title": "Verification status"
        },
        "limit": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "description": "defines map[class]limit usage",
          "title": "extensions granted"
        },
        "license": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLicenseV1"
          },
          "description": "grants issued",
          "title": "int32 competitive = 13; // zero-based competitive sessions limit ?"
        },
        "dnsrv": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiObjectId"
          },
          "title": "[optional] domains"
        }
      }
    },
    "apiDeleteDeviceResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiDevice"
          }
        }
      }
    },
    "apiDeleteDomainResponse": {
      "type": "object"
    },
    "apiDeleteLDAPRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "catalog id"
        },
        "related_objects": {
          "type": "boolean",
          "title": "WITH objects bound to ?"
        }
      }
    },
    "apiDeleteOAuthServiceRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "permanent": {
          "type": "boolean"
        }
      }
    },
    "apiDeleteOAuthServiceResponse": {
      "type": "object"
    },
    "apiDeleteRoleResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "$ref": "#/definitions/apiRole"
        }
      }
    },
    "apiDeleteUsersResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiUser"
          }
        }
      }
    },
    "apiDevice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "object id"
        },
        "name": {
          "type": "string",
          "description": "display name",
          "title": "kind of\nDeviceType type = 19;"
        },
        "account": {
          "type": "string",
          "description": "username",
          "title": "credentials"
        },
        "password": {
          "type": "string",
          "title": "password"
        },
        "user": {
          "$ref": "#/definitions/apiUserId",
          "title": "[optional] The user that 'owns' the device;"
        },
        "logged_in": {
          "type": "string",
          "format": "int64",
          "title": "caller profile\n webitel.adt.caller caller = 4;"
        },
        "hotdesk": {
          "type": "boolean",
          "description": "act as a hotdesk",
          "title": "Hotdesk: this workstation aliases"
        },
        "hotdesks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "associated aliases"
        },
        "provision": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "provision extra data"
        },
        "brand": {
          "type": "string",
          "description": "vendor brand name",
          "title": "provision"
        },
        "model": {
          "type": "string"
        },
        "mac": {
          "type": "string",
          "title": "static"
        },
        "ip": {
          "type": "string"
        },
        "reged": {
          "type": "boolean",
          "title": "TODO: something like PresenceStatus instead of Registration\n repeated Registration contacts = 16;"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "created_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        },
        "deleted_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "deleted_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        }
      },
      "title": "Device profile"
    },
    "apiDeviceAudit": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/apiUserId",
          "title": "/devices/:id/audit related"
        },
        "device": {
          "$ref": "#/definitions/apiDeviceId",
          "title": "/users/:id/audit related"
        },
        "hotdesk": {
          "type": "string"
        },
        "logged_in": {
          "type": "string",
          "format": "int64"
        },
        "logged_out": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "Device login audit"
    },
    "apiDeviceAuditResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "search: limit {size}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiDeviceAudit"
          },
          "title": "audit_logs"
        }
      }
    },
    "apiDeviceId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Object ID"
        },
        "name": {
          "type": "string",
          "title": "Display Name"
        }
      },
      "title": "DeviceId lookup value"
    },
    "apiErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "error_description": {
          "type": "string"
        },
        "error_uri": {
          "type": "string"
        },
        "state": {
          "type": "string",
          "title": "---------------------------------------------------------------------\n HTTP/1.1 302 Found\n  Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA\n  \u0026state=xyz"
        }
      }
    },
    "apiGenerateTfaKeysForNecessaryUsersResponse": {
      "type": "object",
      "properties": {
        "affected": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "apiGenerateUserTfaKeyResponse": {
      "type": "object",
      "properties": {
        "totp": {
          "$ref": "#/definitions/apiTfaUrl"
        }
      }
    },
    "apiGetCustomerResponse": {
      "type": "object",
      "properties": {
        "customer": {
          "$ref": "#/definitions/apiCustomer"
        }
      }
    },
    "apiGetUserTfaKeyResponse": {
      "type": "object",
      "properties": {
        "totp": {
          "$ref": "#/definitions/apiTfaUrl"
        }
      }
    },
    "apiGrantAccessRequestV1": {
      "type": "object",
      "properties": {
        "object": {
          "$ref": "#/definitions/apiObjectId",
          "title": "string class = 2;\nint64 object = 3; // class.object.id"
        },
        "grantee": {
          "type": "string",
          "format": "int64",
          "title": "grantee.role.id"
        },
        "grants": {
          "type": "string",
          "title": "repeated string privileges = 5; // [\"SEARCH\",\"MODIFY\",\"DELETE\",\"CREATE\"]\nbool grantable = 6; // WITH GRANT OPTION"
        }
      }
    },
    "apiGrantAccessResponse": {
      "type": "object"
    },
    "apiGrantCertificateResponse": {
      "type": "object"
    },
    "apiGrantRoleResponse": {
      "type": "object"
    },
    "apiLDAPCatalog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "identity\nint64 dc = 1;"
        },
        "name": {
          "type": "string",
          "title": "Meaningfull title name"
        },
        "url": {
          "type": "string",
          "description": "URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]",
          "title": "----- Connection Options -----"
        },
        "tls": {
          "$ref": "#/definitions/apiLDAPCatalogTLSConfig"
        },
        "bind": {
          "type": "string",
          "description": "authorization method e.g.: SIMPLE, SAML, NTLM, etc.",
          "title": "----- BIND: Authorization -----"
        },
        "base_dn": {
          "type": "string",
          "title": "base_dn, aka domain e.g.: 'dc=example,dc=org'"
        },
        "username": {
          "type": "string",
          "title": "bind_dn"
        },
        "password": {
          "type": "string",
          "title": "password"
        },
        "cron": {
          "type": "string",
          "description": "[CRON]OS SPEC ! github.com/robfig/cron/v3",
          "title": "----- RSYNC Processing -----\nint32  priority = 4;"
        },
        "sync": {
          "$ref": "#/definitions/apiLDAProcessOptions"
        },
        "entry_uuid": {
          "type": "string",
          "description": "entry unique id (except DN which may be updated)",
          "title": "----- DOMAIN: Entry model -----"
        },
        "entry_modify": {
          "type": "string",
          "title": "last modification timestamp attribute type"
        },
        "templates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLDAPTemplate"
          },
          "title": "// // ----- MAP: user(s) settings -----\nLDAPUsersMap users = 26; // DEPRECATED: Use Template(s) instead\nSYNC Object's search and mappings"
        },
        "process": {
          "$ref": "#/definitions/apiLDAProcess",
          "title": "Last OR Current SYNC process details"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "unix",
          "title": "basic: last operation details"
        },
        "created_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        }
      },
      "title": "LDAPCatalog profile"
    },
    "apiLDAPCatalogTLSConfig": {
      "type": "object",
      "properties": {
        "cert": {
          "type": "string",
          "format": "byte",
          "description": "PEM: base64",
          "title": "TODO: (!)"
        },
        "key": {
          "type": "string",
          "format": "byte",
          "title": "PEM: base64"
        },
        "ca": {
          "type": "string",
          "format": "byte",
          "title": "PEM: base64"
        }
      },
      "title": "TLS configuration options"
    },
    "apiLDAPControl": {
      "type": "object",
      "properties": {
        "controlType": {
          "type": "string",
          "title": "LDAPOID,"
        },
        "criticality": {
          "type": "boolean",
          "title": "BOOLEAN DEFAULT FALSE,"
        },
        "controlValue": {
          "type": "string",
          "title": "OCTET STRING OPTIONAL"
        }
      },
      "title": "https://datatracker.ietf.org/doc/html/rfc4511#section-4.1.11"
    },
    "apiLDAPObjentry": {
      "type": "object",
      "properties": {
        "entry": {
          "type": "object",
          "description": "map\u003cstring, string\u003e entry = 1;",
          "title": "LDAP Entry Attributes fetched"
        },
        "class": {
          "type": "string",
          "title": "Internal object class been associated with this LDAP .entry"
        },
        "object": {
          "type": "object",
          "title": "Internal object state; DUMP"
        },
        "proc": {
          "type": "string",
          "title": "Operation been performed: create|update|delete"
        },
        "warn": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "An error(s) if any occured\nNON-FATAL Warnings"
        },
        "errs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "FATAL Error(s). NON empty indicates that this process failed"
        }
      },
      "title": "LDAP entry object associatetions performed"
    },
    "apiLDAPSearchRequest": {
      "type": "object",
      "properties": {
        "catalog_id": {
          "type": "string",
          "format": "int64",
          "title": "----- connection -----\nOptional. ID of the preconfigured LDAP catalog"
        },
        "url": {
          "type": "string",
          "description": "URL e.g.: [(ldap|ldapi|ldaps)://]host[:port]",
          "title": "Optional. URL to establish connection to LDAP catalog"
        },
        "tls": {
          "$ref": "#/definitions/apiLDAPSearchRequestTLSConfig"
        },
        "bind": {
          "type": "string",
          "description": "authorization method e.g.: SIMPLE, SAML, NTLM, etc.",
          "title": "----- BIND: Authorization -----"
        },
        "username": {
          "type": "string",
          "title": "bind_dn"
        },
        "password": {
          "type": "string",
          "title": "password"
        },
        "baseObject": {
          "type": "string",
          "title": "----- SearchRequest -----\nbaseObject [D]istinguished[N]ame"
        },
        "scope": {
          "type": "integer",
          "format": "int32",
          "title": "baseObject              (0),\nsingleLevel             (1),\nwholeSubtree            (2)"
        },
        "derefAliases": {
          "type": "integer",
          "format": "int32",
          "title": "neverDerefAliases       (0),\nderefInSearching        (1),\nderefFindingBaseObj     (2),\nderefAlways             (3)"
        },
        "sizeLimit": {
          "type": "string",
          "format": "int64",
          "title": "INTEGER (0 ..  maxInt),"
        },
        "timeLimit": {
          "type": "string",
          "format": "int64",
          "title": "INTEGER (0 ..  maxInt),"
        },
        "typesOnly": {
          "type": "boolean",
          "title": "BOOLEAN,"
        },
        "filter": {
          "type": "string",
          "title": "Filter,"
        },
        "attributes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "AttributeSelection"
        },
        "controls": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLDAPControl"
          },
          "title": "----- LDAPMessage -----\nControls NOT implemented yet !"
        }
      },
      "title": "https://datatracker.ietf.org/doc/html/rfc4511#section-4.5.1"
    },
    "apiLDAPSearchRequestTLSConfig": {
      "type": "object",
      "properties": {
        "PEM": {
          "type": "string",
          "format": "byte",
          "description": "base64",
          "title": "TODO: (!)"
        }
      },
      "title": "TLS configuration options"
    },
    "apiLDAPSearchResponse": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "title": "----- SearchResult (Entry|Reference) -----"
        },
        "resultCode": {
          "type": "integer",
          "format": "int32",
          "title": "----- LDAPResult -----"
        },
        "matchedDN": {
          "type": "string",
          "title": "LDAPDN,"
        },
        "diagnosticMessage": {
          "type": "string",
          "title": "LDAPString,"
        },
        "referral": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "[3] Referral OPTIONAL"
        },
        "controls": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLDAPControl"
          },
          "title": "----- LDAPMessage -----"
        }
      },
      "title": "https://datatracker.ietf.org/doc/html/rfc4511#section-4.5.2"
    },
    "apiLDAPTemplate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "ID unique"
        },
        "name": {
          "type": "string",
          "title": "Name this template"
        },
        "base_dn": {
          "type": "string",
          "title": "Optional. LDAP Search base entry DN"
        },
        "search": {
          "type": "string",
          "title": "Required. LDAP Search filter string"
        },
        "catalog": {
          "$ref": "#/definitions/apiObjectId",
          "title": "LDAPCatalog belongs to"
        },
        "enabled": {
          "type": "boolean",
          "title": "Optional. This Template is activated ?"
        },
        "role": {
          "type": "object",
          "title": "OPTIONAL. Role objclass fields mapping (Not implemented yet)"
        },
        "device": {
          "type": "object",
          "title": "OPTIONAL. Device objclass fields mapping"
        },
        "user": {
          "type": "object",
          "title": "OPTIONAL. User objclass fields mapping"
        },
        "agent": {
          "type": "object",
          "title": "OPTIONAL. Agent objclass fields mapping"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "unix",
          "title": "READONLY. Operational attributes"
        },
        "created_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        }
      },
      "title": "LDAPTemplate is an LDAP search entries to webitel objects transformation template"
    },
    "apiLDAPTemplateResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "result: {page} number"
        },
        "next": {
          "type": "boolean",
          "title": "result: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLDAPTemplate"
          }
        }
      }
    },
    "apiLDAProcess": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Readonly. Process unique identifier"
        },
        "options": {
          "$ref": "#/definitions/apiLDAProcessOptions",
          "title": "Readonly. Executed with options"
        },
        "execute_at": {
          "type": "string",
          "format": "int64",
          "title": "Readonly. Process start timestamp"
        },
        "execute_by": {
          "$ref": "#/definitions/apiRoleId",
          "title": "Optional. Start manually by the user or role"
        },
        "complete_at": {
          "type": "string",
          "format": "int64",
          "description": "Optional. If not \u003czero\u003e indicates that this process is completed."
        },
        "status": {
          "type": "string",
          "title": "Optional. Status description or an error if any occured"
        },
        "progress": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLDAPObjentry"
          },
          "title": "Optional. List of entries been already processed"
        }
      },
      "title": "LDAP synchronization process details"
    },
    "apiLDAProcessOptions": {
      "type": "object",
      "properties": {
        "link_existing_objects": {
          "type": "boolean",
          "title": "Allows to create links\nwith fetched LDAP entries\nfor manually created objects"
        },
        "reassign_device_users": {
          "type": "boolean",
          "title": "Allows to reassign device's owner user\ndue to preconfigured mapping LDAP template"
        },
        "timeout": {
          "type": "string",
          "format": "int64",
          "title": "Operation timeout. Not implemented yet"
        },
        "test": {
          "type": "boolean",
          "title": "Will NOT perform any operations on storage.\nTo review potential processing only"
        }
      }
    },
    "apiLDAProcessResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "result: {page} number"
        },
        "next": {
          "type": "boolean",
          "title": "result: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLDAProcess"
          }
        }
      }
    },
    "apiLicense": {
      "type": "object",
      "properties": {
        "serial": {
          "type": "string",
          "title": "serial number assigned (global::License-ID)"
        },
        "scope": {
          "type": "string",
          "title": "mandatory privilege codename, e.g.: DEVICE, MANAGER, OPERATOR"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "required: limit count (maximum allowed usage quantity)"
        },
        "validity": {
          "$ref": "#/definitions/apiValidity",
          "title": "optional"
        },
        "competitive": {
          "type": "boolean"
        },
        "users": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "users.id (grantees)"
        }
      }
    },
    "apiLicenseUsageResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "this page number !",
          "title": "----- Result paging ----- //"
        },
        "next": {
          "type": "boolean",
          "title": "next page exists ? more results ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLicenseV1"
          },
          "title": "size = (.next ? len(items) : undef (\u003e len(size)))\n----- Result entries ----- //"
        }
      }
    },
    "apiLicenseUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "license.id"
        },
        "prod": {
          "type": "string",
          "title": "license.prod"
        },
        "user": {
          "$ref": "#/definitions/apiObjectId",
          "title": "grant to::user"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "setof objclass grants"
        },
        "issued_at": {
          "type": "string",
          "format": "int64",
          "title": "not before"
        },
        "expires_at": {
          "type": "string",
          "format": "int64",
          "title": "not after"
        }
      },
      "title": "USAGE details"
    },
    "apiLicenseUsersResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "this page number !",
          "title": "----- Result paging ----- //"
        },
        "next": {
          "type": "boolean",
          "title": "next page exists ? more results ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiProductUser"
          },
          "title": "size = (.next ? len(items) : undef (\u003e len(size)))\n----- Result entries ----- //"
        }
      }
    },
    "apiLicenseV1": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "serial number assigned (global::License-ID)"
        },
        "not_before": {
          "type": "string",
          "format": "int64",
          "title": "optional"
        },
        "not_after": {
          "type": "string",
          "format": "int64",
          "title": "optional"
        },
        "product": {
          "type": "string",
          "title": "product name, e.g.: DEVICE, MANAGER, OPERATOR"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "list of known classes, \u0026this product grants mandatory access to, e.g.: 'users', 'roles', 'cc_agent', 'calendars', ..."
        },
        "competitive": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "title": "required: limit count (maximum allowed usage quantity)"
        },
        "remain": {
          "type": "integer",
          "format": "int32",
          "description": "available",
          "title": "operational attributes ...\nremain = limit - len(users)"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLicenseUser"
          },
          "title": "users.id (grantees)"
        },
        "status": {
          "$ref": "#/definitions/apiVerification"
        }
      }
    },
    "apiListAccessResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccessGrant"
          }
        }
      }
    },
    "apiListAccessResponseV1": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "region: paged result control response value"
        },
        "next": {
          "type": "boolean",
          "title": "indicate partial response: ( next || page \u003e 1 ? partial : full )"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiAccessRule"
          },
          "title": "endregion"
        }
      }
    },
    "apiListRegistrationsResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "search: limit {size}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiRegistration"
          },
          "title": "registered"
        }
      }
    },
    "apiLoginResponse": {
      "type": "object",
      "properties": {
        "authorization": {
          "$ref": "#/definitions/apiAccessToken"
        }
      }
    },
    "apiLogoutResponse": {
      "type": "object"
    },
    "apiLogoutUserResponse": {
      "type": "object"
    },
    "apiOAuthService": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "title": "display"
        },
        "domain": {
          "$ref": "#/definitions/apiObjectId"
        },
        "type": {
          "type": "string",
          "title": "well-known vendor; provider"
        },
        "logo": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Scopes to be requested"
        },
        "claims": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiClaim"
          },
          "description": "google.protobuf.Struct claims = 7;",
          "title": "Identity claims policy rules\nNOTE: Order matters"
        },
        "enabled": {
          "type": "boolean"
        },
        "client_id": {
          "type": "string"
        },
        "client_secret": {
          "type": "string"
        },
        "auth_url": {
          "type": "string",
          "title": "OAuth 2.0 Authorization Endpoint"
        },
        "token_url": {
          "type": "string",
          "title": "OAuth 2.0 Token Endpoint"
        },
        "userinfo_url": {
          "type": "string",
          "title": "OpenID Connect Userinfo Endpoint"
        },
        "discovery_url": {
          "type": "string",
          "title": "OpenID Connect Service Discovery"
        },
        "metadata": {
          "type": "object"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "created_by": {
          "$ref": "#/definitions/apiObjectId",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/apiObjectId",
          "title": "user"
        }
      },
      "title": "OAuth 2.0 Authentication [S]ervice [P]rovider Application Configuration"
    },
    "apiObjclass": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "class: object id",
          "title": "Inherit::ObjectClass"
        },
        "name": {
          "type": "string",
          "title": "class: display common name"
        },
        "class": {
          "type": "string",
          "title": "class: alphanumeric code name"
        },
        "abac": {
          "type": "boolean",
          "description": "[A]ttribute-[b]ased;  not implemented; next releases ...",
          "title": "Is [?]-[b]ased [A]ccess [C]ontrol *model enabled ?"
        },
        "obac": {
          "type": "boolean",
          "title": "[O]peration-[b]ased;  Mandatory: control access to object.class (alias: collection, section, etc.)"
        },
        "rbac": {
          "type": "boolean",
          "title": "[R]ecord-[b]ased; Discretionary: control access to object.entry (alias: resource, record, etc.)"
        },
        "access": {
          "type": "string",
          "description": "flags: [ CREATE | SELECT | UPDATE | DELETE ]",
          "title": "Extension: discretionary access control"
        }
      },
      "title": "AccessScope represents authorized access level\nto object class declaration within domain namespace"
    },
    "apiObjectClass": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "(class::object).id"
        },
        "class": {
          "type": "string",
          "title": "(class::object).name"
        },
        "abac": {
          "type": "boolean",
          "title": "[a]ttribute-[b]ased [a]ccess [c]ontrol"
        },
        "obac": {
          "type": "boolean",
          "title": "[o]peration-[b]ased [a]ccess [c]ontrol (from::collection.dal)"
        },
        "rbac": {
          "type": "boolean",
          "title": "[r]ecord-[b]ased [a]ccess [c]ontrol (from::resource.acl)"
        }
      }
    },
    "apiObjectId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "identifier"
        },
        "name": {
          "type": "string",
          "title": "display name"
        }
      }
    },
    "apiOrganization": {
      "type": "object",
      "properties": {
        "dc": {
          "type": "string",
          "format": "int64",
          "title": "component"
        },
        "domain": {
          "type": "string",
          "title": "FQDN"
        },
        "organization": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "locality": {
          "type": "string"
        },
        "stateOrProvince": {
          "type": "string"
        },
        "streetAddress": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "postalAddress": {
          "type": "string"
        },
        "telephoneNumber": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "createdBy": {
          "type": "string",
          "title": "user"
        },
        "updatedAt": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updatedBy": {
          "type": "string",
          "title": "user"
        }
      }
    },
    "apiPermission": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "[required] e.g.: 'read', 'playback_record_file', ..."
        },
        "name": {
          "type": "string",
          "title": "[optional] e.g.: 'Select Any'"
        },
        "usage": {
          "type": "string",
          "title": "[optional] e.g.: 'Grants permission to select any objects'"
        }
      }
    },
    "apiPresenceStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "[required] tuple unique id; \u003ctrack\u003e",
          "title": "basic:latest"
        },
        "app": {
          "type": "string",
          "title": "[optional] service node identity"
        },
        "status": {
          "type": "string",
          "title": "[optional] unique set of \u003cenum:dnd|call|sip|wss\u003e; assume \u003coffline\u003e if blank; \u003cscope\u003e on request"
        },
        "note": {
          "type": "string",
          "title": "[optional] human readable comment"
        },
        "open": {
          "type": "integer",
          "format": "int32",
          "title": "[optional] positive value signify 'active'"
        },
        "closed": {
          "type": "boolean",
          "title": "[optional] signify \u003cstatus\u003e tuple gone from user's presence; equls to (open == 0)"
        },
        "contact": {
          "type": "string",
          "title": "[optional] communication \u003curl\u003e"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "title": "[optional] importance level of this within presentity's"
        },
        "sequence": {
          "type": "string",
          "format": "int64",
          "title": "[optional] this tuple (document) modifications version"
        },
        "expires": {
          "type": "string",
          "format": "int64",
          "title": "NOTE: \u003cdnd\u003e actualy has no expires until user manualy switch it off"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "[required] opened time"
        },
        "domain_id": {
          "type": "string",
          "format": "int64",
          "title": "[hidden] for cluster purpose"
        },
        "presence": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiPresenceStatus"
          },
          "description": "// FIXME: well-known types ?\r\n repeated Dialog  call = 9;\r\n repeated Sipreg  sip = 9;\r\n repeated Websock wss = 9;",
          "title": "detailed: -registered -tracking tuples"
        }
      },
      "title": "PresenceStatus PUBLISH"
    },
    "apiProductUser": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/apiObjectId",
          "title": "grant to::user"
        },
        "domain": {
          "$ref": "#/definitions/apiObjectId",
          "title": "grant to::domain"
        },
        "issued_at": {
          "type": "string",
          "format": "int64",
          "title": "not before"
        },
        "expires_at": {
          "type": "string",
          "format": "int64",
          "title": "not after"
        },
        "sessions": {
          "type": "integer",
          "format": "int32",
          "title": "User's active sessions count !"
        }
      },
      "title": "ProductUser GRANT details"
    },
    "apiReadClassResponse": {
      "type": "object",
      "properties": {
        "class": {
          "$ref": "#/definitions/apiObjectClass"
        }
      }
    },
    "apiReadDeviceResponse": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/apiDevice"
        }
      }
    },
    "apiReadDomainResponse": {
      "type": "object",
      "properties": {
        "domain": {
          "$ref": "#/definitions/apiOrganization"
        }
      }
    },
    "apiReadRoleResponse": {
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/apiRole"
        }
      }
    },
    "apiReadSessionResponse": {
      "type": "object",
      "properties": {
        "session": {
          "$ref": "#/definitions/apiSession"
        }
      }
    },
    "apiReadUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/apiUser"
        }
      }
    },
    "apiRegistration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "user": {
          "$ref": "#/definitions/apiUserId"
        },
        "device": {
          "$ref": "#/definitions/apiDeviceId"
        },
        "callid": {
          "type": "string"
        },
        "socket": {
          "type": "string",
          "title": "registrar: local side (host) e.g.:"
        },
        "contact": {
          "type": "string",
          "title": "binding_uri"
        },
        "received": {
          "type": "string",
          "title": "registrant: remote side (proxy)"
        },
        "instance": {
          "type": "string",
          "title": "?sip.instance= register contact option"
        },
        "user_agent": {
          "type": "string"
        },
        "expires_at": {
          "type": "string",
          "format": "int64"
        },
        "register_at": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "REGISTER SIP status"
    },
    "apiRevokeAccessResponse": {
      "type": "object"
    },
    "apiRevokeCertificateResponse": {
      "type": "object"
    },
    "apiRevokeRoleResponse": {
      "type": "object"
    },
    "apiRole": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "oid"
        },
        "name": {
          "type": "string",
          "title": "display common name"
        },
        "user": {
          "type": "boolean",
          "title": "READONLY. Report whether this Role refers to the internal User(=true) or Group(=false)"
        },
        "description": {
          "type": "string",
          "title": "short description"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiPermission"
          }
        },
        "members": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiObjectId"
          },
          "description": "users/roles",
          "title": "Caller caller = 4; // TOBE removed !!!\nmap\u003cint64, string\u003e users = 4;"
        },
        "metadata": {
          "type": "object",
          "title": "Optional. Metadata bound to this role by the third party integrations\nEach attribute of this object represents separate various data\nto be able to store and merge separate keys (documents)"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "created_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        },
        "deleted_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "deleted_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        }
      },
      "title": "Role represents group of users"
    },
    "apiRoleId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique Object IDentifier"
        },
        "name": {
          "type": "string",
          "title": "Display Name"
        },
        "user": {
          "type": "boolean",
          "title": "Optional. Indicates that this role ID refers\nto the internal user as the system administrative unit"
        }
      },
      "description": "RoleId lookup value."
    },
    "apiRoleMember": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "user.id"
        },
        "name": {
          "type": "string",
          "title": "user.name"
        },
        "admin": {
          "type": "boolean",
          "title": "admin of the group ?"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "created_by": {
          "type": "string",
          "title": "user.[id|name]"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "type": "string",
          "title": "user"
        }
      }
    },
    "apiRoleMembersResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiRoleMember"
          }
        }
      }
    },
    "apiRoleMetadataResponse": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "title": "Optional. Partial metadata document key name"
        },
        "value": {
          "title": "Metadata value"
        }
      }
    },
    "apiSearchCallsResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiCall"
          }
        }
      }
    },
    "apiSearchCertificatesResponse": {
      "type": "object",
      "properties": {
        "certificates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiCertificate"
          }
        }
      }
    },
    "apiSearchClassesResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "search: limit {size}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiObjectClass"
          },
          "title": "list"
        }
      }
    },
    "apiSearchDeviceResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "search: limit {size}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiDevice"
          },
          "title": "devices"
        }
      }
    },
    "apiSearchDomainsResponse": {
      "type": "object",
      "properties": {
        "domains": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiOrganization"
          }
        }
      }
    },
    "apiSearchLDAPResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "result: {page} number"
        },
        "next": {
          "type": "boolean",
          "title": "result: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLDAPCatalog"
          }
        }
      }
    },
    "apiSearchOAuthServiceResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "result: {page} number"
        },
        "next": {
          "type": "boolean",
          "title": "result: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiOAuthService"
          }
        }
      }
    },
    "apiSearchPermissionResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "search: limit {size}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiPermission"
          },
          "title": "result entries"
        }
      }
    },
    "apiSearchRolesResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "select: offset {page}",
          "title": "pagedResultsControl response value"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "search: limit {size}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiRole"
          },
          "title": "roles"
        }
      }
    },
    "apiSearchSessionsResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "result: {page} number"
        },
        "next": {
          "type": "boolean",
          "title": "result: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiSession"
          },
          "title": "results"
        }
      }
    },
    "apiSearchUsersRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "description": "filter: .id = any({id}...)",
          "title": "----- Base Filters ---------------------------"
        },
        "not_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "title": "filter: .id \u003c\u003e all({not_ids}...)"
        },
        "q": {
          "type": "string",
          "description": "filter: (.name|.username|.extension|.status) ILIKE '{q}'",
          "title": "----- User-specific Filters ------------------"
        },
        "name": {
          "type": "string",
          "title": "filter: .name ILIKE '{name}'"
        },
        "status": {
          "type": "string",
          "title": "filter: .status ILIKE '{status}'"
        },
        "username": {
          "type": "string",
          "title": "filter: .username ILIKE '{username}'"
        },
        "extension": {
          "type": "string",
          "title": "filter: .extension LIKE '{extension}'"
        },
        "any": {
          "type": "boolean",
          "description": "filter: include 'deleted' ALSO ! (inactive)",
          "title": "----- View Modes -----------------------------\nNOTE: by default, search NOT 'deleted' objects ONLY"
        },
        "deleted": {
          "type": "boolean",
          "title": "filter: .deleted_at NOTNULL (view: RECYCLE)"
        },
        "presence": {
          "$ref": "#/definitions/SearchUsersRequestPresence"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "select: output (fields,...)",
          "title": "// navigation filter\nrepeated int64 roles = 7;\n----- Search Options -------------------------"
        },
        "sort": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "select: order by (fields,...)"
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "select: limit {size}"
        }
      }
    },
    "apiSearchUsersResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "search: limit {size}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiUser"
          },
          "title": "users"
        }
      }
    },
    "apiServerInfoResponse": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "format": "byte",
          "title": "int64 time = 1; // current timestamp (ms)"
        }
      }
    },
    "apiSession": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "session key"
        },
        "dc": {
          "type": "string",
          "format": "int64",
          "title": "current domain.dc component"
        },
        "domain": {
          "type": "string",
          "title": "session domain.name"
        },
        "user_id": {
          "type": "string",
          "format": "int64",
          "title": "current user.id"
        },
        "username": {
          "type": "string",
          "title": "session user-friendly role name"
        },
        "network_ip": {
          "type": "string",
          "title": "remote IP address; assigned while authorization"
        },
        "user_agent": {
          "type": "string",
          "title": "remote User-Agent; assigned while authorization"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "group.name(s)"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "permission.name(s)"
        },
        "accessed_at": {
          "type": "string",
          "format": "int64",
          "title": "unix: last seen"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "expires_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        }
      }
    },
    "apiSetStatusRequest": {
      "type": "object",
      "properties": {
        "publish": {
          "$ref": "#/definitions/apiUserPresence",
          "description": "BODY: partial modifications",
          "title": "int64 id = 1; // user.id"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "PATCH: partial attributes"
        }
      }
    },
    "apiSystemObjects": {
      "type": "string",
      "enum": [
        "contacts",
        "cc_list",
        "cc_bucket",
        "calendars",
        "devices",
        "cc_agent",
        "cc_team",
        "cc_resource",
        "cc_resource_group",
        "cc_queue",
        "roles",
        "users",
        "cognitive_profile"
      ],
      "default": "contacts"
    },
    "apiTfaUrl": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/apiUserId"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "apiToggleDefaultAccessResponse": {
      "type": "object",
      "properties": {
        "granted": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiAccessRule"
          }
        },
        "revoked": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiAccessRule"
          }
        }
      }
    },
    "apiUpdateAccessResponse": {
      "type": "object",
      "properties": {
        "granted": {
          "type": "string",
          "format": "int64",
          "title": "Affected rules count"
        },
        "revoked": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "apiUpdateAccessResponseV1": {
      "type": "object",
      "properties": {
        "granted": {
          "type": "string",
          "format": "int64",
          "title": "Affected rules count"
        },
        "revoked": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "apiUpdateCertificateResponse": {
      "type": "object",
      "properties": {
        "certificate": {
          "$ref": "#/definitions/apiCertificate",
          "title": "detailed"
        }
      }
    },
    "apiUpdateClassResponse": {
      "type": "object",
      "properties": {
        "class": {
          "$ref": "#/definitions/apiObjectClass",
          "title": "updated"
        }
      }
    },
    "apiUpdateCustomerResponse": {
      "type": "object",
      "properties": {
        "customer": {
          "$ref": "#/definitions/apiCustomer",
          "title": "detailed"
        }
      }
    },
    "apiUpdateDeviceResponse": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/apiDevice"
        }
      }
    },
    "apiUpdateDomainResponse": {
      "type": "object",
      "properties": {
        "domain": {
          "$ref": "#/definitions/apiOrganization"
        }
      }
    },
    "apiUpdateRoleResponse": {
      "type": "object",
      "properties": {
        "updated": {
          "$ref": "#/definitions/apiRole"
        }
      }
    },
    "apiUpdateUserResponse": {
      "type": "object",
      "properties": {
        "updated": {
          "$ref": "#/definitions/apiUser"
        }
      }
    },
    "apiUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Object ID"
        },
        "name": {
          "type": "string",
          "title": "Caller-ID-Name: Display Name"
        },
        "email": {
          "type": "string"
        },
        "username": {
          "type": "string",
          "title": "alphanumeric username (login)"
        },
        "password": {
          "type": "string"
        },
        "extension": {
          "type": "string",
          "title": "Caller-ID-Number:"
        },
        "presence": {
          "$ref": "#/definitions/apiUserPresence",
          "description": "string presence = 7; // unique set of \u003cuser\u003e presentity \u003cstatus:basic\u003e tuples open[ed]\n string status = 8; // short display status (short description)",
          "title": "CallerId caller = 5; // extension\nPresenceStatus presence = 8;"
        },
        "device": {
          "$ref": "#/definitions/apiObjectId",
          "title": "[optional] default device assigned ? WebRTC register ?"
        },
        "devices": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiObjectId"
          },
          "description": "[editable] list of unique `regular` devices, attached to this user",
          "title": "map\u003cint64, string\u003e devices = 13;"
        },
        "hotdesks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiObjectId"
          },
          "title": "[readonly] list of unique `hotdesk` devices, assigned to this user"
        },
        "profile": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "list of variables, assigned to this user as an environment unit"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiPermission"
          },
          "title": "set of operational permission grants"
        },
        "license": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLicenseUser"
          },
          "title": "list of unique licenses, granted to this user"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiObjectId"
          },
          "title": "roles, member of which is this user"
        },
        "totp_url": {
          "type": "string",
          "title": "[readonly][optional] one time password if setting (2fa) is enabled"
        },
        "contact": {
          "$ref": "#/definitions/apiObjectId",
          "description": "[optional] contact connected to this user",
          "title": "repeated Call calls = 13; // order by created_at\nrepeated Registration reged = 13; // order by register_last"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "created_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        },
        "deleted_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "deleted_by": {
          "$ref": "#/definitions/apiUserId",
          "title": "user"
        },
        "chat_name": {
          "type": "string",
          "description": "The \"chat_name\" field is used to store the name displayed externally on the platform.\nFor example, \"chat_name\" is shown when an agent connects to chats with clients."
        }
      },
      "description": "User profile."
    },
    "apiUserAccessToken": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "tokenKey::token_key"
        },
        "token": {
          "type": "string",
          "title": "tokenString::access_token"
        },
        "usage": {
          "type": "string",
          "title": "[optional] short usage description"
        },
        "user": {
          "$ref": "#/definitions/apiObjectId",
          "title": "[optional] output depends on API endpoint"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix::ms"
        },
        "created_by": {
          "$ref": "#/definitions/apiObjectId"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix::ms"
        },
        "updated_by": {
          "$ref": "#/definitions/apiObjectId"
        },
        "deleted_at": {
          "type": "string",
          "format": "int64",
          "title": "[optional] disabled at"
        },
        "deleted_by": {
          "$ref": "#/definitions/apiObjectId",
          "title": "[optional] disabled by"
        }
      },
      "description": "UserId lookup value."
    },
    "apiUserAccessTokenList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "string",
          "format": "int64"
        },
        "next": {
          "type": "boolean",
          "title": "is there more results ? next page is available ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiUserAccessToken"
          }
        }
      }
    },
    "apiUserId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Object ID"
        },
        "name": {
          "type": "string",
          "title": "Display Name"
        }
      },
      "description": "UserId lookup value."
    },
    "apiUserPresence": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "[required] user identity"
        },
        "status": {
          "type": "string",
          "title": "[optional] set of unique 'active' presentities {dnd,dlg,sip,wss}; assume {offline} if omitted"
        },
        "note": {
          "type": "string",
          "title": "[optional] human readable comment"
        },
        "expires": {
          "type": "integer",
          "format": "int32",
          "title": "[optional] \u003cnote\u003e will be cleaned up after seconds"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "[required] last activity time"
        }
      }
    },
    "apiUserSetting": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {}
      }
    },
    "apiUserinfo": {
      "type": "object",
      "properties": {
        "dc": {
          "type": "string",
          "format": "int64",
          "title": "current domain component id"
        },
        "domain": {
          "type": "string",
          "title": "session domain.name"
        },
        "user_id": {
          "type": "string",
          "format": "int64",
          "title": "current user.id"
        },
        "name": {
          "type": "string",
          "title": "current user.id"
        },
        "username": {
          "type": "string",
          "title": "session end-user login"
        },
        "preferred_username": {
          "type": "string"
        },
        "extension": {
          "type": "string"
        },
        "scope": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiObjclass"
          },
          "title": "map[class]dac"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiObjectId"
          },
          "title": "map[role]oid"
        },
        "license": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiLicenseUser"
          },
          "title": "map[key]details"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiPermission"
          }
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "user last updated"
        },
        "expires_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        }
      },
      "title": "https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims"
    },
    "apiValidity": {
      "type": "object",
      "properties": {
        "not_before": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "not_after": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        }
      }
    },
    "apiVerification": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "invalid"
        },
        "notify": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "non-fatal warnings, e.g.:"
        }
      }
    },
    "botBot": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "Readonly. Object Unique IDentifier."
        },
        "dc": {
          "$ref": "#/definitions/botRefer",
          "title": "Readonly. Domain that owns this bot"
        },
        "uri": {
          "type": "string",
          "description": "Required. Relative URI to register and serve this chat bot updates on."
        },
        "name": {
          "type": "string",
          "title": "Required. Name this chat bot"
        },
        "flow": {
          "$ref": "#/definitions/botRefer",
          "title": "Required. Flow schema to connect and serve inbound communication(s)"
        },
        "enabled": {
          "type": "boolean",
          "title": "Optional. Enabled indicates whether this bot is activated or not"
        },
        "provider": {
          "type": "string",
          "title": "Required. Provider communication type to serve this bot connection(s)"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. Provider specific bot settings"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "Readonly. Created at timestamp"
        },
        "created_by": {
          "$ref": "#/definitions/botRefer",
          "title": "Readonly. Created by user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "Readonly. Updated at timestamp"
        },
        "updated_by": {
          "$ref": "#/definitions/botRefer",
          "title": "Readonly. Updated by user"
        }
      },
      "title": "webitel.chat.server.Profile"
    },
    "botBroadcastPeer": {
      "type": "object",
      "properties": {
        "peer": {
          "type": "string",
          "title": "Peer identification"
        },
        "error": {
          "$ref": "#/definitions/googlerpcStatus",
          "title": "Broadcast peer status"
        }
      },
      "title": "Broadcast recepient status"
    },
    "botRefer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "Readonly. Object Unique IDentifier."
        },
        "name": {
          "type": "string",
          "description": "Readonly. Human-readable display name."
        }
      },
      "title": "Reference"
    },
    "botSearchBotResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "{page} current number !",
          "title": "Current page number"
        },
        "next": {
          "type": "boolean",
          "title": "Next indicates whether there are more result page(s)"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/botBot"
          },
          "title": "Items page results"
        }
      }
    },
    "casesCase": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "Unique case ID."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version number of the case."
        },
        "etag": {
          "type": "string",
          "description": "Unique etag identifier."
        },
        "created_by": {
          "$ref": "#/definitions/generalLookup",
          "description": "Creator of the case."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "Creation timestamp (in milliseconds since Unix epoch)."
        },
        "updated_by": {
          "$ref": "#/definitions/generalLookup",
          "description": "Last updater of the case."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Last update timestamp (in milliseconds since Unix epoch)."
        },
        "name": {
          "type": "string",
          "description": "Name of the case (may serve as an ID in docs)."
        },
        "subject": {
          "type": "string",
          "description": "Subject of the case."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the case."
        },
        "contact_info": {
          "type": "string",
          "description": "Contact information for the case."
        },
        "planned_reaction_at": {
          "type": "string",
          "format": "int64",
          "description": "Planned reaction time (in milliseconds)."
        },
        "planned_resolve_at": {
          "type": "string",
          "format": "int64",
          "description": "Planned resolution time (in milliseconds)."
        },
        "status": {
          "$ref": "#/definitions/generalLookup",
          "description": "Current status of the case."
        },
        "close_reason_group": {
          "$ref": "#/definitions/generalLookup",
          "description": "Close reason group, immutable once set."
        },
        "author": {
          "$ref": "#/definitions/generalLookup",
          "description": "Author or reporter of the case."
        },
        "assignee": {
          "$ref": "#/definitions/generalLookup",
          "description": "Assignee responsible for resolving the case."
        },
        "reporter": {
          "$ref": "#/definitions/generalLookup",
          "description": "Reporter of the issue (null if anonymous)."
        },
        "impacted": {
          "$ref": "#/definitions/generalLookup",
          "description": "Impacted contact (defaults to reporter if null)."
        },
        "group": {
          "$ref": "#/definitions/generalExtendedLookup",
          "description": "Group associated with the case."
        },
        "priority": {
          "$ref": "#/definitions/casesPriority",
          "description": "Priority level of the case."
        },
        "source": {
          "$ref": "#/definitions/casesSourceTypeLookup",
          "description": "Source of the case."
        },
        "status_condition": {
          "$ref": "#/definitions/casesStatusCondition",
          "description": "Status condition from status lookup."
        },
        "close_reason": {
          "$ref": "#/definitions/generalLookup",
          "title": "Close details"
        },
        "close_result": {
          "type": "string"
        },
        "rating": {
          "type": "string",
          "format": "int64",
          "title": "Rating details"
        },
        "rating_comment": {
          "type": "string"
        },
        "resolved_at": {
          "type": "string",
          "format": "int64",
          "title": "Timing details"
        },
        "reacted_at": {
          "type": "string",
          "format": "int64"
        },
        "difference_in_reaction": {
          "type": "string",
          "format": "int64"
        },
        "difference_in_resolve": {
          "type": "string",
          "format": "int64"
        },
        "sla_condition": {
          "$ref": "#/definitions/generalLookup",
          "description": "List of SLA conditions."
        },
        "service": {
          "$ref": "#/definitions/generalLookup",
          "description": "Service associated with the case."
        },
        "comments": {
          "$ref": "#/definitions/casesCaseCommentList",
          "description": "List of comments on the case."
        },
        "related": {
          "$ref": "#/definitions/casesRelatedCaseList",
          "description": "List of related cases."
        },
        "links": {
          "$ref": "#/definitions/casesCaseLinkList",
          "description": "List of attached links."
        },
        "files": {
          "$ref": "#/definitions/casesCaseFileList",
          "description": "List of attached files."
        },
        "sla": {
          "$ref": "#/definitions/generalLookup",
          "description": "SLA associated with the case."
        },
        "role_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "title": "System field"
        },
        "dc": {
          "type": "string",
          "format": "int64",
          "title": "System field"
        },
        "custom": {
          "type": "object",
          "description": "Custom data extension fields .."
        }
      },
      "description": "Message representing a case."
    },
    "casesCaseComment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "Main identifier for read, update, and delete operations."
        },
        "etag": {
          "type": "string",
          "title": "entity tag representing id + ver"
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version number of the comment, used for concurrency control."
        },
        "created_by": {
          "$ref": "#/definitions/generalLookup",
          "description": "User who created the comment."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp (in milliseconds) of when the comment was created."
        },
        "updated_by": {
          "$ref": "#/definitions/generalLookup",
          "description": "User who last updated the comment."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp (in milliseconds) of the last update."
        },
        "text": {
          "type": "string",
          "description": "The content of the comment."
        },
        "edited": {
          "type": "boolean",
          "description": "Indicates if the comment was edited; true if created_at \u003c updated_at."
        },
        "can_edit": {
          "type": "boolean",
          "description": "Indicates if the comment can be edited by current user."
        },
        "author": {
          "$ref": "#/definitions/generalLookup",
          "description": "Contact-author of the comment."
        },
        "case_id": {
          "type": "string",
          "format": "int64",
          "description": "Optional relation to the associated case."
        },
        "role_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "title": "System field"
        }
      },
      "description": "Represents a comment associated with a case."
    },
    "casesCaseCommentList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "format": "int64",
          "description": "Current page number."
        },
        "next": {
          "type": "boolean",
          "description": "Flag to indicate if more pages are available."
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/casesCaseComment"
          },
          "description": "List of comments on the current page."
        }
      },
      "description": "Contains a paginated list of comments."
    },
    "casesCaseCommunication": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "Database ID of the communication."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the communication record."
        },
        "etag": {
          "type": "string",
          "description": "Version of the communication record."
        },
        "communication_type": {
          "$ref": "#/definitions/generalLookup",
          "description": "Type of the communication (e.g., Chat, Call)."
        },
        "communication_id": {
          "type": "string",
          "description": "External communication ID."
        }
      },
      "description": "Represents a single case communication."
    },
    "casesCaseFileList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "format": "int64",
          "description": "Current page number."
        },
        "next": {
          "type": "boolean",
          "description": "Indicator if there is a next page."
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcasesFile"
          },
          "description": "List of case files."
        }
      },
      "description": "Contains a list of case files with pagination."
    },
    "casesCaseLink": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "ver": {
          "type": "integer",
          "format": "int32"
        },
        "etag": {
          "type": "string",
          "title": "main field required for read, update and delete"
        },
        "created_by": {
          "$ref": "#/definitions/generalLookup"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unixmilli"
        },
        "updated_by": {
          "$ref": "#/definitions/generalLookup"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "author": {
          "$ref": "#/definitions/generalLookup",
          "title": "contact-author calculated on-flight (optional)"
        },
        "name": {
          "type": "string",
          "title": "link name (optional)"
        },
        "url": {
          "type": "string",
          "title": "URL"
        }
      }
    },
    "casesCaseLinkList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "format": "int64"
        },
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/casesCaseLink"
          }
        }
      }
    },
    "casesCaseList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "format": "int64",
          "description": "Current page number."
        },
        "next": {
          "type": "boolean",
          "description": "Flag indicating if there are more pages."
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/casesCase"
          },
          "description": "List of cases."
        }
      },
      "description": "Response message containing a list of cases."
    },
    "casesCaseTimelineEventType": {
      "type": "string",
      "enum": [
        "chat",
        "call",
        "email"
      ],
      "default": "chat"
    },
    "casesCatalog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique identifier for the catalog"
        },
        "name": {
          "type": "string",
          "title": "Name of the catalog"
        },
        "description": {
          "type": "string",
          "title": "Description of the catalog (optional)"
        },
        "prefix": {
          "type": "string",
          "title": "Prefix used for case identification (optional)"
        },
        "code": {
          "type": "string",
          "title": "Code for external integrations (optional)"
        },
        "state": {
          "type": "boolean",
          "title": "State of the catalog (true for active, false for inactive)"
        },
        "sla": {
          "$ref": "#/definitions/generalLookup",
          "title": "SLA associated with the catalog"
        },
        "status": {
          "$ref": "#/definitions/generalLookup",
          "title": "Status associated with the catalog"
        },
        "close_reason_group": {
          "$ref": "#/definitions/generalLookup",
          "title": "Close reason group associated with the catalog"
        },
        "teams": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/generalLookup"
          },
          "title": "Teams associated with the catalog"
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/generalLookup"
          },
          "title": "Skills associated with the catalog"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp when the catalog was created"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp when the catalog was last updated"
        },
        "created_by": {
          "$ref": "#/definitions/generalLookup",
          "title": "User who created the catalog"
        },
        "updated_by": {
          "$ref": "#/definitions/generalLookup",
          "title": "User who last updated the catalog"
        },
        "service": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/casesService"
          },
          "title": "Service associated with the catalog"
        },
        "searched": {
          "type": "boolean",
          "title": "flag showing whether the catalog was searched"
        }
      },
      "title": "Catalog message represents the main catalog entity with metadata"
    },
    "casesCatalogList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "Page number for pagination"
        },
        "next": {
          "type": "boolean",
          "title": "Indicates if there are more pages"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/casesCatalog"
          },
          "title": "List of catalog items"
        }
      },
      "title": "CatalogList message contains a list of catalogs with pagination"
    },
    "casesCloseReason": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique identifier of the close reason"
        },
        "name": {
          "type": "string",
          "title": "Name of the close reason"
        },
        "description": {
          "type": "string",
          "title": "Description of the close reason"
        },
        "close_reason_group_id": {
          "type": "string",
          "format": "int64",
          "title": "Close Reason Group ID of the close reason"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "CreatedAt timestamp of the close reason"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "UpdatedAt timestamp of the close reason"
        },
        "created_by": {
          "$ref": "#/definitions/generalLookup",
          "title": "CreatedBy user of the close reason"
        },
        "updated_by": {
          "$ref": "#/definitions/generalLookup",
          "title": "UpdatedBy user of the close reason"
        }
      },
      "title": "CloseReason message represents a close reason entity with metadata"
    },
    "casesCloseReasonGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique identifier of the close reason group"
        },
        "name": {
          "type": "string",
          "title": "Name of the close reason group"
        },
        "description": {
          "type": "string",
          "title": "Description of the close reason group"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "CreatedAt timestamp of the close reason group"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "UpdatedAt timestamp of the close reason group"
        },
        "created_by": {
          "$ref": "#/definitions/generalLookup",
          "title": "CreatedBy user of the close reason group"
        },
        "updated_by": {
          "$ref": "#/definitions/generalLookup",
          "title": "UpdatedBy user of the close reason group"
        }
      },
      "title": "CloseReasonGroup message represents a close reason group entity with metadata"
    },
    "casesCloseReasonGroupList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/casesCloseReasonGroup"
          }
        }
      },
      "title": "CloseReasonGroupList message contains a list of CloseReasonGroup items with pagination"
    },
    "casesCloseReasonList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/casesCloseReason"
          }
        }
      },
      "title": "CloseReasonList message contains a list of CloseReason items with pagination"
    },
    "casesCreateCaseRelatedCaseInput": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Etag of the related case."
        },
        "relation_type": {
          "$ref": "#/definitions/casesRelationType",
          "description": "Type of relation (e.g., duplicate, linked)."
        },
        "related_to": {
          "type": "string",
          "description": "Identifier of the related case."
        }
      },
      "description": "Structure for related cases input when creating a case."
    },
    "casesCreateInputRelatedCase": {
      "type": "object",
      "properties": {
        "related_case": {
          "$ref": "#/definitions/generalLookup",
          "description": "Related case details."
        },
        "relation_type": {
          "$ref": "#/definitions/casesRelationType",
          "description": "Relation type between the cases."
        },
        "userID": {
          "$ref": "#/definitions/generalLookup",
          "description": "Optional creator / updater ID. Use this to explicitly set the case creator / updater instead of deriving it from the auth token."
        }
      },
      "description": "Input for creating a related case."
    },
    "casesInputCase": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string"
        },
        "subject": {
          "type": "string",
          "title": "create: required;"
        },
        "description": {
          "type": "string",
          "title": "create: not required;"
        },
        "contact_info": {
          "type": "string",
          "title": "create: not required;"
        },
        "assignee": {
          "$ref": "#/definitions/generalLookup",
          "title": "create: not required, default from service or set by UI;"
        },
        "reporter": {
          "$ref": "#/definitions/generalLookup",
          "title": "create: required (if empty recognize as anonymous contact);"
        },
        "impacted": {
          "$ref": "#/definitions/generalLookup",
          "title": "create: required, default is reporter or ui (if empty recognize as anonymous);"
        },
        "group": {
          "$ref": "#/definitions/generalLookup",
          "title": "create: not required, default from service or set by UI;"
        },
        "status": {
          "$ref": "#/definitions/generalLookup",
          "title": "create: not required, default initial value from status lookup or ui;"
        },
        "priority": {
          "$ref": "#/definitions/generalLookup",
          "title": "create: not required, default first value from priority lookup"
        },
        "source": {
          "$ref": "#/definitions/generalLookup",
          "title": "source of the case"
        },
        "service": {
          "$ref": "#/definitions/generalLookup",
          "title": "on this field base many other readonly fields on return"
        },
        "close_reason": {
          "$ref": "#/definitions/generalLookup",
          "title": "create: not required;"
        },
        "close_result": {
          "type": "string",
          "title": "create: not required; update: required only when case status goes to the final state"
        },
        "rating": {
          "type": "string",
          "format": "int64"
        },
        "rating_comment": {
          "type": "string"
        },
        "status_condition": {
          "$ref": "#/definitions/casesStatusCondition"
        },
        "userID": {
          "$ref": "#/definitions/generalLookup",
          "description": "Optional creator / updater ID. Use this to explicitly set the case creator / updater instead of deriving it from the auth token."
        },
        "custom": {
          "type": "object",
          "description": "Custom data extension fields .."
        }
      }
    },
    "casesInputCaseComment": {
      "type": "object",
      "example": {
        "text": "My new comment"
      },
      "properties": {
        "etag": {
          "type": "string",
          "description": "Identifier for the comment."
        },
        "text": {
          "type": "string",
          "description": "Content of the comment."
        },
        "userID": {
          "$ref": "#/definitions/generalLookup",
          "description": "Optional creator / updater ID. Use this to explicitly set the case creator / updater instead of deriving it from the auth token."
        }
      },
      "description": "Input structure for creating or updating a case comment."
    },
    "casesInputCaseCommunication": {
      "type": "object",
      "properties": {
        "communication_type": {
          "$ref": "#/definitions/generalLookup",
          "description": "Type of the communication."
        },
        "communication_id": {
          "type": "string",
          "description": "External communication ID."
        }
      },
      "description": "Represents input data for creating or linking a communication."
    },
    "casesInputCaseLink": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "userID": {
          "$ref": "#/definitions/generalLookup",
          "description": "Optional creator / updater ID. Use this to explicitly set the case creator / updater instead of deriving it from the auth token."
        }
      }
    },
    "casesInputCatalog": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the catalog (required)"
        },
        "description": {
          "type": "string",
          "title": "Description of the catalog (optional)"
        },
        "prefix": {
          "type": "string",
          "title": "Prefix for case identification (optional)"
        },
        "code": {
          "type": "string",
          "title": "Code for external integrations (optional)"
        },
        "state": {
          "type": "boolean",
          "title": "State of the catalog (true for active, false for inactive)"
        },
        "sla": {
          "$ref": "#/definitions/generalLookup",
          "title": "SLA ID associated with the catalog"
        },
        "status": {
          "$ref": "#/definitions/generalLookup",
          "title": "Status ID associated with the catalog"
        },
        "close_reason_group": {
          "$ref": "#/definitions/generalLookup",
          "title": "Close reason group ID associated with the catalog"
        },
        "teams": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/generalLookup"
          },
          "title": "List of team IDs associated with the catalog"
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/generalLookup"
          },
          "title": "List of skill IDs associated with the catalog"
        }
      },
      "title": "InputCatalog message contains the fields for creating or updating a catalog"
    },
    "casesInputCloseReason": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the close reason"
        },
        "description": {
          "type": "string",
          "title": "Description of the close reason"
        }
      },
      "title": "InputCloseReason message for inputting close reason data"
    },
    "casesInputCloseReasonGroup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "casesInputCreateCase": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string",
          "description": "Required subject of the case."
        },
        "description": {
          "type": "string",
          "description": "Optional description of the case."
        },
        "contact_info": {
          "type": "string",
          "description": "Optional contact information."
        },
        "assignee": {
          "$ref": "#/definitions/generalLookup",
          "description": "Optional assignee ID."
        },
        "reporter": {
          "$ref": "#/definitions/generalLookup",
          "description": "Required reporter ID (if empty, anonymous contact)."
        },
        "impacted": {
          "$ref": "#/definitions/generalLookup",
          "description": "Required impacted user ID (default: reporter)."
        },
        "group": {
          "$ref": "#/definitions/generalLookup",
          "description": "Optional group ID."
        },
        "status": {
          "$ref": "#/definitions/generalLookup",
          "description": "Initial case status (default from lookup or UI)."
        },
        "close_reason_group": {
          "$ref": "#/definitions/generalLookup",
          "description": "Optional close reason."
        },
        "priority": {
          "$ref": "#/definitions/generalLookup",
          "description": "Optional priority level."
        },
        "source": {
          "$ref": "#/definitions/generalLookup",
          "description": "Source of the case."
        },
        "service": {
          "$ref": "#/definitions/generalLookup",
          "description": "Service ID (affects many other readonly fields)."
        },
        "close_reason": {
          "$ref": "#/definitions/generalLookup",
          "description": "Optional close information."
        },
        "close_result": {
          "type": "string",
          "description": "Optional close information."
        },
        "rating": {
          "type": "string",
          "format": "int64",
          "description": "API-only rating information."
        },
        "rating_comment": {
          "type": "string",
          "description": "API-only rating information."
        },
        "status_condition": {
          "$ref": "#/definitions/generalLookup"
        },
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/casesInputCaseLink"
          },
          "description": "List of links attached to the case."
        },
        "related": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/casesCreateCaseRelatedCaseInput"
          },
          "description": "List of related cases."
        },
        "userID": {
          "$ref": "#/definitions/generalLookup",
          "description": "Optional creator / updater ID. Use this to explicitly set the case creator / updater instead of deriving it from the auth token."
        },
        "custom": {
          "type": "object",
          "description": "Custom data extension fields .."
        }
      },
      "description": "Input structure for creating a new case."
    },
    "casesInputCreateService": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the service (required)"
        },
        "root_id": {
          "type": "string",
          "format": "int64",
          "title": "Parent catalog ID (required)"
        },
        "description": {
          "type": "string",
          "title": "Description of the service (optional)"
        },
        "code": {
          "type": "string",
          "title": "Code for external integrations (optional)"
        },
        "state": {
          "type": "boolean",
          "title": "State of the service (true for active, false for inactive)"
        },
        "sla": {
          "$ref": "#/definitions/generalLookup",
          "title": "SLA ID associated with the service"
        },
        "group": {
          "$ref": "#/definitions/generalExtendedLookup",
          "title": "Group ID responsible for the service"
        },
        "assignee": {
          "$ref": "#/definitions/generalLookup",
          "title": "Assignee ID responsible for the service"
        },
        "catalog_id": {
          "type": "string",
          "format": "int64",
          "title": "ID of the root catalog"
        }
      }
    },
    "casesInputCreateStatusCondition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "casesInputPriority": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the priority"
        },
        "description": {
          "type": "string",
          "title": "Description of the priority"
        },
        "color": {
          "type": "string",
          "title": "Color of the priority"
        }
      },
      "title": "InputPriority message for creating a new priority"
    },
    "casesInputRelatedCase": {
      "type": "object",
      "properties": {
        "relation_type": {
          "$ref": "#/definitions/casesRelationType",
          "description": "Relation type."
        },
        "primary_case": {
          "$ref": "#/definitions/generalLookup",
          "description": "Primary case details."
        },
        "related_case": {
          "$ref": "#/definitions/generalLookup",
          "description": "Related case details."
        },
        "userID": {
          "$ref": "#/definitions/generalLookup",
          "description": "Optional creator / updater ID. Use this to explicitly set the case creator / updater instead of deriving it from the auth token."
        }
      },
      "description": "Input for creating or updating a related case."
    },
    "casesInputSLA": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the SLA"
        },
        "description": {
          "type": "string",
          "title": "Description of the SLA"
        },
        "valid_from": {
          "type": "string",
          "format": "int64",
          "title": "Validity period for the SLA"
        },
        "valid_to": {
          "type": "string",
          "format": "int64"
        },
        "calendar": {
          "$ref": "#/definitions/generalLookup",
          "title": "Calendar ID from the \"Calendars\" dictionary"
        },
        "reaction_time": {
          "type": "string",
          "format": "int64",
          "title": "Reaction time"
        },
        "resolution_time": {
          "type": "string",
          "format": "int64",
          "title": "Resolution time"
        }
      },
      "title": "InputSLA message for inputting SLA data"
    },
    "casesInputSLACondition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "priorities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/generalLookup"
          },
          "title": "List of priority IDs for creation"
        },
        "reaction_time": {
          "type": "string",
          "format": "int64"
        },
        "resolution_time": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "InputSLACondition message for inputting SLACondition data"
    },
    "casesInputService": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the service (required)"
        },
        "catalog_id": {
          "type": "string",
          "format": "int64",
          "title": "The parent catalog (required)"
        },
        "description": {
          "type": "string",
          "title": "Description of the service (optional)"
        },
        "code": {
          "type": "string",
          "title": "Code for external integrations (optional)"
        },
        "state": {
          "type": "boolean",
          "title": "State of the service (true for active, false for inactive)"
        },
        "sla": {
          "$ref": "#/definitions/generalLookup",
          "title": "SLA ID associated with the service"
        },
        "group": {
          "$ref": "#/definitions/generalExtendedLookup",
          "title": "Group ID responsible for the service"
        },
        "assignee": {
          "$ref": "#/definitions/generalLookup",
          "title": "Assignee ID responsible for the service"
        },
        "root_id": {
          "type": "string",
          "format": "int64",
          "title": "ID of the root catalog"
        }
      },
      "title": "InputService message contains the fields for creating or updating a service"
    },
    "casesInputSource": {
      "type": "object",
      "example": {
        "name": "Inbound",
        "description": "Inbound customer calls",
        "type": "CALL"
      },
      "default": "{ \"name\": \"Default Source\", \"type\": \"CALL\" }",
      "properties": {
        "name": {
          "type": "string",
          "format": "string",
          "example": "Inbound Calls",
          "default": "New Source",
          "description": "The name of the source",
          "title": "Display name for the source",
          "maxLength": 100,
          "minLength": 2,
          "pattern": "^[a-zA-Z0-9_\\- ]+$"
        },
        "description": {
          "type": "string",
          "format": "string",
          "example": "Handles incoming calls from customers",
          "default": "No description provided",
          "description": "A short description of the source",
          "title": "Optional short description for context",
          "maxLength": 500
        },
        "type": {
          "format": "string",
          "$ref": "#/definitions/casesSourceType",
          "example": "CALL",
          "enum": [
            "CALL",
            "EMAIL",
            "CHAT"
          ],
          "default": "\"CALL\"",
          "description": "The type of the source",
          "title": "Type of the source; restrictable to a fixed set of allowed values"
        }
      },
      "description": "The data structure representing a source",
      "title": "Input Source",
      "externalDocs": {
        "description": "Supported source types documentation",
        "url": "https://api.example.com/docs/source-types"
      },
      "maxProperties": 5,
      "minProperties": 2,
      "required": [
        "name",
        "type"
      ]
    },
    "casesInputStatus": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "casesInputStatusCondition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the status condition"
        },
        "description": {
          "type": "string",
          "title": "Description of the status condition"
        },
        "initial": {
          "type": "boolean",
          "title": "Initial status condition"
        },
        "final": {
          "type": "boolean",
          "title": "Final status condition"
        }
      },
      "title": "InputStatusCondition message for inputting status condition data"
    },
    "casesLinkCommunicationResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/casesCaseCommunication"
          },
          "description": "List of linked communications."
        }
      },
      "description": "Response message after linking communications to a case."
    },
    "casesListCommunicationsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/casesCaseCommunication"
          },
          "description": "List of communications."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Current page number."
        },
        "next": {
          "type": "boolean"
        }
      },
      "description": "Response message for listing communications linked to a case."
    },
    "casesLocateCatalogResponse": {
      "type": "object",
      "properties": {
        "catalog": {
          "$ref": "#/definitions/casesCatalog",
          "title": "The located catalog"
        }
      },
      "title": "LocateCatalogResponse message contains a single catalog entity"
    },
    "casesLocateCloseReasonGroupResponse": {
      "type": "object",
      "properties": {
        "close_reason_group": {
          "$ref": "#/definitions/casesCloseReasonGroup"
        }
      },
      "title": "LocateCloseReasonGroupResponse message contains a single close reason group entity"
    },
    "casesLocateCloseReasonResponse": {
      "type": "object",
      "properties": {
        "close_reason": {
          "$ref": "#/definitions/casesCloseReason"
        }
      },
      "title": "LocateCloseReasonResponse message contains a single close reason entity"
    },
    "casesLocatePriorityResponse": {
      "type": "object",
      "properties": {
        "priority": {
          "$ref": "#/definitions/casesPriority"
        }
      },
      "title": "LocatePriorityResponse message contains a single priority entity"
    },
    "casesLocateSLAConditionResponse": {
      "type": "object",
      "properties": {
        "sla_condition": {
          "$ref": "#/definitions/casesSLACondition"
        }
      },
      "title": "LocateSLAConditionResponse message contains a single SLACondition entity"
    },
    "casesLocateSLAResponse": {
      "type": "object",
      "properties": {
        "sla": {
          "$ref": "#/definitions/casesSLA"
        }
      },
      "title": "LocateSLAResponse message contains a single SLA entity"
    },
    "casesLocateServiceResponse": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/casesService",
          "title": "The located service"
        }
      },
      "title": "LocateServiceResponse message contains a single service entity"
    },
    "casesLocateSourceResponse": {
      "type": "object",
      "properties": {
        "source": {
          "$ref": "#/definitions/casesSource",
          "description": "The located source."
        }
      },
      "description": "Response message for locating a source."
    },
    "casesLocateStatusConditionResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/casesStatusCondition"
        }
      },
      "title": "LocateStatusConditionResponse message contains a single status entity"
    },
    "casesLocateStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/webitelcasesStatus"
        }
      },
      "title": "LocateStatusResponse message contains a single status entity"
    },
    "casesPriority": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique identifier of the priority"
        },
        "name": {
          "type": "string",
          "title": "Name of the priority"
        },
        "description": {
          "type": "string",
          "title": "Description of the priority"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "CreatedAt timestamp of the priority"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "UpdatedAt timestamp of the priority"
        },
        "created_by": {
          "$ref": "#/definitions/generalLookup",
          "title": "CreatedBy user of the priority"
        },
        "updated_by": {
          "$ref": "#/definitions/generalLookup",
          "title": "UpdatedBy user of the priority"
        },
        "color": {
          "type": "string",
          "title": "Color of the priority"
        }
      },
      "title": "Priority message represents a priority entity with metadata"
    },
    "casesPriorityList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/casesPriority"
          }
        }
      },
      "title": "PriorityList message contains a list of Priority items with pagination"
    },
    "casesRelatedCase": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "Unique identifier for the related case."
        },
        "etag": {
          "type": "string",
          "description": "Etag for the related case entity."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version number of the related case, used for concurrency control."
        },
        "created_by": {
          "$ref": "#/definitions/generalLookup",
          "description": "User who created the relation."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp (in milliseconds) of when the relation was created."
        },
        "updated_by": {
          "$ref": "#/definitions/generalLookup",
          "description": "User who last updated the relation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp (in milliseconds) of the last update."
        },
        "relation_type": {
          "$ref": "#/definitions/casesRelationType",
          "description": "Relation type between cases."
        },
        "related_case": {
          "$ref": "#/definitions/casesRelatedCaseLookup",
          "description": "Related case details."
        },
        "primary_case": {
          "$ref": "#/definitions/casesRelatedCaseLookup",
          "description": "Primary case details."
        }
      },
      "description": "Represents a related case with its relationship details."
    },
    "casesRelatedCaseList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "format": "int64",
          "description": "Current page number."
        },
        "next": {
          "type": "boolean",
          "description": "Flag to indicate if more pages are available."
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/casesRelatedCase"
          },
          "description": "List of related cases on the current page."
        }
      },
      "description": "Paginated list of related cases."
    },
    "casesRelatedCaseLookup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "id"
        },
        "etag": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "title": "name"
        },
        "subject": {
          "type": "string",
          "title": "subject"
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "title": "ver"
        },
        "color": {
          "type": "string",
          "title": "colour ( calculated by attached priority )"
        }
      },
      "description": "RelatedCaseLookup is created specifically to include the subject field."
    },
    "casesRelationType": {
      "type": "string",
      "enum": [
        "RELATION_TYPE_UNSPECIFIED",
        "DUPLICATES",
        "IS_DUPLICATED_BY",
        "BLOCKS",
        "IS_BLOCKED_BY",
        "CAUSES",
        "IS_CAUSED_BY",
        "IS_CHILD_OF",
        "IS_PARENT_OF",
        "RELATES_TO"
      ],
      "default": "RELATION_TYPE_UNSPECIFIED",
      "description": "Enum for relation types between cases."
    },
    "casesSLA": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique identifier of the SLA"
        },
        "name": {
          "type": "string",
          "title": "Name of the SLA - required"
        },
        "description": {
          "type": "string",
          "title": "Description of the SLA - optional"
        },
        "valid_from": {
          "type": "string",
          "format": "int64",
          "title": "Validity period for the SLA - optional"
        },
        "valid_to": {
          "type": "string",
          "format": "int64"
        },
        "calendar": {
          "$ref": "#/definitions/generalLookup",
          "title": "Calendar ID from the \"Calendars\" dictionary - required"
        },
        "reaction_time": {
          "type": "string",
          "format": "int64",
          "title": "Reaction time - required"
        },
        "resolution_time": {
          "type": "string",
          "format": "int64",
          "title": "Resolution time - required"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "CreatedAt timestamp of the SLA"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "UpdatedAt timestamp of the SLA"
        },
        "created_by": {
          "$ref": "#/definitions/generalLookup",
          "title": "CreatedBy user of the SLA"
        },
        "updated_by": {
          "$ref": "#/definitions/generalLookup",
          "title": "UpdatedBy user of the SLA"
        }
      },
      "title": "SLA message represents an SLA entity with metadata"
    },
    "casesSLACondition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique identifier of the SLACondition"
        },
        "name": {
          "type": "string",
          "title": "Name of the SLACondition - required"
        },
        "priorities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/generalLookup"
          },
          "title": "Priorities associated with the SLACondition - fetched as Lookup entities [ Priority name + ID ]"
        },
        "reaction_time": {
          "type": "string",
          "format": "int64",
          "title": "Reaction time - required"
        },
        "resolution_time": {
          "type": "string",
          "format": "int64",
          "title": "Resolution time - required"
        },
        "sla_id": {
          "type": "string",
          "format": "int64",
          "title": "SLA ID associated with the SLACondition"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "CreatedAt timestamp of the SLACondition"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "UpdatedAt timestamp of the SLACondition"
        },
        "created_by": {
          "$ref": "#/definitions/generalLookup",
          "title": "CreatedBy user of the SLACondition"
        },
        "updated_by": {
          "$ref": "#/definitions/generalLookup",
          "title": "UpdatedBy user of the SLACondition"
        }
      },
      "title": "SLACondition message represents an SLACondition entity with metadata"
    },
    "casesSLAConditionList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/casesSLACondition"
          }
        }
      },
      "title": "SLAConditionList message contains a list of SLACondition items with pagination"
    },
    "casesSLAList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/casesSLA"
          }
        }
      },
      "title": "SLAList message contains a list of SLA items with pagination"
    },
    "casesService": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique identifier for the service"
        },
        "name": {
          "type": "string",
          "title": "Name of the service"
        },
        "root_id": {
          "type": "string",
          "format": "int64",
          "title": "ID of the parent catalog"
        },
        "description": {
          "type": "string",
          "title": "Description of the service (optional)"
        },
        "code": {
          "type": "string",
          "title": "Code for external integrations (optional)"
        },
        "state": {
          "type": "boolean",
          "title": "State of the service (true for active, false for inactive)"
        },
        "sla": {
          "$ref": "#/definitions/generalLookup",
          "title": "SLA associated with the service"
        },
        "group": {
          "$ref": "#/definitions/generalExtendedLookup",
          "title": "Group responsible for the service"
        },
        "assignee": {
          "$ref": "#/definitions/generalLookup",
          "title": "Assignee responsible for the service"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp when the service was created"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp when the service was last updated"
        },
        "created_by": {
          "$ref": "#/definitions/generalLookup",
          "title": "User who created the service"
        },
        "updated_by": {
          "$ref": "#/definitions/generalLookup",
          "title": "User who last updated the service"
        },
        "catalog_id": {
          "type": "string",
          "format": "int64",
          "title": "Catalogs associated with the service"
        },
        "service": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/casesService"
          },
          "title": "Service associated with the service"
        },
        "searched": {
          "type": "boolean",
          "title": "flag showing whether the catalog was searched"
        }
      },
      "title": "Service message represents a service entity within a catalog"
    },
    "casesServiceList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "Page number for pagination"
        },
        "next": {
          "type": "boolean",
          "title": "Indicates if there are more pages"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/casesService"
          },
          "title": "List of service items"
        }
      },
      "title": "ServiceList message contains a list of services with pagination"
    },
    "casesSource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "Unique identifier for the source, generated automatically.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "example": "CRM System",
          "description": "A unique, descriptive name for the source.",
          "maxLength": 100,
          "minLength": 3,
          "pattern": "^[a-zA-Z0-9_\\-\\s]+$"
        },
        "description": {
          "type": "string",
          "example": "Primary CRM system used for customer relationship tracking.",
          "description": "An optional longer explanation of the source's purpose.",
          "maxLength": 500
        },
        "type": {
          "$ref": "#/definitions/casesSourceType",
          "example": "CALL",
          "enum": [
            "TYPE_UNSPECIFIED",
            "CALL",
            "CHAT",
            "SOCIAL_MEDIA",
            "EMAIL",
            "API",
            "MANUAL"
          ],
          "default": "TYPE_UNSPECIFIED",
          "description": "The type of data source represented by this entry."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "Unix timestamp representing when the source was created.",
          "readOnly": true
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Unix timestamp representing the most recent update.",
          "readOnly": true
        },
        "created_by": {
          "$ref": "#/definitions/generalLookup",
          "description": "Reference to the user who originally created this source.",
          "readOnly": true
        },
        "updated_by": {
          "$ref": "#/definitions/generalLookup",
          "description": "Reference to the user who most recently modified this source.",
          "readOnly": true
        }
      },
      "description": "Represents a data source in the contact management system.",
      "title": "Source Entity",
      "required": [
        "id",
        "name",
        "type",
        "created_at",
        "updated_at",
        "created_by",
        "updated_by"
      ]
    },
    "casesSourceList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "description": "Have more records."
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/casesSource"
          },
          "description": "List of sources."
        }
      },
      "description": "A list of sources."
    },
    "casesSourceType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "CALL",
        "CHAT",
        "SOCIAL_MEDIA",
        "EMAIL",
        "API",
        "MANUAL"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "Represents a source type for the source entity.\n\n - TYPE_UNSPECIFIED: Unspecified source type.\n - CALL: Phone call source type.\n - CHAT: Chat source type.\n - SOCIAL_MEDIA: Social media source type.\n - EMAIL: Email source type.\n - API: API source type.\n - MANUAL: Manual source type."
    },
    "casesSourceTypeLookup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/casesSourceType"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "casesStatusCondition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique identifier of the status condition"
        },
        "name": {
          "type": "string",
          "title": "Name of the status condition"
        },
        "description": {
          "type": "string",
          "title": "Description of the status condition"
        },
        "initial": {
          "type": "boolean",
          "title": "Initial status condition"
        },
        "final": {
          "type": "boolean",
          "title": "Final status condition"
        },
        "status_id": {
          "type": "string",
          "format": "int64",
          "title": "Status ID of the status condition"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "CreatedAt timestamp of the status condition"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "UpdatedAt timestamp of the status condition"
        },
        "created_by": {
          "$ref": "#/definitions/generalLookup",
          "title": "CreatedBy user of the status condition"
        },
        "updated_by": {
          "$ref": "#/definitions/generalLookup",
          "title": "UpdatedBy user of the status condition"
        }
      },
      "title": "StatusCondition message represents a status entity with metadata"
    },
    "casesStatusConditionList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/casesStatusCondition"
          }
        }
      },
      "title": "StatusConditionList message contains a list of StatusCondition items with pagination"
    },
    "casesStatusList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcasesStatus"
          }
        }
      },
      "title": "StatusList message contains a list of Status items with pagination"
    },
    "casesUnlinkCommunicationResponse": {
      "type": "object",
      "properties": {
        "affected": {
          "type": "string",
          "format": "int64",
          "description": "Affected rows."
        }
      },
      "description": "Response message after unlinking a communication from a case."
    },
    "ccAcceptTaskResponse": {
      "type": "object"
    },
    "ccAttemptRenewalResultResponse": {
      "type": "object"
    },
    "ccAttemptResultResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "ccCallJoinToAgentRequestProcessing": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "renewal_sec": {
          "type": "integer",
          "format": "int64"
        },
        "sec": {
          "type": "integer",
          "format": "int64"
        },
        "form": {
          "$ref": "#/definitions/ccQueueFormSchema"
        }
      }
    },
    "ccCallJoinToAgentRequestWaitingMusic": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ccCallJoinToQueueRequestQueue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ccCallJoinToQueueRequestWaitingMusic": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ccCancelAgentDistributeResponse": {
      "type": "object"
    },
    "ccCancelAttemptResponse": {
      "type": "object"
    },
    "ccChannel": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "joined_at": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "ccChatJoinToQueueRequestQueue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ccCloseTaskResponse": {
      "type": "object"
    },
    "ccDirectAgentToMemberResponse": {
      "type": "object",
      "properties": {
        "attempt_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "ccEmailJoinToQueueResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "ccInterceptAttemptResponse": {
      "type": "object"
    },
    "ccMemberCommunication": {
      "type": "object",
      "properties": {
        "destination": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/ccMemberCommunicationType"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "ccMemberCommunicationCreateRequest": {
      "type": "object",
      "properties": {
        "destination": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/engineLookup"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "type": "string"
        },
        "resource": {
          "$ref": "#/definitions/engineLookup"
        },
        "display": {
          "type": "string"
        },
        "stop_at": {
          "type": "string",
          "format": "int64"
        },
        "dtmf": {
          "type": "string"
        }
      }
    },
    "ccMemberCommunicationType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ccOfflineResponse": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "ccOnlineResponse": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64"
        },
        "channel": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ccChannel"
          }
        }
      }
    },
    "ccOutboundCallRequestProcessing": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "renewal_sec": {
          "type": "integer",
          "format": "int64"
        },
        "sec": {
          "type": "integer",
          "format": "int64"
        },
        "form": {
          "$ref": "#/definitions/ccQueueFormSchema"
        },
        "without_answer": {
          "type": "boolean"
        }
      }
    },
    "ccOutboundCallResponse": {
      "type": "object",
      "properties": {
        "attempt_id": {
          "type": "string",
          "format": "int64"
        },
        "agent_id": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ccPauseResponse": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "ccProcessingComponentActionResponse": {
      "type": "object"
    },
    "ccProcessingFormActionResponse": {
      "type": "object"
    },
    "ccProcessingFormSaveResponse": {
      "type": "object"
    },
    "ccQueueEvent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "offering": {
          "$ref": "#/definitions/QueueEventOfferingData"
        },
        "bridged": {
          "$ref": "#/definitions/QueueEventBridgedData"
        },
        "missed": {
          "$ref": "#/definitions/QueueEventMissedAgent"
        },
        "leaving": {
          "$ref": "#/definitions/QueueEventLeavingData"
        },
        "joined": {
          "$ref": "#/definitions/QueueEventJoinedData"
        }
      }
    },
    "ccQueueFormSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ccResumeAttemptResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean"
        }
      }
    },
    "ccRunTriggerResponse": {
      "type": "object",
      "properties": {
        "job_id": {
          "type": "string"
        }
      }
    },
    "ccTaskJoinToAgentRequestProcessing": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "renewal_sec": {
          "type": "integer",
          "format": "int64"
        },
        "sec": {
          "type": "integer",
          "format": "int64"
        },
        "form": {
          "$ref": "#/definitions/ccQueueFormSchema"
        }
      }
    },
    "ccTransferResponse": {
      "type": "object"
    },
    "ccWaitingChannelResponse": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "chatAgentChat": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Chat id"
        },
        "title": {
          "type": "string",
          "title": "Chat title"
        },
        "gateway": {
          "$ref": "#/definitions/chatPeer",
          "title": "Chat gateway"
        },
        "started_at": {
          "type": "string",
          "format": "int64",
          "title": "Chat time length"
        },
        "closed_at": {
          "type": "string",
          "format": "int64"
        },
        "last_message": {
          "$ref": "#/definitions/webitelchatMessage",
          "title": "Chat first message"
        },
        "queue": {
          "$ref": "#/definitions/chatPeer",
          "title": "Queue name"
        },
        "close_reason": {
          "type": "string",
          "title": "Close reason (from agent perspective)"
        },
        "unprocessed_close": {
          "type": "boolean",
          "title": "Special attribute for the closed-active chats (on fact closed but should be on active tab on the front-end)\ncan be true only when close reason = any(\"client_leave\", \"client_timeout\", \"agent_timeout\", \"silence_timeout\")"
        },
        "contact": {
          "$ref": "#/definitions/chatPeer",
          "title": "Connected contact"
        }
      }
    },
    "chatBroadcastError": {
      "type": "object",
      "properties": {
        "peer_id": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/googlerpcStatus"
        }
      }
    },
    "chatButtonRequest": {
      "type": "string",
      "enum": [
        "phone",
        "email",
        "contact",
        "location"
      ],
      "default": "phone",
      "description": "- phone: Phone Number\n - email: Email Address\n - contact: General Form\n - location: Current Location",
      "title": "Type of request to share contact info"
    },
    "chatButtonRow": {
      "type": "object",
      "properties": {
        "row": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelchatButton"
          },
          "title": "Button(s) in a row"
        }
      }
    },
    "chatChat": {
      "type": "object",
      "properties": {
        "dc": {
          "type": "string",
          "format": "int64",
          "description": "[D]omain[C]omponent primary ID."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for this chat.\n[FROM] Member / Channel ID.\n\n// [TO] Group. Conversation ID.\n string chat_id = 2;"
        },
        "via": {
          "$ref": "#/definitions/chatPeer",
          "description": "[FROM] VIA text gateway profile."
        },
        "peer": {
          "$ref": "#/definitions/chatPeer",
          "description": "[FROM]: User identity. Seed."
        },
        "title": {
          "type": "string",
          "description": "[TO]: Chat title."
        },
        "left": {
          "type": "string",
          "format": "int64",
          "title": "OPTIONAL. A non-zero value indicates that\nthe participant has left the chat. OFFLINE(!)"
        },
        "join": {
          "type": "string",
          "format": "int64",
          "description": "OPTIONAL. A non-zero value indicates that\nthe participant has joined the chat."
        },
        "invite": {
          "$ref": "#/definitions/chatChatInvite",
          "description": "OPTIONAL. Invite[d] BY member info."
        },
        "context": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Context. Variables."
        },
        "queue": {
          "$ref": "#/definitions/chatPeer",
          "title": "OPTIONAL. Last dialog queue"
        }
      },
      "description": "The Chat info.\nAlias: participant, subscriber, member, peer, leg."
    },
    "chatChatCustomers": {
      "type": "object",
      "properties": {
        "peers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelchatCustomer"
          },
          "description": "Dataset page of Customer(s)."
        },
        "vias": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chatPeer"
          },
          "title": "List of unique text gateways, mentioned in peers. [VIA]"
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page number of results."
        },
        "next": {
          "type": "boolean",
          "title": "Next page is available ?"
        }
      },
      "title": "ChatCustomers dataset"
    },
    "chatChatDialogs": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chatDialog"
          },
          "description": "Dataset page of Dialog(s)."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page number of results."
        },
        "next": {
          "type": "boolean",
          "title": "Next page available ?"
        }
      },
      "title": "ChatDialogs dataset"
    },
    "chatChatInvite": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp when the invitation to join the chat was sent"
        },
        "from": {
          "type": "string",
          "title": "Chat member ID who invited to join the chat"
        }
      }
    },
    "chatChatMembers": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chatChat"
          },
          "description": "Page of the chat participants."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page number of results."
        },
        "next": {
          "type": "boolean",
          "title": "Next page available ?"
        }
      },
      "title": "ChatMembers dataset"
    },
    "chatChatMessage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "Unique message identifier inside this chat."
        },
        "date": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp when this message was sent (published)."
        },
        "from": {
          "$ref": "#/definitions/chatChatPeer",
          "description": "Sender of the message."
        },
        "chat": {
          "$ref": "#/definitions/chatContactChat",
          "description": "Conversation the message belongs to .."
        },
        "sender": {
          "$ref": "#/definitions/chatContactChat",
          "description": "Chat Sender of the message, sent on behalf of a chat (member)."
        },
        "edit": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp when this message was last edited."
        },
        "text": {
          "type": "string",
          "description": "Message Text."
        },
        "file": {
          "$ref": "#/definitions/chatMessageFile",
          "description": "Message Media. Attachment."
        },
        "context": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Context. Variables. Environment."
        },
        "keyboard": {
          "$ref": "#/definitions/chatMessageReplyMarkup",
          "description": "Keyboard. Buttons. Quick Replies."
        },
        "postback": {
          "$ref": "#/definitions/chatMessagePostback",
          "description": "Postback. Reply Button Click[ed]."
        }
      },
      "description": "Chat Message."
    },
    "chatChatMessages": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelchatMessage"
          },
          "description": "Dataset page of messages."
        },
        "chats": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chatChat"
          },
          "title": "List of chats mentioned in messages. [FROM]"
        },
        "peers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chatPeer"
          },
          "title": "List of peers mentioned in messages. [FROM]"
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Dataset page number."
        },
        "next": {
          "type": "boolean",
          "title": "Next page is available ?"
        }
      },
      "title": "ChatMessages dataset"
    },
    "chatChatMessagesRequestOffset": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Messages ONLY starting from the specified message ID"
        },
        "date": {
          "type": "string",
          "format": "int64",
          "description": "Messages ONLY been sent before the specified epochtime(milli)."
        }
      },
      "title": "Offset options"
    },
    "chatChatPeer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Contact unique **ID**entifier.\nContact **type**-specific string."
        },
        "type": {
          "type": "string",
          "description": "Contact **type** provider."
        },
        "name": {
          "type": "string",
          "description": "Contact display **name**."
        }
      },
      "description": "Peer contact."
    },
    "chatContactChat": {
      "type": "object",
      "properties": {
        "dc": {
          "type": "string",
          "format": "int64",
          "description": "[D]omain[C]omponent primary ID."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for this chat.\n[FROM] Member / Channel ID.\n\n// [TO] Group. Conversation ID.\n string chat_id = 2;"
        },
        "via": {
          "$ref": "#/definitions/chatChatPeer",
          "description": "[FROM] VIA text gateway profile."
        },
        "peer": {
          "$ref": "#/definitions/chatChatPeer",
          "description": "[FROM]: User identity. Seed."
        },
        "title": {
          "type": "string",
          "description": "[TO]: Chat title."
        },
        "left": {
          "type": "string",
          "format": "int64",
          "title": "OPTIONAL. A non-zero value indicates that\nthe participant has left the chat. OFFLINE(!)"
        },
        "join": {
          "type": "string",
          "format": "int64",
          "description": "OPTIONAL. A non-zero value indicates that\nthe participant has joined the chat."
        },
        "invite": {
          "$ref": "#/definitions/chatContactChatInvite",
          "description": "OPTIONAL. Invite[d] BY member info."
        },
        "context": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Context. Variables."
        }
      },
      "description": "The Chat info.\nAlias: participant, subscriber, member, peer, leg."
    },
    "chatContactChatInvite": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp when the invitation to join the chat was sent"
        },
        "from": {
          "type": "string",
          "title": "Chat member ID who invited to join the chat"
        }
      }
    },
    "chatDialog": {
      "type": "object",
      "properties": {
        "dc": {
          "type": "string",
          "format": "int64",
          "description": "[D]omain[C]omponent primary ID."
        },
        "id": {
          "type": "string",
          "description": "The Conversation thread unique ID."
        },
        "via": {
          "$ref": "#/definitions/chatPeer",
          "description": "[VIA] Text gateway [FROM] originated thru ..."
        },
        "from": {
          "$ref": "#/definitions/chatPeer",
          "description": "[FROM]: Originator.\nLeg[A]. Contact / User."
        },
        "date": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp of the latest activity."
        },
        "title": {
          "type": "string",
          "description": "Title of the dialog."
        },
        "closed": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp when dialog was closed.\nZero value means - connected (online)\nOtherwise - disconnected (offline)"
        },
        "started": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp when dialog started."
        },
        "message": {
          "$ref": "#/definitions/webitelchatMessage",
          "description": "The latest (top) message."
        },
        "context": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Context. Variables. Environment."
        },
        "members": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chatChat"
          },
          "description": "[TO]: Participants.\nLeg[A+]. Schema / Agent."
        },
        "closed_cause": {
          "type": "string",
          "title": "Close reason if closed from the request sender perspective"
        },
        "queue": {
          "$ref": "#/definitions/chatPeer",
          "title": "OPTIONAL. Last dialog queue"
        }
      },
      "description": "Chat Dialog. Conversation info."
    },
    "chatGetAgentChatsResponse": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chatAgentChat"
          }
        }
      }
    },
    "chatGetCaseChatHistoryRequestOffset": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Messages ONLY starting from the specified message ID"
        },
        "date": {
          "type": "string",
          "format": "int64",
          "description": "Messages ONLY been sent before the specified epochtime(milli)."
        }
      },
      "title": "Offset options"
    },
    "chatGetContactChatHistoryRequestOffset": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Messages ONLY starting from the specified message ID"
        },
        "date": {
          "type": "string",
          "format": "int64",
          "description": "Messages ONLY been sent before the specified epochtime(milli)."
        }
      },
      "title": "Offset options"
    },
    "chatGetContactChatHistoryResponse": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chatChatMessage"
          },
          "description": "Dataset page of messages."
        },
        "chats": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chatContactChat"
          },
          "title": "List of chats mentioned in messages. [FROM]"
        },
        "peers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chatChatPeer"
          },
          "title": "List of peers mentioned in messages. [FROM]"
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Dataset page number."
        },
        "next": {
          "type": "boolean",
          "title": "Next page is available ?"
        }
      },
      "title": "ChatMessages dataset"
    },
    "chatInputButton": {
      "type": "object",
      "properties": {
        "caption": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "chatInputButtonRow": {
      "type": "object",
      "properties": {
        "buttons": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chatInputButton"
          }
        }
      }
    },
    "chatInputKeyboard": {
      "type": "object",
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chatInputButtonRow"
          }
        }
      }
    },
    "chatInputMessage": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "file": {
          "$ref": "#/definitions/webitelchatInputFile"
        },
        "keyboard": {
          "$ref": "#/definitions/chatInputKeyboard"
        }
      }
    },
    "chatInputPeer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "via": {
          "type": "string"
        }
      },
      "description": "InputPeer identity."
    },
    "chatLinkContactToClientNAResponse": {
      "type": "object"
    },
    "chatMarkChatProcessedResponse": {
      "type": "object"
    },
    "chatMessageButton": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "Caption to display."
        },
        "url": {
          "type": "string",
          "description": "URL to navigate to .."
        },
        "code": {
          "type": "string",
          "description": "Postback/Callback data."
        },
        "share": {
          "$ref": "#/definitions/chatMessageButtonRequest",
          "description": "Request to share contact info."
        }
      }
    },
    "chatMessageButtonRequest": {
      "type": "string",
      "enum": [
        "phone",
        "email",
        "contact",
        "location"
      ],
      "default": "phone",
      "description": "- phone: Phone Number\n - email: Email Address\n - contact: General Form\n - location: Current Location",
      "title": "Type of request to share contact info"
    },
    "chatMessageButtonRow": {
      "type": "object",
      "properties": {
        "row": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chatMessageButton"
          },
          "title": "Button(s) in a row"
        }
      }
    },
    "chatMessageFile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "File location"
        },
        "size": {
          "type": "string",
          "format": "int64",
          "title": "Size in bytes"
        },
        "type": {
          "type": "string",
          "title": "MIME media type"
        },
        "name": {
          "type": "string",
          "title": "Filename"
        },
        "url": {
          "type": "string",
          "title": "Exact url of file (if exists)"
        }
      },
      "description": "Media File."
    },
    "chatMessagePostback": {
      "type": "object",
      "properties": {
        "mid": {
          "type": "string",
          "format": "int64",
          "description": "Message ID of the button."
        },
        "code": {
          "type": "string",
          "description": "Data associated with the Button."
        },
        "text": {
          "type": "string",
          "description": "Button's display caption."
        }
      },
      "description": "Postback. Reply Button Click[ed]."
    },
    "chatMessageReplyMarkup": {
      "type": "object",
      "properties": {
        "no_input": {
          "type": "boolean",
          "description": "An option used to block input to force\nthe user to respond with one of the buttons."
        },
        "buttons": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chatMessageButtonRow"
          },
          "title": "Markup of button(s)"
        }
      }
    },
    "chatPeer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Contact unique **ID**entifier.\nContact **type**-specific string."
        },
        "type": {
          "type": "string",
          "description": "Contact **type** provider."
        },
        "name": {
          "type": "string",
          "description": "Contact display **name**."
        }
      },
      "description": "Peer contact."
    },
    "chatReplyMarkup": {
      "type": "object",
      "properties": {
        "no_input": {
          "type": "boolean",
          "description": "An option used to block input to force\nthe user to respond with one of the buttons."
        },
        "buttons": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chatButtonRow"
          },
          "title": "Markup of button(s)"
        }
      }
    },
    "chatTimerange": {
      "type": "object",
      "properties": {
        "since": {
          "type": "string",
          "format": "int64",
          "description": "Since epochtime (milli).\n**Match**: greater than .."
        },
        "until": {
          "type": "string",
          "format": "int64",
          "description": "Until epochtime (milli).\n**Match**: less or equal .."
        }
      },
      "description": "Timerange filter value."
    },
    "chatbotBroadcastMessageResponse": {
      "type": "object",
      "properties": {
        "failure": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/botBroadcastPeer"
          }
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "NOT REQUIRED. Variables to set in the flow JS environment.\n\nKey-Value format"
        }
      }
    },
    "chatbotSendMessageResponse": {
      "type": "object",
      "properties": {
        "bindings": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "SENT message binding variables",
          "title": "// webitel.chat.server.Error error = 1;\nwebitel.chat.server.Message message = 1;"
        }
      }
    },
    "chatserverButton": {
      "type": "object",
      "properties": {
        "caption": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "chatserverChannel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "closed_at": {
          "type": "string",
          "format": "int64"
        },
        "internal": {
          "type": "boolean"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "connection": {
          "type": "string"
        },
        "user_id": {
          "type": "string",
          "format": "int64"
        },
        "props": {
          "type": "string"
        }
      }
    },
    "chatserverFile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "url": {
          "type": "string"
        },
        "mime": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "chatserverMember": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "user_id": {
          "type": "string",
          "format": "int64"
        },
        "type": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "internal": {
          "type": "boolean"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "external_id": {
          "type": "string",
          "title": "string firstname = 6;\nstring lastname = 7;"
        },
        "via": {
          "$ref": "#/definitions/serverGateway"
        }
      }
    },
    "chatserverMessage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique message identifier inside this chat"
        },
        "kind": {
          "type": "string",
          "title": "Kind of the message. Custom type classifier. Optional. Default: empty.\nMay be used by the client UI to extend set of general message.type(s): [ text | file ]"
        },
        "type": {
          "type": "string",
          "description": "Type of this Message to notify e.g.: text, file, read, status etc."
        },
        "text": {
          "type": "string",
          "title": "Text of the message to be sent, 1-4096"
        },
        "file": {
          "$ref": "#/definitions/chatserverFile",
          "title": "File to send. Pass an HTTP .URL as a string for Webitel to get a file from the Internet,\nor upload a new one using storage.FileService.UploadFile()"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. This Message extra properties"
        },
        "contact": {
          "$ref": "#/definitions/serverAccount",
          "title": "End-User extra contact info"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "Optional. Send message date (epochtime ms) Generates by the service."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "Optional. Edit message date (epochtime ms) Generates by the service.\nFor \"read\" messages, you can specify the date the last READ message was created_at"
        },
        "reply_to_message_id": {
          "type": "string",
          "format": "int64",
          "title": "Optional. If the message is a reply,\nthis is the ID of the original message"
        },
        "reply_to_variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "External message sent-binding to be able to identify corresponding internal message"
        },
        "forward_from_chat_id": {
          "type": "string",
          "title": "Unique identifier for the chat where the original message was sent"
        },
        "forward_from_message_id": {
          "type": "string",
          "format": "int64",
          "title": "Message identifier in the chat specified in from_chat_id"
        },
        "forward_from_variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "External message sent-binding to be able to identify corresponding internal message"
        },
        "buttons": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serverButtons"
          },
          "title": "Reply Markup Buttons SET"
        },
        "inline": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serverButtons"
          },
          "title": "Inline Keyboard Buttons SET"
        },
        "from": {
          "$ref": "#/definitions/serverAccount",
          "title": "From sender user account"
        },
        "postback": {
          "$ref": "#/definitions/chatserverPostback",
          "description": "Postback. Reply Button Click[ed]."
        },
        "no_input": {
          "type": "boolean",
          "description": "An option used to block input to force the user\nto respond with one of the `Buttons`.\nInstructs client agents to disable input capabilities.\nCan only be used with a set of `Buttons`."
        },
        "new_chat_members": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serverAccount"
          },
          "title": "NewChatMembers description for {\"type\":\"joined\"} notification"
        },
        "left_chat_member": {
          "$ref": "#/definitions/serverAccount",
          "title": "LeftChatMember description for {\"type\":\"left\"} notification"
        }
      }
    },
    "chatserverPostback": {
      "type": "object",
      "properties": {
        "mid": {
          "type": "string",
          "format": "int64",
          "description": "Message ID of the button."
        },
        "code": {
          "type": "string",
          "description": "Button's callback data associated."
        },
        "text": {
          "type": "string",
          "description": "Button's caption. Text to display."
        }
      },
      "description": "Postback. Reply Button Click[ed]."
    },
    "chatserverSendMessageResponse": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/chatserverMessage",
          "title": "Message sent !"
        }
      }
    },
    "chatserverUser": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "format": "int64"
        },
        "type": {
          "type": "string"
        },
        "connection": {
          "type": "string"
        },
        "internal": {
          "type": "boolean"
        }
      }
    },
    "contactsAccessMode": {
      "type": "string",
      "enum": [
        "READ",
        "WRITE",
        "DELETE"
      ],
      "default": "READ",
      "title": "- READ: Can `fetch` record. [GET]\n - WRITE: Can `update` record. [PUT|PATCH]\n - DELETE: Can `delete` record. [DELETE]"
    },
    "contactsAddContactsToGroupRequest": {
      "type": "object",
      "properties": {
        "group_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "description": "The unique ID of the group."
        },
        "contact_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "description": "List of contact IDs to add to the group."
        }
      },
      "description": "Request message for adding contacts to a group."
    },
    "contactsComment": {
      "type": "object",
      "example": {
        "id": "354",
        "etag": "FqaTCDLbhpaoUreL",
        "created_at": "1680268507698",
        "created_by": {
          "id": "34",
          "name": "John Doe"
        },
        "updated_at": "1680268507698",
        "updated_by": {
          "id": "34",
          "name": "John Doe"
        },
        "text": "This is a new note about the contact's recent activity. So ..."
      },
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the Comment. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "text": {
          "type": "string",
          "description": "Rich Text, multi-line[d] string value."
        },
        "format": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CommentFormat"
          },
          "description": "Styles of the text components."
        }
      },
      "title": "The Contact's internal Comment.\nOutput purpose only"
    },
    "contactsCommentList": {
      "type": "object",
      "example": {
        "data": [
          {
            "id": "354",
            "etag": "FqaTCDLbhpaoUreL",
            "created_at": "1680268507698",
            "created_by": {
              "id": "34",
              "name": "John Doe"
            },
            "updated_at": "1680516785357",
            "updated_by": {
              "id": "34",
              "name": "John Doe"
            },
            "text": "This is a new note about the contact's recent activity. So ..."
          },
          {
            "id": "357",
            "ver": "4",
            "etag": "FZiTxVgr41VPFxyu",
            "created_at": "1680268537698",
            "created_by": {
              "id": "56",
              "name": "Bruce Wayne"
            },
            "updated_at": "1680268563357",
            "updated_by": {
              "name": "Jane Lee (deleted)"
            },
            "text": "This contact may become a customer in a few days"
          }
        ],
        "page": 1,
        "next": true
      },
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsComment"
          },
          "description": "Comment dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "Comment dataset."
    },
    "contactsCondition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "The unique ID of the condition."
        },
        "expression": {
          "type": "string",
          "description": "The query or condition expression used to evaluate the group."
        },
        "group": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The ID of the static group that should be assigned if the condition is met."
        },
        "assignee": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The ID of the assignee that should be assigned if the condition is met (optional)."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who created this condition."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed the last update."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The timestamp (in milliseconds) of when the condition was created."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "The timestamp (in milliseconds) of the last update."
        }
      },
      "title": "Condition"
    },
    "contactsConditionList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "description": "Have more records."
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsCondition"
          },
          "description": "List of conditions."
        }
      },
      "description": "A list of Conditions."
    },
    "contactsContactGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "group": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Group of contacts associated."
        }
      },
      "description": "The Contact's Group association."
    },
    "contactsContactGroupList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsContactGroup"
          },
          "description": "Group dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "Contact groups dataset.\nNOTE: Edge represents connection between two nodes.\nSo this ContactGroupList.data are always subordinate to some contact.id."
    },
    "contactsContactList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcontactsContact"
          },
          "description": "Contact(s) dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "Contact dataset."
    },
    "contactsCreateDynamicGroupRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the dynamic group."
        },
        "description": {
          "type": "string",
          "description": "The description of the dynamic group."
        },
        "default_group": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Default static group to assign if no conditions are met."
        },
        "enabled": {
          "type": "boolean",
          "description": "Enabled status of the dynamic group: active/inactive."
        },
        "condition": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputDynamicCondition"
          },
          "description": "Input details for the dynamic group."
        }
      },
      "description": "Request message for creating a new dynamic group.",
      "required": [
        "name"
      ]
    },
    "contactsCreateGroupRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the group."
        },
        "description": {
          "type": "string",
          "description": "The description of the group."
        },
        "enabled": {
          "type": "boolean",
          "description": "The enabled status of the group."
        }
      },
      "description": "Request message for creating a new group.",
      "required": [
        "name"
      ]
    },
    "contactsDynamicCondition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "The unique ID of the condition."
        },
        "expression": {
          "type": "string",
          "description": "The query or condition expression used to evaluate the group."
        },
        "group": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The ID of the static group that should be assigned if the condition is met."
        },
        "assignee": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The ID of the assignee that should be assigned if the condition is met (optional)."
        }
      },
      "title": "Dynamic Group condition"
    },
    "contactsDynamicGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "The unique ID of the dynamic group. Never changes."
        },
        "name": {
          "type": "string",
          "description": "The name of the dynamic group."
        },
        "description": {
          "type": "string",
          "description": "The description of the dynamic group."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the group's creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last group update."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who created this dynamic group."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed the last update."
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsDynamicCondition"
          },
          "description": "List of dynamic conditions associated with the group."
        },
        "default_group": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Default static group to be assigned if no conditions are met."
        },
        "enabled": {
          "type": "boolean",
          "description": "Enabled status of the group: active or inactive."
        }
      },
      "title": "Dynamic Group"
    },
    "contactsDynamicGroupInput": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the dynamic group."
        },
        "description": {
          "type": "string",
          "description": "The description of the dynamic group."
        },
        "default_group": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Default static group to assign if no conditions are met."
        },
        "enabled": {
          "type": "boolean",
          "description": "Enabled status of the dynamic group: active/inactive."
        }
      },
      "description": "Input message for creating/updating a dynamic group."
    },
    "contactsDynamicGroupList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "description": "Have more records."
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsDynamicGroup"
          },
          "description": "List of dynamic groups."
        }
      },
      "description": "A list of Dynamic Groups."
    },
    "contactsEmailAddress": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates whether this phone number is default within other channels of the same type(phone)."
        },
        "verified": {
          "type": "boolean",
          "title": "Indicate whether Contact, as a Person, realy owns this associated phone number.\nIn other words: whether Contact is reachable thru this 'email' communication channel ?"
        },
        "email": {
          "type": "string",
          "description": "The email address."
        },
        "type": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "title": "The type of the email address.\nLookup value from CommunicationType dictionary.\nThe type can be custom or one of these predefined values:\n- home\n- work\n- other"
        }
      },
      "description": "The Contact's email address."
    },
    "contactsEmailList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsEmailAddress"
          },
          "description": "EmailAddress dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "Email dataset."
    },
    "contactsGroupList": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "description": "Have more records."
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcontactsGroup"
          },
          "description": "List of groups."
        }
      },
      "description": "A list of Groups."
    },
    "contactsGroupType": {
      "type": "string",
      "enum": [
        "GROUP_TYPE_UNSPECIFIED",
        "STATIC",
        "DYNAMIC"
      ],
      "default": "GROUP_TYPE_UNSPECIFIED",
      "description": "- GROUP_TYPE_UNSPECIFIED: Default value\n - STATIC: Static group\n - DYNAMIC: Dynamic group",
      "title": "Enum for Group Type"
    },
    "contactsIMClient": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "user": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "example": {
            "id": "596417343",
            "type": "telegram",
            "name": "John Doe"
          },
          "description": "External user which contacted to us.\nId will be from external service.\nName will be from external service."
        },
        "app": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "App (Text-Gateway) used to connect the IM client.\nId will be internal id of gateway.\nName will be name of the gateway."
        },
        "protocol": {
          "type": "string",
          "description": "Protocol used to connect the IM client."
        },
        "via": {
          "type": "string",
          "description": "[Via] App(-specific) peer(-id) to connect[from] the IM client."
        }
      },
      "description": "A contact's [I]nstant[M]essaging client."
    },
    "contactsIMClientList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsIMClient"
          },
          "description": "IMClient dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      }
    },
    "contactsImageSize": {
      "type": "object",
      "properties": {
        "width": {
          "type": "integer",
          "format": "int32",
          "title": "Image width"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "title": "Image height"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "Size in bytes"
        }
      }
    },
    "contactsInputComment": {
      "type": "object",
      "example": {
        "text": "This is a new note about the contact's recent activity. So ..."
      },
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resorce."
        },
        "text": {
          "type": "string",
          "description": "NEW Text of the comment."
        },
        "format": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CommentFormat"
          },
          "description": "NEW Text components styling format."
        }
      },
      "required": [
        "text"
      ]
    },
    "contactsInputCondition": {
      "type": "object",
      "properties": {
        "expression": {
          "type": "string",
          "description": "The query or condition expression used to evaluate the group."
        },
        "group": {
          "type": "string",
          "format": "int64",
          "description": "The ID of the static group that should be assigned if the condition is met."
        },
        "assignee": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The ID of the assignee that should be assigned if the condition is met (optional)."
        },
        "position": {
          "$ref": "#/definitions/contactsPosition",
          "description": "The position of the condition in the group."
        }
      },
      "description": "Input message for creating/updating a condition."
    },
    "contactsInputContact": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resorce."
        },
        "name": {
          "$ref": "#/definitions/contactsInputName",
          "title": "The Contact's name. Singleton"
        },
        "about": {
          "type": "string",
          "description": "BIO. Short description about the Contact person.\nOPTIONAL. Multi-lined text."
        },
        "photos": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputPhoto"
          },
          "description": "Output only. The Contact's photo(s).",
          "readOnly": true
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputLabel"
          },
          "description": "The Contact's associated label(s)."
        },
        "emails": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputEmailAddress"
          },
          "description": "The Contact's email address(es)."
        },
        "phones": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputPhoneNumber"
          },
          "description": "The Contact's phone numbers."
        },
        "managers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputManager"
          },
          "description": "The Contact's internal manager(s)."
        },
        "comments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputComment"
          },
          "description": "Publish NEW comment(s) for this Contact."
        },
        "languages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputLanguage"
          },
          "description": "A Contact's locale preference(s)."
        },
        "timezones": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputTimezone"
          },
          "description": "The Contact's timezone preference(s)."
        },
        "imclients": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputIMClient"
          },
          "description": "The contact's [I]nstant[M]essaging clients."
        },
        "variables": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputVariable"
          },
          "description": "Arbitrary client data that is populated by clients."
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsInputContactGroup"
          },
          "description": "The Contact's associated group(s)."
        }
      },
      "description": "The Contact principal input."
    },
    "contactsInputContactGroup": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resource."
        },
        "group": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Group of contacts associated."
        }
      },
      "description": "An input of the Contact's groups.",
      "required": [
        "etag"
      ]
    },
    "contactsInputDynamicCondition": {
      "type": "object",
      "properties": {
        "expression": {
          "type": "string",
          "description": "The query or condition expression used to evaluate the group."
        },
        "group": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The ID of the static group that should be assigned if the condition is met."
        },
        "assignee": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The ID of the assignee that should be assigned if the condition is met (optional)."
        }
      },
      "title": "Dynamic Group condition"
    },
    "contactsInputEmailAddress": {
      "type": "object",
      "example": {
        "etag": "1679792219687",
        "verified": false,
        "primary": true,
        "email": "user@domain",
        "type": {
          "name": "personal"
        }
      },
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resorce."
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates whether this phone number is default within other channels of the same type(phone)."
        },
        "verified": {
          "type": "boolean",
          "title": "Indicate whether Contact, as a Person, realy owns this associated phone number.\nIn other words: whether Contact is reachable thru this 'email' communication channel ?"
        },
        "email": {
          "type": "string",
          "description": "The email address."
        },
        "type": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "title": "The type of the email address.\nLookup value from CommunicationType dictionary.\nThe type can be custom or one of these predefined values:\n- home\n- work\n- other"
        }
      },
      "description": "Input of the Contact's email address.",
      "required": [
        "email"
      ]
    },
    "contactsInputGroup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The new name of the group."
        },
        "description": {
          "type": "string",
          "description": "The new description of the group."
        },
        "enabled": {
          "type": "boolean",
          "description": "The new enabled status of the group."
        }
      },
      "title": "Input message for creating/updating a group"
    },
    "contactsInputIMClient": {
      "type": "object",
      "properties": {
        "protocol": {
          "type": "string"
        },
        "created_by": {
          "type": "string",
          "description": "Id of Agent created this IM client."
        },
        "external_user": {
          "type": "string",
          "title": "External user id"
        },
        "gateway_id": {
          "type": "string",
          "description": "App (Text-Gateway) used to connect the IM client."
        },
        "via": {
          "type": "string",
          "description": "[Via] App(-specific) peer(-id) to connect[from] the IM client."
        }
      },
      "description": "Input of the contact IM client."
    },
    "contactsInputLabel": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resorce."
        },
        "label": {
          "type": "string",
          "description": "REQUIRED. Hashtag value;\nNOTE: Keep in mind, hashtags are not case-sensitive,\nbut adding capital letters does make them easier to read:\n#MakeAWish vs. #makeawish."
        }
      },
      "description": "A Contact's associated Tag.\nOutput purpose only.",
      "required": [
        "tag"
      ]
    },
    "contactsInputLanguage": {
      "type": "object",
      "example": {
        "primary": false,
        "tag": "uk"
      },
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing association."
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates whether this association must be default\namong others of the same type."
        },
        "tag": {
          "type": "string",
          "title": "NEW, well-formed IETF BCP 47 language tag representing the locale.\nhttps://www.rfc-editor.org/info/bcp47"
        }
      },
      "description": "An input of the Contact's language.",
      "required": [
        "etag"
      ]
    },
    "contactsInputManager": {
      "type": "object",
      "example": {
        "primary": true,
        "user": {
          "id": "357",
          "name": "Bruce Wayne"
        }
      },
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resource."
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates whether this association must be default among others."
        },
        "user": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Responsible User."
        }
      },
      "required": [
        "etag"
      ]
    },
    "contactsInputName": {
      "type": "object",
      "properties": {
        "verified": {
          "type": "boolean",
          "description": "Indicate whether Contact, as a Person, realy owns this associated name."
        },
        "given_name": {
          "type": "string",
          "title": "OPTIONAL. Given name(s) or first name(s) of the End-User.\nNote that in some cultures, people can have multiple given names;\nall can be present, with the names being separated by space characters.\nhttps://openid.net/specs/openid-connect-core-1_0.html#StandardClaims #given_name"
        },
        "middle_name": {
          "type": "string",
          "description": "OPTIONAL. Middle name(s) of the End-User.\nNote that in some cultures, people can have multiple middle names;\nall can be present, with the names being separated by space characters.\nAlso note that in some cultures, middle names are not used."
        },
        "family_name": {
          "type": "string",
          "title": "OPTIONAL. Surname(s) or last name(s) of the End-User.\nNote that in some cultures, people can have multiple family names or no family name;\nall can be present, with the names being separated by space characters.\nhttps://openid.net/specs/openid-connect-core-1_0.html#StandardClaims #family_name"
        },
        "common_name": {
          "type": "string",
          "description": "REQUIRED. End-User's full name in displayable form\nincluding all name parts, possibly including titles and suffixes,\nordered according to the End-User's locale and preferences."
        }
      }
    },
    "contactsInputPhoneNumber": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resorce."
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates whether this phone number is default within other channels of the same type(phone)."
        },
        "verified": {
          "type": "boolean",
          "title": "Indicate whether Contact, as a Person, realy owns this associated phone number.\nIn other words: whether Contact is reachable thru this 'phone' communication channel ?"
        },
        "number": {
          "type": "string",
          "description": "The phone number."
        },
        "type": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "title": "The type of the phone number.\nReference on CommunicationType dictionary.\nUsed for outbound routing while dialup a phone number.\nThe type can be custom or one of these predefined values:\n- home\n- work\n- mobile\n- homeFax\n- workFax\n- otherFax\n- pager\n- workMobile\n- workPager\n- main\n- googleVoice\n- other"
        }
      },
      "description": "Input of the contact phone number.",
      "required": [
        "number"
      ]
    },
    "contactsInputPhoto": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing association."
        },
        "primary": {
          "type": "boolean",
          "description": "True if the photo is a default photo; false if the photo is a user-provided photo."
        },
        "photo_id": {
          "type": "string",
          "format": "int64",
          "title": "File unique ID within 'storage' service"
        },
        "photo_url": {
          "type": "string",
          "title": "The URL of the photo.\nYou can change the desired size by appending\na query parameter sz={size} at the end of the url,\nwhere {size} is the size in pixels.\nExample: https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50"
        }
      },
      "description": "Input of the photo.",
      "required": [
        "file_url"
      ]
    },
    "contactsInputTimezone": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resource."
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates whether this association must be default among others."
        },
        "timezone": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timezone dictionary reference value associated."
        }
      },
      "description": "An input of the Contact's timezones.",
      "required": [
        "etag"
      ]
    },
    "contactsInputVariable": {
      "type": "object",
      "example": {
        "key": "var_rename",
        "value": [
          "string_item",
          [
            3,
            7
          ],
          false,
          null
        ]
      },
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resorce."
        },
        "key": {
          "type": "string",
          "description": "NEW Key.",
          "pattern": "^\\w+$"
        },
        "value": {
          "description": "NEW Value."
        }
      },
      "description": "Input of the Contact's variable.",
      "required": [
        "key"
      ]
    },
    "contactsLabelInfo": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "Label tag.\n\nCount of sources.\nint32 count = 2;\n Sources of Contacts assigned.\nrepeated string sources = 3;"
        }
      },
      "title": "LabelInfo about the Label's tag"
    },
    "contactsLabelList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcontactsLabel"
          },
          "description": "Label(s) dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page number of partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "LabelList dataset.\nNOTE: Edge represents connection between two nodes.\nSo this ContactLabels.data are always subordinate to some contact.id."
    },
    "contactsLabelTags": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsLabelInfo"
          },
          "title": "Labels info dataset"
        },
        "sources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcontactsLookup"
          },
          "title": "Contact sources dataset"
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page number of partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Next page available ?"
        }
      },
      "description": "LabelTags dataset list of label's info."
    },
    "contactsLanguage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates whether this association is the default\namong others of the same type."
        },
        "tag": {
          "type": "string",
          "title": "The well-formed IETF BCP 47 language tag representing the locale.\nhttps://www.rfc-editor.org/info/bcp47"
        },
        "code": {
          "type": "string",
          "title": "uk              ; golang.org/x/text/language.MustParse(s).Base()"
        },
        "lang": {
          "type": "string",
          "title": "Ukrainian       ; golang.org/x/text/language/display.English.Languages().Name(tag)"
        },
        "name": {
          "type": "string",
          "title": "українська      ; golang.org/x/text/language/display.Self().Name(tag)"
        },
        "region": {
          "type": "string",
          "title": "UA              ; golang.org/x/text/language.MustParse(s).Region()"
        },
        "script": {
          "type": "string",
          "title": "Cyrl; (Cyrillic); golang.org/x/text/language.MustParse(s).Script()"
        }
      },
      "description": "A Contact's locale preference.\nOutput purpose only."
    },
    "contactsLanguageList": {
      "type": "object",
      "example": {
        "data": [
          {
            "id": "7",
            "ver": "3",
            "etag": "FqaTCDLbhpaoUreL",
            "created_at": "1680268507698",
            "created_by": {
              "id": "34",
              "name": "John Doe"
            },
            "updated_at": "1680516785357",
            "updated_by": {
              "name": "Jane Lee (deleted)"
            },
            "primary": true,
            "tag": "uk-UA",
            "code": "uk",
            "lang": "Ukrainian",
            "name": "українська",
            "region": "UA",
            "script": "Cyrl"
          }
        ],
        "page": 1,
        "next": true
      },
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsLanguage"
          },
          "description": "Page of the Contact's Language(s) dataset."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "Page number of partial result dataset records."
        },
        "next": {
          "type": "boolean",
          "title": "Next indicate whether there are more result records(page+) available.\nIf set - next page is available with query ?size=$(data.length)\u0026page=$(page++)"
        }
      },
      "description": "LabelsData\nNOTE: Edge represents connection between two nodes.\nSo this ContactLabels.data are always subordinate to some contact.id."
    },
    "contactsLocateConditionResponse": {
      "type": "object",
      "properties": {
        "condition": {
          "$ref": "#/definitions/contactsCondition"
        }
      },
      "description": "Response message for locating a condition by ID."
    },
    "contactsLocateDynamicGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/contactsDynamicGroup"
        }
      },
      "description": "Response message for locating a dynamic group by ID."
    },
    "contactsLocateGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/webitelcontactsGroup",
          "description": "The located group."
        }
      },
      "description": "Response message for locating a group."
    },
    "contactsManager": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates whether this association is the default\namong others of the same type."
        },
        "user": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Responsible User."
        }
      },
      "description": "Manager. The Contact's responsible User."
    },
    "contactsManagerList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsManager"
          },
          "description": "Manager dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "Manager dataset."
    },
    "contactsMediaAttribute": {
      "type": "object",
      "properties": {
        "image": {
          "$ref": "#/definitions/MediaAttributeImage"
        },
        "audio": {
          "$ref": "#/definitions/MediaAttributeAudio"
        },
        "video": {
          "$ref": "#/definitions/MediaAttributeVideo"
        },
        "filename": {
          "type": "string"
        }
      }
    },
    "contactsName": {
      "type": "object",
      "properties": {
        "verified": {
          "type": "boolean",
          "description": "Indicate whether Contact, as a Person, realy owns this associated name."
        },
        "given_name": {
          "type": "string",
          "title": "OPTIONAL. Given name(s) or first name(s) of the End-User.\nNote that in some cultures, people can have multiple given names;\nall can be present, with the names being separated by space characters.\nhttps://openid.net/specs/openid-connect-core-1_0.html#StandardClaims #given_name"
        },
        "middle_name": {
          "type": "string",
          "description": "OPTIONAL. Middle name(s) of the End-User.\nNote that in some cultures, people can have multiple middle names;\nall can be present, with the names being separated by space characters.\nAlso note that in some cultures, middle names are not used."
        },
        "family_name": {
          "type": "string",
          "title": "OPTIONAL. Surname(s) or last name(s) of the End-User.\nNote that in some cultures, people can have multiple family names or no family name;\nall can be present, with the names being separated by space characters.\nhttps://openid.net/specs/openid-connect-core-1_0.html#StandardClaims #family_name"
        },
        "common_name": {
          "type": "string",
          "description": "REQUIRED. End-User's full name in displayable form\nincluding all name parts, possibly including titles and suffixes,\nordered according to the End-User's locale and preferences."
        }
      },
      "description": "A contact's name.\nIf the name is a mononym, the family name is empty.\n\nInspired:\nhttps://openid.net/specs/openid-connect-core-1_0.html#StandardClaims\nhttps://developers.google.com/people/api/rest/v1/people#name"
    },
    "contactsPhoneList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsPhoneNumber"
          },
          "description": "PhoneNumber dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "PhoneNumber dataset."
    },
    "contactsPhoneNumber": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates whether this phone number is default within other channels of the same type(phone)."
        },
        "verified": {
          "type": "boolean",
          "title": "Indicate whether Contact, as a Person, realy owns this associated phone number.\nIn other words: whether Contact is reachable thru this 'phone' communication channel ?"
        },
        "number": {
          "type": "string",
          "description": "The phone number."
        },
        "type": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "title": "The type of the phone number.\nReference on CommunicationType dictionary.\nUsed for outbound routing while dialup a phone number.\nThe type can be custom or one of these predefined values:\n- home\n- work\n- mobile\n- homeFax\n- workFax\n- otherFax\n- pager\n- workMobile\n- workPager\n- main\n- googleVoice\n- other"
        }
      },
      "description": "The Contact's phone number."
    },
    "contactsPhoto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "primary": {
          "type": "boolean",
          "description": "True if the photo is a default photo; false if the photo is a user-provided photo."
        },
        "photo_id": {
          "type": "string",
          "format": "int64",
          "title": "File unique ID within 'storage' service"
        },
        "photo_url": {
          "type": "string",
          "title": "The URL of the photo.\nYou can change the desired size by appending\na query parameter sz={size} at the end of the url,\nwhere {size} is the size in pixels.\nExample: https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50"
        }
      },
      "description": "A contact's photo.\nA picture shown next to the contact's name\nto help others recognize the contact."
    },
    "contactsPhotoList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsPhoto"
          },
          "description": "Photo dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "Photo dataset."
    },
    "contactsPosition": {
      "type": "object",
      "properties": {
        "cond_up": {
          "type": "string",
          "format": "int64",
          "title": "The current position of the condition in the list.\nif we set zero (0) index position -- set only cond_down -- cond_up should be ZERO"
        },
        "cond_down": {
          "type": "string",
          "format": "int64",
          "title": "The target position where the condition should be moved.\nif we set last (n) index position -- set only cond_up -- cond_down should be ZERO"
        }
      },
      "description": "Position details for conditions in the group."
    },
    "contactsTimeRange": {
      "type": "object",
      "properties": {
        "since": {
          "type": "string",
          "format": "int64",
          "description": "Since timestamp(milli). Not before."
        },
        "until": {
          "type": "string",
          "format": "int64",
          "description": "Until timestamp(milli). Not after."
        }
      }
    },
    "contactsTimelineEventType": {
      "type": "string",
      "enum": [
        "chat",
        "call",
        "email"
      ],
      "default": "chat"
    },
    "contactsTimezoneList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcontactsTimezone"
          },
          "description": "Timezone dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "Timezone dataset.\nNOTE: Edge represents connection between two nodes.\nSo this ContactTimezones.data are always subordinate to some contact.id."
    },
    "contactsUploadMediaRequestInputFile": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "meta": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsMediaAttribute"
          }
        }
      },
      "title": "File Metadata"
    },
    "contactsUploadMediaResponse": {
      "type": "object",
      "properties": {
        "file": {
          "$ref": "#/definitions/webitelcontactsMediaFile",
          "title": "START|COMPLETE"
        },
        "data": {
          "$ref": "#/definitions/contactsUploadMediaResponseProgress",
          "title": "PROGRESS"
        }
      }
    },
    "contactsUploadMediaResponseProgress": {
      "type": "object",
      "properties": {
        "percent": {
          "type": "number",
          "format": "float",
          "title": "0..100"
        }
      },
      "title": "Upload progress"
    },
    "contactsVariable": {
      "type": "object",
      "example": {
        "id": "6",
        "ver": "2",
        "etag": "FqaTCDLbhpaoUreL",
        "created_at": "1680268507698",
        "created_by": {
          "id": "34",
          "name": "John Doe"
        },
        "updated_at": "1680516785357",
        "updated_by": {
          "name": "Ja Lee (deleted)"
        },
        "key": "var_complex",
        "value": {
          "inner_var": null,
          "value_arr": [
            "string",
            [
              null
            ],
            false,
            1
          ]
        }
      },
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "key": {
          "type": "string",
          "description": "Key name of the variable."
        },
        "value": {
          "description": "JSON value of the variable."
        }
      },
      "description": "The Contact's variable.\nArbitrary data that is populated by users or clients.\nDuplicate keys and values are allowed."
    },
    "contactsVariableList": {
      "type": "object",
      "example": {
        "data": [
          {
            "id": "4",
            "etag": "FqaTCDLbhpaoUreL",
            "created_at": "1680268507698",
            "created_by": {
              "id": "34",
              "name": "John Doe"
            },
            "updated_at": "1680268507698",
            "updated_by": {
              "id": "34",
              "name": "John Doe"
            },
            "key": "my_string",
            "value": "string_value"
          },
          {
            "id": "6",
            "ver": "2",
            "etag": "ogTsuZAIA1CcEZGC",
            "created_at": "1680268507698",
            "created_by": {
              "id": "34",
              "name": "John Doe"
            },
            "updated_at": "1680516785357",
            "updated_by": {
              "name": "Ja Lee (deleted)"
            },
            "key": "var_complex",
            "value": {
              "inner_var": null,
              "value_arr": [
                "string",
                [
                  null
                ],
                false,
                1
              ]
            }
          }
        ],
        "page": 1,
        "next": true
      },
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsVariable"
          },
          "description": "Variable dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "Variable dataset."
    },
    "contactsVideoSize": {
      "type": "object",
      "properties": {
        "width": {
          "type": "integer",
          "format": "int64",
          "title": "Video width"
        },
        "height": {
          "type": "integer",
          "format": "int64",
          "title": "Video height"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "title": "File size in bytes"
        },
        "start_ts": {
          "type": "integer",
          "format": "int64",
          "title": "Timestamp that should be shown as static preview to the user (seconds)"
        }
      },
      "title": "Animated profile picture in MPEG4 format"
    },
    "engineAcceptOfDay": {
      "type": "object",
      "properties": {
        "day": {
          "type": "integer",
          "format": "int32"
        },
        "start_time_of_day": {
          "type": "integer",
          "format": "int32"
        },
        "end_time_of_day": {
          "type": "integer",
          "format": "int32"
        },
        "disabled": {
          "type": "boolean"
        }
      }
    },
    "engineActiveCall": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "int64"
        },
        "type": {
          "type": "string"
        },
        "parent_id": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/engineLookup"
        },
        "extension": {
          "type": "string"
        },
        "gateway": {
          "$ref": "#/definitions/engineLookup"
        },
        "direction": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        },
        "from": {
          "$ref": "#/definitions/engineEndpoint"
        },
        "to": {
          "$ref": "#/definitions/engineEndpoint"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "answered_at": {
          "type": "string",
          "format": "int64"
        },
        "bridged_at": {
          "type": "string",
          "format": "int64"
        },
        "duration": {
          "type": "integer",
          "format": "int32"
        },
        "hold_sec": {
          "type": "integer",
          "format": "int32"
        },
        "wait_sec": {
          "type": "integer",
          "format": "int32"
        },
        "bill_sec": {
          "type": "integer",
          "format": "int32"
        },
        "queue": {
          "$ref": "#/definitions/engineLookup"
        },
        "member": {
          "$ref": "#/definitions/engineLookup"
        },
        "team": {
          "$ref": "#/definitions/engineLookup"
        },
        "agent": {
          "$ref": "#/definitions/engineLookup"
        },
        "joined_at": {
          "type": "string",
          "format": "int64"
        },
        "leaving_at": {
          "type": "string",
          "format": "int64"
        },
        "reporting_at": {
          "type": "string",
          "format": "int64"
        },
        "queue_bridged_at": {
          "type": "string",
          "format": "int64"
        },
        "queue_wait_sec": {
          "type": "integer",
          "format": "int32"
        },
        "queue_duration_sec": {
          "type": "integer",
          "format": "int32"
        },
        "reporting_sec": {
          "type": "integer",
          "format": "int32"
        },
        "display": {
          "type": "string"
        },
        "supervisor": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "blind_transfer": {
          "type": "string"
        },
        "bridged_id": {
          "type": "string"
        }
      }
    },
    "engineActivityWorkspaceWidgetResponse": {
      "type": "object",
      "properties": {
        "utilization": {
          "type": "number",
          "format": "float"
        },
        "occupancy": {
          "type": "number",
          "format": "float"
        },
        "call_abandoned": {
          "type": "integer",
          "format": "int32"
        },
        "call_handled": {
          "type": "integer",
          "format": "int32"
        },
        "avg_talk_sec": {
          "type": "number",
          "format": "float"
        },
        "avg_hold_sec": {
          "type": "number",
          "format": "float"
        },
        "chat_accepts": {
          "type": "integer",
          "format": "int32"
        },
        "chat_aht": {
          "type": "number",
          "format": "float"
        },
        "call_missed": {
          "type": "integer",
          "format": "int32"
        },
        "call_inbound": {
          "type": "integer",
          "format": "int32"
        },
        "score_required_avg": {
          "type": "number",
          "format": "float"
        },
        "score_optional_avg": {
          "type": "number",
          "format": "float"
        },
        "score_count": {
          "type": "string",
          "format": "int64"
        },
        "score_required_sum": {
          "type": "number",
          "format": "float"
        },
        "score_optional_sum": {
          "type": "number",
          "format": "float"
        },
        "sum_talk_sec": {
          "type": "string",
          "format": "int64"
        },
        "voice_mail": {
          "type": "integer",
          "format": "int32"
        },
        "available": {
          "type": "integer",
          "format": "int32"
        },
        "online": {
          "type": "integer",
          "format": "int32"
        },
        "processing": {
          "type": "integer",
          "format": "int32"
        },
        "task_accepts": {
          "type": "integer",
          "format": "int32"
        },
        "queue_talk_sec": {
          "type": "integer",
          "format": "int32"
        },
        "call_queue_missed": {
          "type": "integer",
          "format": "int32"
        },
        "call_inbound_queue": {
          "type": "integer",
          "format": "int32"
        },
        "call_dialer_queue": {
          "type": "integer",
          "format": "int32"
        },
        "call_manual": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "engineAgent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "user": {
          "$ref": "#/definitions/engineLookup"
        },
        "status": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "last_status_change": {
          "type": "string",
          "format": "int64"
        },
        "progressive_count": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "channel": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAgentChannel"
          }
        },
        "status_duration": {
          "type": "string",
          "format": "int64"
        },
        "greeting_media": {
          "$ref": "#/definitions/engineLookup"
        },
        "allow_channels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "chat_count": {
          "type": "integer",
          "format": "int64"
        },
        "supervisor": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "team": {
          "$ref": "#/definitions/engineLookup"
        },
        "region": {
          "$ref": "#/definitions/engineLookup"
        },
        "auditor": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "is_supervisor": {
          "type": "boolean"
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "extension": {
          "type": "string"
        },
        "task_count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "engineAgentCallStatistics": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "abandoned": {
          "type": "integer",
          "format": "int32"
        },
        "handles": {
          "type": "integer",
          "format": "int32"
        },
        "sum_talk_sec": {
          "type": "number",
          "format": "float"
        },
        "avg_talk_sec": {
          "type": "number",
          "format": "float"
        },
        "min_talk_sec": {
          "type": "number",
          "format": "float"
        },
        "max_talk_sec": {
          "type": "number",
          "format": "float"
        },
        "sum_hold_sec": {
          "type": "number",
          "format": "float"
        },
        "avg_hold_sec": {
          "type": "number",
          "format": "float"
        },
        "min_hold_sec": {
          "type": "number",
          "format": "float"
        },
        "max_hold_sec": {
          "type": "number",
          "format": "float"
        },
        "utilization": {
          "type": "number",
          "format": "float"
        },
        "occupancy": {
          "type": "number",
          "format": "float"
        },
        "chat_accepts": {
          "type": "integer",
          "format": "int32"
        },
        "chat_aht": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "engineAgentCallStatisticsList": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAgentCallStatistics"
          }
        }
      }
    },
    "engineAgentChannel": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "joined_at": {
          "type": "string",
          "format": "int64"
        },
        "timeout": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "engineAgentInQueue": {
      "type": "object",
      "properties": {
        "queue": {
          "$ref": "#/definitions/engineLookup"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "integer",
          "format": "int32"
        },
        "strategy": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "count_members": {
          "type": "integer",
          "format": "int32"
        },
        "waiting_members": {
          "type": "integer",
          "format": "int32"
        },
        "active_members": {
          "type": "integer",
          "format": "int32"
        },
        "agents": {
          "$ref": "#/definitions/AgentInQueueAgentsInQueue"
        },
        "max_member_limit": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "engineAgentInQueueStatistics": {
      "type": "object",
      "properties": {
        "queue": {
          "$ref": "#/definitions/engineLookup"
        },
        "statistics": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AgentInQueueStatisticsAgentInQueueStatisticsItem"
          }
        }
      }
    },
    "engineAgentInQueueStatisticsList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAgentInQueueStatistics"
          }
        }
      }
    },
    "engineAgentInTeam": {
      "type": "object",
      "properties": {
        "team": {
          "$ref": "#/definitions/engineLookup"
        },
        "strategy": {
          "type": "string"
        }
      }
    },
    "engineAgentPauseCause": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "name": {
          "type": "string"
        },
        "limit_min": {
          "type": "integer",
          "format": "int64"
        },
        "allow_supervisor": {
          "type": "boolean"
        },
        "allow_agent": {
          "type": "boolean"
        },
        "allow_admin": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "engineAgentSetStateResponse": {
      "type": "object"
    },
    "engineAgentSkill": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "agent": {
          "$ref": "#/definitions/engineLookup"
        },
        "skill": {
          "$ref": "#/definitions/engineLookup"
        },
        "capacity": {
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "engineAgentSkillItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "skill": {
          "$ref": "#/definitions/engineLookup"
        },
        "capacity": {
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "engineAgentState": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "channel": {
          "type": "string"
        },
        "joined_at": {
          "type": "string",
          "format": "int64"
        },
        "state": {
          "type": "string"
        },
        "payload": {
          "type": "string"
        },
        "duration": {
          "type": "string",
          "format": "int64"
        },
        "queue": {
          "$ref": "#/definitions/engineLookup"
        },
        "agent": {
          "$ref": "#/definitions/engineLookup"
        },
        "pause_cause": {
          "type": "string"
        }
      }
    },
    "engineAgentStatsStatistic": {
      "type": "object",
      "properties": {
        "agent_id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "status_duration": {
          "type": "string",
          "format": "int64"
        },
        "user": {
          "$ref": "#/definitions/engineLookup"
        },
        "extension": {
          "type": "string"
        },
        "team": {
          "$ref": "#/definitions/engineLookup"
        },
        "queues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "online": {
          "type": "string",
          "format": "int64"
        },
        "offline": {
          "type": "string",
          "format": "int64"
        },
        "pause": {
          "type": "string",
          "format": "int64"
        },
        "utilization": {
          "type": "number",
          "format": "float"
        },
        "call_time": {
          "type": "string",
          "format": "int64"
        },
        "handles": {
          "type": "integer",
          "format": "int32"
        },
        "missed": {
          "type": "integer",
          "format": "int32"
        },
        "chat_count": {
          "type": "integer",
          "format": "int32"
        },
        "max_bridged_at": {
          "type": "string",
          "format": "int64"
        },
        "max_offering_at": {
          "type": "string",
          "format": "int64"
        },
        "active_call_id": {
          "type": "string"
        },
        "transferred": {
          "type": "integer",
          "format": "int64"
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "supervisor": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "auditor": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "pause_cause": {
          "type": "string"
        },
        "occupancy": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "engineAgentStatusStatisticItem": {
      "type": "object",
      "properties": {
        "agent_id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "status_duration": {
          "type": "string",
          "format": "int64"
        },
        "user": {
          "$ref": "#/definitions/engineLookup"
        },
        "extension": {
          "type": "string"
        },
        "team": {
          "$ref": "#/definitions/engineLookup"
        },
        "supervisor": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "auditor": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "region": {
          "$ref": "#/definitions/engineLookup"
        },
        "progressive_count": {
          "type": "integer",
          "format": "int64"
        },
        "chat_count": {
          "type": "integer",
          "format": "int64"
        },
        "pause_cause": {
          "type": "string"
        },
        "online": {
          "type": "string",
          "format": "int64"
        },
        "offline": {
          "type": "string",
          "format": "int64"
        },
        "pause": {
          "type": "string",
          "format": "int64"
        },
        "score_required_avg": {
          "type": "number",
          "format": "float"
        },
        "score_optional_avg": {
          "type": "number",
          "format": "float"
        },
        "score_count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "engineAgentTeam": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "strategy": {
          "type": "string"
        },
        "max_no_answer": {
          "type": "integer",
          "format": "int32"
        },
        "no_answer_delay_time": {
          "type": "integer",
          "format": "int32"
        },
        "wrap_up_time": {
          "type": "integer",
          "format": "int32"
        },
        "call_timeout": {
          "type": "integer",
          "format": "int32"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "admin": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "invite_chat_timeout": {
          "type": "integer",
          "format": "int32"
        },
        "task_accept_timeout": {
          "type": "integer",
          "format": "int32"
        },
        "forecast_calculation": {
          "$ref": "#/definitions/engineLookup"
        }
      }
    },
    "engineAgentTodayStatisticsResponse": {
      "type": "object",
      "properties": {
        "utilization": {
          "type": "number",
          "format": "float"
        },
        "occupancy": {
          "type": "number",
          "format": "float"
        },
        "call_abandoned": {
          "type": "integer",
          "format": "int32"
        },
        "call_handled": {
          "type": "integer",
          "format": "int32"
        },
        "avg_talk_sec": {
          "type": "number",
          "format": "float"
        },
        "avg_hold_sec": {
          "type": "number",
          "format": "float"
        },
        "chat_accepts": {
          "type": "integer",
          "format": "int32"
        },
        "chat_aht": {
          "type": "number",
          "format": "float"
        },
        "call_missed": {
          "type": "integer",
          "format": "int32"
        },
        "call_inbound": {
          "type": "integer",
          "format": "int32"
        },
        "score_required_avg": {
          "type": "number",
          "format": "float"
        },
        "score_optional_avg": {
          "type": "number",
          "format": "float"
        },
        "score_count": {
          "type": "string",
          "format": "int64"
        },
        "score_required_sum": {
          "type": "number",
          "format": "float"
        },
        "score_optional_sum": {
          "type": "number",
          "format": "float"
        },
        "sum_talk_sec": {
          "type": "string",
          "format": "int64"
        },
        "voice_mail": {
          "type": "integer",
          "format": "int32"
        },
        "available": {
          "type": "integer",
          "format": "int32"
        },
        "online": {
          "type": "integer",
          "format": "int32"
        },
        "processing": {
          "type": "integer",
          "format": "int32"
        },
        "task_accepts": {
          "type": "integer",
          "format": "int32"
        },
        "queue_talk_sec": {
          "type": "integer",
          "format": "int32"
        },
        "call_queue_missed": {
          "type": "integer",
          "format": "int32"
        },
        "call_inbound_queue": {
          "type": "integer",
          "format": "int32"
        },
        "call_dialer_queue": {
          "type": "integer",
          "format": "int32"
        },
        "call_manual": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "engineAgentUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "engineAggregateHistoryCallRequest": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "q": {
          "type": "string"
        },
        "aggs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAggregateRequest"
          }
        },
        "created_at": {
          "$ref": "#/definitions/engineFilterBetween"
        },
        "user_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "agent_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "queue_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "team_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "member_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "gateway_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "duration": {
          "$ref": "#/definitions/engineFilterBetween"
        },
        "skip_parent": {
          "type": "boolean"
        },
        "parent_id": {
          "type": "string"
        },
        "cause": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "has_file": {
          "type": "boolean"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "number": {
          "type": "string"
        },
        "direction": {
          "type": "string"
        },
        "answered_at": {
          "$ref": "#/definitions/engineFilterBetween"
        },
        "missed": {
          "type": "boolean"
        },
        "stored_at": {
          "$ref": "#/definitions/engineFilterBetween"
        },
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "transfer_from": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "transfer_to": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dependency_id": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "amd_result": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fts": {
          "type": "string"
        },
        "directions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "has_transcript": {
          "type": "boolean"
        },
        "agent_description": {
          "type": "string"
        },
        "contact_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        }
      }
    },
    "engineAggregateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "group": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAggregateRequestGroup"
          }
        },
        "min": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "max": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sum": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "avg": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "count": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sort": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "engineAggregateRequestGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "interval": {
          "type": "string"
        },
        "aggregate": {
          "type": "string"
        },
        "field": {
          "type": "string"
        },
        "top": {
          "type": "integer",
          "format": "int32"
        },
        "desc": {
          "type": "boolean"
        }
      }
    },
    "engineAggregateResult": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "data": {}
      }
    },
    "engineAttempt": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "state": {
          "type": "string"
        },
        "last_state_change": {
          "type": "string",
          "format": "int64"
        },
        "joined_at": {
          "type": "string",
          "format": "int64"
        },
        "offering_at": {
          "type": "string",
          "format": "int64"
        },
        "bridged_at": {
          "type": "string",
          "format": "int64"
        },
        "reporting_at": {
          "type": "string",
          "format": "int64"
        },
        "timeout": {
          "type": "string",
          "format": "int64"
        },
        "leaving_at": {
          "type": "string",
          "format": "int64"
        },
        "channel": {
          "type": "string"
        },
        "queue": {
          "$ref": "#/definitions/engineLookup"
        },
        "member": {
          "$ref": "#/definitions/engineLookup"
        },
        "member_call_id": {
          "type": "string"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "agent": {
          "$ref": "#/definitions/engineLookup"
        },
        "agent_call_id": {
          "type": "string"
        },
        "position": {
          "type": "integer",
          "format": "int32"
        },
        "resource": {
          "$ref": "#/definitions/engineLookup"
        },
        "bucket": {
          "$ref": "#/definitions/engineLookup"
        },
        "list": {
          "$ref": "#/definitions/engineLookup",
          "title": "black list ?"
        },
        "display": {
          "type": "string"
        },
        "destination": {
          "$ref": "#/definitions/engineMemberCommunication"
        },
        "result": {
          "type": "string"
        },
        "attempts": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "engineAttemptHistory": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "joined_at": {
          "type": "string",
          "format": "int64"
        },
        "offering_at": {
          "type": "string",
          "format": "int64"
        },
        "bridged_at": {
          "type": "string",
          "format": "int64"
        },
        "reporting_at": {
          "type": "string",
          "format": "int64"
        },
        "leaving_at": {
          "type": "string",
          "format": "int64"
        },
        "channel": {
          "type": "string"
        },
        "queue": {
          "$ref": "#/definitions/engineLookup"
        },
        "member": {
          "$ref": "#/definitions/engineLookup"
        },
        "member_call_id": {
          "type": "string"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "agent": {
          "$ref": "#/definitions/engineLookup"
        },
        "agent_call_id": {
          "type": "string"
        },
        "position": {
          "type": "integer",
          "format": "int32"
        },
        "resource": {
          "$ref": "#/definitions/engineLookup"
        },
        "bucket": {
          "$ref": "#/definitions/engineLookup"
        },
        "list": {
          "$ref": "#/definitions/engineLookup",
          "title": "black list ?"
        },
        "display": {
          "type": "string"
        },
        "destination": {
          "$ref": "#/definitions/engineMemberCommunication"
        },
        "result": {
          "type": "string"
        },
        "amd_result": {
          "type": "string"
        },
        "attempts": {
          "type": "integer",
          "format": "int32"
        },
        "offered_agents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        }
      }
    },
    "engineAttemptRenewalResultResponse": {
      "type": "object"
    },
    "engineAttemptResultResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "engineAuditForm": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "questions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineQuestion"
          }
        },
        "teams": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "editable": {
          "type": "boolean",
          "title": "bool archive = 11;"
        }
      }
    },
    "engineAuditQuestionType": {
      "type": "string",
      "enum": [
        "question_default",
        "question_score",
        "question_option",
        "question_yes"
      ],
      "default": "question_default"
    },
    "engineAuditRate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "form": {
          "$ref": "#/definitions/engineLookup"
        },
        "questions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineQuestion"
          }
        },
        "answers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineQuestionAnswer"
          }
        },
        "score_required": {
          "type": "number",
          "format": "float"
        },
        "score_optional": {
          "type": "number",
          "format": "float"
        },
        "comment": {
          "type": "string"
        },
        "rated_user": {
          "$ref": "#/definitions/engineLookup"
        },
        "select_yes_count": {
          "type": "string",
          "format": "int64"
        },
        "critical_count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "engineAvailableSystemSetting": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "engineBlindTransferCallResponse": {
      "type": "object"
    },
    "engineBucket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "engineCalendar": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "name": {
          "type": "string"
        },
        "start_at": {
          "type": "string",
          "format": "int64"
        },
        "end_at": {
          "type": "string",
          "format": "int64"
        },
        "timezone": {
          "$ref": "#/definitions/engineLookup"
        },
        "description": {
          "type": "string"
        },
        "accepts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAcceptOfDay"
          }
        },
        "excepts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineExceptDate"
          }
        },
        "specials": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAcceptOfDay"
          }
        }
      }
    },
    "engineCallAnnotation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "call_id": {
          "type": "string"
        },
        "created_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "note": {
          "type": "string"
        },
        "start_sec": {
          "type": "integer",
          "format": "int32"
        },
        "end_sec": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "engineCallFile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "format": "int64"
        },
        "mime_type": {
          "type": "string"
        },
        "start_at": {
          "type": "string",
          "format": "int64"
        },
        "stop_at": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "engineCallHold": {
      "type": "object",
      "properties": {
        "start": {
          "type": "string",
          "format": "int64"
        },
        "stop": {
          "type": "string",
          "format": "int64"
        },
        "sec": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "engineChatPlan": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "engineCommunicationChannels": {
      "type": "string",
      "enum": [
        "Undefined",
        "Phone",
        "Email",
        "Messaging"
      ],
      "default": "Undefined"
    },
    "engineCommunicationType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "channel": {
          "$ref": "#/definitions/engineCommunicationChannels"
        },
        "description": {
          "type": "string"
        },
        "default": {
          "type": "boolean"
        }
      }
    },
    "engineCommunicationTypeRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "channel": {
          "$ref": "#/definitions/engineCommunicationChannels"
        },
        "description": {
          "type": "string"
        },
        "default": {
          "type": "boolean"
        }
      }
    },
    "engineConfirmPushResponse": {
      "type": "object"
    },
    "engineCreateAgentPauseCauseRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "limit_min": {
          "type": "integer",
          "format": "int64"
        },
        "allow_supervisor": {
          "type": "boolean"
        },
        "allow_agent": {
          "type": "boolean"
        },
        "allow_admin": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "engineCreateAgentRequest": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/engineLookup"
        },
        "description": {
          "type": "string"
        },
        "progressive_count": {
          "type": "integer",
          "format": "int32"
        },
        "greeting_media": {
          "$ref": "#/definitions/engineLookup"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "allow_channels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "chat_count": {
          "type": "integer",
          "format": "int64"
        },
        "supervisor": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "team": {
          "$ref": "#/definitions/engineLookup"
        },
        "region": {
          "$ref": "#/definitions/engineLookup"
        },
        "auditor": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "is_supervisor": {
          "type": "boolean"
        },
        "task_count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "engineCreateAgentSkillBulkItem": {
      "type": "object",
      "properties": {
        "skill": {
          "$ref": "#/definitions/engineLookup"
        },
        "capacity": {
          "type": "integer",
          "format": "int32"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "engineCreateAgentSkillsResponse": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        }
      }
    },
    "engineCreateAgentTeamRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "strategy": {
          "type": "string"
        },
        "max_no_answer": {
          "type": "integer",
          "format": "int32"
        },
        "no_answer_delay_time": {
          "type": "integer",
          "format": "int32"
        },
        "wrap_up_time": {
          "type": "integer",
          "format": "int32"
        },
        "call_timeout": {
          "type": "integer",
          "format": "int32"
        },
        "admin": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "invite_chat_timeout": {
          "type": "integer",
          "format": "int32"
        },
        "task_accept_timeout": {
          "type": "integer",
          "format": "int32"
        },
        "forecast_calculation": {
          "$ref": "#/definitions/engineLookup"
        }
      }
    },
    "engineCreateAttemptResponse": {
      "type": "object",
      "properties": {
        "attempt_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "engineCreateAuditFormRateRequest": {
      "type": "object",
      "properties": {
        "form": {
          "$ref": "#/definitions/engineLookup"
        },
        "answers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineCreateQuestionAnswerRequest"
          }
        },
        "comment": {
          "type": "string"
        },
        "call_id": {
          "type": "string"
        }
      }
    },
    "engineCreateAuditFormRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "questions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineQuestion"
          }
        },
        "teams": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        }
      }
    },
    "engineCreateBucketRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "engineCreateCalendarRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "start_at": {
          "type": "string",
          "format": "int64"
        },
        "end_at": {
          "type": "string",
          "format": "int64"
        },
        "timezone": {
          "$ref": "#/definitions/engineLookup"
        },
        "description": {
          "type": "string"
        },
        "accepts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAcceptOfDay"
          }
        },
        "excepts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineExceptDate"
          }
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "specials": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAcceptOfDay"
          }
        }
      }
    },
    "engineCreateCallRequest": {
      "type": "object",
      "properties": {
        "from": {
          "$ref": "#/definitions/engineCreateCallRequestEndpointRequest"
        },
        "to": {
          "$ref": "#/definitions/engineCreateCallRequestEndpointRequest"
        },
        "destination": {
          "type": "string"
        },
        "params": {
          "$ref": "#/definitions/CreateCallRequestCallSettings"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "engineCreateCallRequestEndpointRequest": {
      "type": "object",
      "properties": {
        "app_id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "int64"
        },
        "extension": {
          "type": "string"
        }
      }
    },
    "engineCreateCallResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "engineCreateChatPlanRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "engineCreateEmailProfileRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "enabled": {
          "type": "boolean"
        },
        "smtp_host": {
          "type": "string"
        },
        "login": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "mailbox": {
          "type": "string"
        },
        "smtp_port": {
          "type": "integer",
          "format": "int32"
        },
        "imap_port": {
          "type": "integer",
          "format": "int32"
        },
        "imap_host": {
          "type": "string"
        },
        "fetch_interval": {
          "type": "integer",
          "format": "int32"
        },
        "auth_type": {
          "$ref": "#/definitions/engineEmailAuthType"
        },
        "listen": {
          "type": "boolean"
        },
        "params": {
          "$ref": "#/definitions/engineEmailProfileParams"
        }
      }
    },
    "engineCreateListRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "engineCreateMemberBulkItem": {
      "type": "object",
      "properties": {
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "expire_at": {
          "type": "string",
          "format": "int64"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "timezone": {
          "$ref": "#/definitions/engineLookup"
        },
        "communications": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineMemberCommunicationCreateRequest"
          }
        },
        "bucket": {
          "$ref": "#/definitions/engineLookup"
        },
        "min_offering_at": {
          "type": "string",
          "format": "int64"
        },
        "agent": {
          "$ref": "#/definitions/engineLookup"
        },
        "skill": {
          "$ref": "#/definitions/engineLookup"
        }
      }
    },
    "engineCreateOutboundResourceDisplayRequest": {
      "type": "object",
      "properties": {
        "resource_id": {
          "type": "string",
          "format": "int64"
        },
        "display": {
          "type": "string"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "engineCreateOutboundResourceGroupRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "strategy": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "communication": {
          "$ref": "#/definitions/engineLookup"
        },
        "time": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineOutboundResourceTimeRange"
          }
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "engineCreateOutboundResourceRequest": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "type": "boolean"
        },
        "rps": {
          "type": "integer",
          "format": "int32"
        },
        "reserve": {
          "type": "boolean"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "number": {
          "type": "string"
        },
        "max_successively_errors": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "error_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gateway": {
          "$ref": "#/definitions/engineLookup"
        },
        "description": {
          "type": "string"
        },
        "patterns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "failure_dial_delay": {
          "type": "integer",
          "format": "int64"
        },
        "parameters": {
          "$ref": "#/definitions/engineOutboundResourceParameters"
        }
      }
    },
    "engineCreatePresetQueryRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "preset": {},
        "section": {
          "type": "string"
        }
      }
    },
    "engineCreateQuestionAnswerRequest": {
      "type": "object",
      "properties": {
        "score": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "engineCreateQueueRequest": {
      "type": "object",
      "properties": {
        "strategy": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "payload": {},
        "calendar": {
          "$ref": "#/definitions/engineLookup"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "timeout": {
          "type": "integer",
          "format": "int32"
        },
        "dnc_list": {
          "$ref": "#/definitions/engineLookup"
        },
        "sec_locate_agent": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "integer",
          "format": "int32"
        },
        "team": {
          "$ref": "#/definitions/engineLookup"
        },
        "description": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "ringtone": {
          "$ref": "#/definitions/engineLookup"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "do_schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "after_schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "sticky_agent": {
          "type": "boolean"
        },
        "processing": {
          "type": "boolean",
          "title": "deprecated"
        },
        "processing_sec": {
          "type": "integer",
          "format": "int64",
          "title": "deprecated"
        },
        "processing_renewal_sec": {
          "type": "integer",
          "format": "int64",
          "title": "deprecated"
        },
        "form_schema": {
          "$ref": "#/definitions/engineLookup",
          "title": "deprecated"
        },
        "task_processing": {
          "$ref": "#/definitions/engineTaskProcessing"
        },
        "grantee": {
          "$ref": "#/definitions/engineLookup"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineTag"
          }
        }
      }
    },
    "engineCreateQuickReplyRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "queues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "teams": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "article": {
          "$ref": "#/definitions/engineLookup"
        }
      }
    },
    "engineCreateRegionRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "timezone": {
          "$ref": "#/definitions/engineLookup"
        }
      }
    },
    "engineCreateRoutingOutboundCallRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "pattern": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "engineCreateRoutingSchemaRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/engineRoutingSchemaType"
        },
        "schema": {},
        "payload": {},
        "debug": {
          "type": "boolean"
        },
        "editor": {
          "type": "boolean"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineSchemaTag"
          }
        }
      }
    },
    "engineCreateRoutingVariableRequest": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "engineCreateSchemaVariableRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "encrypt": {
          "type": "boolean"
        },
        "value": {}
      }
    },
    "engineCreateSkillAgentResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineSkillAgentItem"
          }
        }
      }
    },
    "engineCreateSkillRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "engineCreateSystemSettingRequest": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/engineSystemSettingName"
        },
        "value": {}
      }
    },
    "engineCreateTriggerRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/engineTriggerType"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "expression": {
          "type": "string"
        },
        "timezone": {
          "$ref": "#/definitions/engineLookup"
        },
        "timeout": {
          "type": "integer",
          "format": "int32"
        },
        "object": {
          "$ref": "#/definitions/engineTriggerObjectType"
        },
        "event": {
          "$ref": "#/definitions/engineTriggerEventType"
        }
      }
    },
    "engineCreateWebHookRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "origin": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "enabled": {
          "type": "boolean"
        },
        "authorization": {
          "type": "string"
        }
      }
    },
    "engineDefaultDeviceConfigResponse": {
      "type": "object",
      "properties": {
        "sip": {
          "$ref": "#/definitions/DefaultDeviceConfigResponseSipDeviceConfig"
        },
        "webrtc": {
          "$ref": "#/definitions/DefaultDeviceConfigResponseWebRTCDeviceConfig"
        }
      }
    },
    "engineDeleteAllMembersRequest": {
      "type": "object",
      "properties": {
        "q": {
          "type": "string"
        },
        "id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "queue_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "bucket_id": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "destination": {
          "type": "string"
        },
        "created_at": {
          "$ref": "#/definitions/engineFilterBetween"
        },
        "offering_at": {
          "$ref": "#/definitions/engineFilterBetween"
        },
        "stop_cause": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "priority": {
          "$ref": "#/definitions/engineFilterBetween"
        },
        "name": {
          "type": "string"
        },
        "attempts": {
          "$ref": "#/definitions/engineFilterBetween"
        },
        "agent_id": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "numbers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "sort": {
          "type": "string"
        },
        "without_members": {
          "type": "boolean"
        }
      }
    },
    "engineDeleteSkillAgentResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineSkillAgentItem"
          }
        }
      }
    },
    "engineDtmfCallResponse": {
      "type": "object"
    },
    "engineEavesdropCallRequestEndpointRequest": {
      "type": "object",
      "properties": {
        "app_id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "int64"
        },
        "extension": {
          "type": "string"
        }
      }
    },
    "engineEmailAuthType": {
      "type": "string",
      "enum": [
        "EmailAuthTypeUndefined",
        "Plain",
        "OAuth2"
      ],
      "default": "EmailAuthTypeUndefined"
    },
    "engineEmailProfile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "enabled": {
          "type": "boolean"
        },
        "imap_host": {
          "type": "string"
        },
        "login": {
          "type": "string"
        },
        "mailbox": {
          "type": "string"
        },
        "smtp_port": {
          "type": "integer",
          "format": "int32"
        },
        "imap_port": {
          "type": "integer",
          "format": "int32"
        },
        "password": {
          "type": "string"
        },
        "smtp_host": {
          "type": "string"
        },
        "fetch_interval": {
          "type": "integer",
          "format": "int32"
        },
        "fetch_error": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "activity_at": {
          "type": "string",
          "format": "int64"
        },
        "auth_type": {
          "$ref": "#/definitions/engineEmailAuthType"
        },
        "listen": {
          "type": "boolean"
        },
        "params": {
          "$ref": "#/definitions/engineEmailProfileParams"
        },
        "logged": {
          "type": "boolean"
        }
      }
    },
    "engineEmailProfileParams": {
      "type": "object",
      "properties": {
        "oauth2": {
          "$ref": "#/definitions/EmailProfileParamsOAuth2"
        }
      }
    },
    "engineEmptyResponse": {
      "type": "object"
    },
    "engineEndpoint": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "engineExceptDate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "int64"
        },
        "repeat": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "working": {
          "type": "boolean"
        },
        "work_start": {
          "type": "integer",
          "format": "int32"
        },
        "work_stop": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "engineFilterBetween": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string",
          "format": "int64"
        },
        "to": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "engineForAgentPauseCause": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "limit_min": {
          "type": "integer",
          "format": "int64"
        },
        "duration_min": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "engineForAgentPauseCauseList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineForAgentPauseCause"
          }
        }
      }
    },
    "engineHangupCallResponse": {
      "type": "object"
    },
    "engineHistoryCall": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "parent_id": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/engineLookup"
        },
        "extension": {
          "type": "string"
        },
        "gateway": {
          "$ref": "#/definitions/engineLookup"
        },
        "direction": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        },
        "from": {
          "$ref": "#/definitions/engineEndpoint"
        },
        "to": {
          "$ref": "#/definitions/engineEndpoint"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "answered_at": {
          "type": "string",
          "format": "int64"
        },
        "bridged_at": {
          "type": "string",
          "format": "int64"
        },
        "hangup_at": {
          "type": "string",
          "format": "int64"
        },
        "hangup_by": {
          "type": "string"
        },
        "cause": {
          "type": "string"
        },
        "duration": {
          "type": "integer",
          "format": "int32"
        },
        "hold_sec": {
          "type": "integer",
          "format": "int32"
        },
        "wait_sec": {
          "type": "integer",
          "format": "int32"
        },
        "bill_sec": {
          "type": "integer",
          "format": "int32"
        },
        "sip_code": {
          "type": "integer",
          "format": "int32"
        },
        "files": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineCallFile"
          }
        },
        "queue": {
          "$ref": "#/definitions/engineLookup"
        },
        "member": {
          "$ref": "#/definitions/engineLookup"
        },
        "team": {
          "$ref": "#/definitions/engineLookup"
        },
        "agent": {
          "$ref": "#/definitions/engineLookup"
        },
        "joined_at": {
          "type": "string",
          "format": "int64"
        },
        "leaving_at": {
          "type": "string",
          "format": "int64"
        },
        "reporting_at": {
          "type": "string",
          "format": "int64"
        },
        "queue_bridged_at": {
          "type": "string",
          "format": "int64"
        },
        "queue_wait_sec": {
          "type": "integer",
          "format": "int32"
        },
        "queue_duration_sec": {
          "type": "integer",
          "format": "int32"
        },
        "reporting_sec": {
          "type": "integer",
          "format": "int32"
        },
        "result": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "display": {
          "type": "string"
        },
        "stored_at": {
          "type": "string",
          "format": "int64"
        },
        "transfer_from": {
          "type": "string"
        },
        "transfer_to": {
          "type": "string"
        },
        "has_children": {
          "type": "boolean"
        },
        "agent_description": {
          "type": "string"
        },
        "hold": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineCallHold"
          }
        },
        "annotations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineCallAnnotation"
          }
        },
        "amd_result": {
          "type": "string"
        },
        "hangup_disposition": {
          "type": "string"
        },
        "blind_transfer": {
          "type": "string"
        },
        "files_job": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineHistoryFileJob"
          }
        },
        "transcripts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineTranscriptLookup"
          }
        },
        "talk_sec": {
          "type": "integer",
          "format": "int32"
        },
        "grantee": {
          "$ref": "#/definitions/engineLookup"
        },
        "amd_ai_result": {
          "type": "string"
        },
        "amd_ai_logs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rate_id": {
          "type": "string",
          "format": "int64"
        },
        "rated_user": {
          "$ref": "#/definitions/engineLookup"
        },
        "rated_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "score_optional": {
          "type": "number",
          "format": "float"
        },
        "score_required": {
          "type": "number",
          "format": "float"
        },
        "attempt_id": {
          "type": "string",
          "format": "int64"
        },
        "allow_evaluation": {
          "type": "boolean"
        },
        "form_fields": {},
        "bridged_id": {
          "type": "string"
        },
        "contact": {
          "$ref": "#/definitions/engineLookup"
        },
        "member_id": {
          "type": "string",
          "format": "int64"
        },
        "schemas": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "hangup_phrase": {
          "type": "string"
        },
        "blind_transfers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineHistoryCallBlindTransfer"
          }
        },
        "from_number": {
          "type": "string"
        },
        "to_number": {
          "type": "string"
        }
      }
    },
    "engineHistoryCallBlindTransfer": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string"
        },
        "time": {
          "type": "string",
          "format": "int64"
        },
        "user": {
          "$ref": "#/definitions/engineLookup"
        }
      }
    },
    "engineHistoryFileJob": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "file_id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "action": {
          "$ref": "#/definitions/HistoryFileJobHistoryFileJobAction"
        },
        "state": {
          "$ref": "#/definitions/HistoryFileJobHistoryFileJobState"
        },
        "error_detail": {
          "type": "string"
        }
      }
    },
    "engineHoldCallResponse": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string"
        }
      }
    },
    "engineList": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "engineListAgent": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAgent"
          }
        }
      }
    },
    "engineListAgentInQueue": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAgentInQueue"
          }
        }
      }
    },
    "engineListAgentInTeam": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAgentInTeam"
          }
        }
      }
    },
    "engineListAgentPauseCause": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAgentPauseCause"
          }
        }
      }
    },
    "engineListAgentSkill": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAgentSkillItem"
          }
        }
      }
    },
    "engineListAgentStateHistory": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAgentState"
          }
        }
      }
    },
    "engineListAgentStatsStatistic": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAgentStatsStatistic"
          }
        }
      }
    },
    "engineListAgentTeam": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAgentTeam"
          }
        }
      }
    },
    "engineListAgentUser": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAgentUser"
          }
        }
      }
    },
    "engineListAggregate": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAggregateResult"
          }
        }
      }
    },
    "engineListAttempt": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAttempt"
          }
        }
      }
    },
    "engineListAuditForm": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAuditForm"
          }
        }
      }
    },
    "engineListAuditRate": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAuditRate"
          }
        }
      }
    },
    "engineListAvailableSystemSetting": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAvailableSystemSetting"
          }
        }
      }
    },
    "engineListBucket": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineBucket"
          }
        }
      }
    },
    "engineListCalendar": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineCalendar"
          }
        }
      }
    },
    "engineListCall": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineActiveCall"
          }
        }
      }
    },
    "engineListChatPlan": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineChatPlan"
          }
        }
      }
    },
    "engineListCommunication": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "list_id": {
          "type": "string",
          "format": "int64"
        },
        "number": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "expire_at": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "engineListCommunicationType": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineCommunicationType"
          }
        }
      }
    },
    "engineListEmailProfile": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineEmailProfile"
          }
        }
      }
    },
    "engineListHistoryAttempt": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineAttemptHistory"
          }
        }
      }
    },
    "engineListHistoryCall": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineHistoryCall"
          }
        }
      }
    },
    "engineListMember": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineMemberInQueue"
          }
        }
      }
    },
    "engineListMemberAttempt": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineMemberAttempt"
          }
        }
      }
    },
    "engineListOfList": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineList"
          }
        }
      }
    },
    "engineListOfListCommunication": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineListCommunication"
          }
        }
      }
    },
    "engineListOutboundResource": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineOutboundResource"
          }
        }
      }
    },
    "engineListOutboundResourceDisplay": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineResourceDisplay"
          }
        }
      }
    },
    "engineListOutboundResourceGroup": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineOutboundResourceViewGroup"
          }
        }
      }
    },
    "engineListOutboundResourceInGroup": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineOutboundResourceInGroup"
          }
        }
      }
    },
    "engineListPresetQuery": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/enginePresetQuery"
          }
        }
      }
    },
    "engineListQueue": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineQueue"
          }
        }
      }
    },
    "engineListQueueBucket": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineQueueBucket"
          }
        }
      }
    },
    "engineListQueueHook": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineQueueHook"
          }
        }
      }
    },
    "engineListQueueResourceGroup": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineQueueResourceGroup"
          }
        }
      }
    },
    "engineListQueueSkill": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineQueueSkill"
          }
        }
      }
    },
    "engineListQuickReplies": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineQuickReply"
          }
        }
      }
    },
    "engineListRegion": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineRegion"
          }
        }
      }
    },
    "engineListReportGeneral": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineQueueReportGeneral"
          }
        },
        "aggs": {
          "$ref": "#/definitions/engineQueueReportGeneralAgentStatus"
        }
      }
    },
    "engineListResourceDisplay": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        }
      }
    },
    "engineListRoutingOutboundCall": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineRoutingOutboundCallCompact"
          }
        }
      }
    },
    "engineListRoutingSchema": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineRoutingSchema"
          }
        }
      }
    },
    "engineListRoutingSchemaTags": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineRoutingSchemaTag"
          }
        }
      }
    },
    "engineListRoutingVariable": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineRoutingVariable"
          }
        }
      }
    },
    "engineListSchemaVariable": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineSchemaVariable"
          }
        }
      }
    },
    "engineListSkill": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineSkill"
          }
        }
      }
    },
    "engineListSkillAgent": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineSkillAgentItem"
          }
        },
        "aggs": {
          "$ref": "#/definitions/ListSkillAgentListSkillAgg"
        }
      }
    },
    "engineListSystemSetting": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineSystemSetting"
          }
        }
      }
    },
    "engineListTags": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineTag"
          }
        }
      }
    },
    "engineListTeamHook": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineTeamHook"
          }
        }
      }
    },
    "engineListTeamTrigger": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineTeamTrigger"
          }
        }
      }
    },
    "engineListTimezoneResponse": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineTimezone"
          }
        }
      }
    },
    "engineListTrigger": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineTrigger"
          }
        }
      }
    },
    "engineListTriggerJob": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineTriggerJob"
          }
        }
      }
    },
    "engineListUserStatus": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineUserStatus"
          }
        },
        "next": {
          "type": "boolean"
        }
      }
    },
    "engineListWebHook": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineWebHook"
          }
        }
      }
    },
    "engineLoginEmailProfileResponse": {
      "type": "object",
      "properties": {
        "auth_type": {
          "$ref": "#/definitions/engineEmailAuthType"
        },
        "redirect_url": {
          "type": "string"
        },
        "cookie": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "engineLogoutEmailProfileResponse": {
      "type": "object"
    },
    "engineLookup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "engineMemberAttempt": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "member": {
          "$ref": "#/definitions/engineLookup"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "destination": {
          "type": "string"
        },
        "weight": {
          "type": "integer",
          "format": "int32"
        },
        "originate_at": {
          "type": "string",
          "format": "int64"
        },
        "answered_at": {
          "type": "string",
          "format": "int64"
        },
        "bridged_at": {
          "type": "string",
          "format": "int64"
        },
        "hangup_at": {
          "type": "string",
          "format": "int64"
        },
        "resource": {
          "$ref": "#/definitions/engineLookup"
        },
        "leg_a_id": {
          "type": "string"
        },
        "leg_b_id": {
          "type": "string"
        },
        "node": {
          "type": "string"
        },
        "result": {
          "type": "string"
        },
        "agent": {
          "$ref": "#/definitions/engineLookup"
        },
        "bucket": {
          "$ref": "#/definitions/engineLookup"
        },
        "logs": {},
        "active": {
          "type": "boolean"
        },
        "attempts": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "engineMemberBulkResponse": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        }
      }
    },
    "engineMemberCommunication": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "destination": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/engineLookup"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "type": "string"
        },
        "resource": {
          "$ref": "#/definitions/engineLookup"
        },
        "display": {
          "type": "string"
        },
        "state": {
          "type": "integer",
          "format": "int32"
        },
        "last_activity_at": {
          "type": "string",
          "format": "int64"
        },
        "attempts": {
          "type": "integer",
          "format": "int32"
        },
        "last_cause": {
          "type": "string"
        },
        "stop_at": {
          "type": "string",
          "format": "int64"
        },
        "dtmf": {
          "type": "string"
        }
      }
    },
    "engineMemberCommunicationCreateRequest": {
      "type": "object",
      "properties": {
        "destination": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/engineLookup"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "type": "string"
        },
        "resource": {
          "$ref": "#/definitions/engineLookup"
        },
        "display": {
          "type": "string"
        },
        "stop_at": {
          "type": "string",
          "format": "int64"
        },
        "dtmf": {
          "type": "string"
        }
      }
    },
    "engineMemberInQueue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "queue": {
          "$ref": "#/definitions/engineLookup"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "expire_at": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "timezone": {
          "$ref": "#/definitions/engineLookup"
        },
        "communications": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineMemberCommunication"
          }
        },
        "bucket": {
          "$ref": "#/definitions/engineLookup"
        },
        "min_offering_at": {
          "type": "string",
          "format": "int64",
          "title": "deprecated"
        },
        "stop_cause": {
          "type": "string"
        },
        "last_activity_at": {
          "type": "string",
          "format": "int64"
        },
        "attempts": {
          "type": "integer",
          "format": "int32"
        },
        "reserved": {
          "type": "boolean"
        },
        "agent": {
          "$ref": "#/definitions/engineLookup"
        },
        "skill": {
          "$ref": "#/definitions/engineLookup"
        }
      }
    },
    "engineMemberServiceAttemptResultBody": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "min_offering_at": {
          "type": "string",
          "format": "int64"
        },
        "expire_at": {
          "type": "string",
          "format": "int64"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "display": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "transfer_queue_id": {
          "type": "string",
          "format": "int64"
        },
        "next_member_id": {
          "type": "string",
          "format": "int64"
        },
        "agent_id": {
          "type": "integer",
          "format": "int32"
        },
        "exclude_current_communication": {
          "type": "boolean"
        },
        "wait_between_retries": {
          "type": "integer",
          "format": "int32"
        },
        "only_current_communication": {
          "type": "boolean"
        }
      }
    },
    "engineMovePositionRoutingOutboundCallResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "engineOutboundResource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "type": "boolean"
        },
        "rps": {
          "type": "integer",
          "format": "int32"
        },
        "reserve": {
          "type": "boolean"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "number": {
          "type": "string"
        },
        "max_successively_errors": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "error_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "last_error_id": {
          "type": "string"
        },
        "successively_errors": {
          "type": "integer",
          "format": "int32"
        },
        "last_error_at": {
          "type": "string",
          "format": "int64"
        },
        "gateway": {
          "$ref": "#/definitions/engineLookup"
        },
        "description": {
          "type": "string"
        },
        "patterns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "failure_dial_delay": {
          "type": "integer",
          "format": "int64"
        },
        "parameters": {
          "$ref": "#/definitions/engineOutboundResourceParameters"
        }
      }
    },
    "engineOutboundResourceGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "name": {
          "type": "string"
        },
        "strategy": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "communication": {
          "$ref": "#/definitions/engineLookup"
        },
        "time": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineOutboundResourceTimeRange"
          }
        }
      }
    },
    "engineOutboundResourceInGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "group_id": {
          "type": "string",
          "format": "int64"
        },
        "resource": {
          "$ref": "#/definitions/engineLookup"
        },
        "reserve_resource": {
          "$ref": "#/definitions/engineLookup"
        },
        "priority": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "engineOutboundResourceParameters": {
      "type": "object",
      "properties": {
        "cid_type": {
          "type": "string"
        },
        "ignore_early_media": {
          "type": "string"
        }
      }
    },
    "engineOutboundResourceTimeRange": {
      "type": "object",
      "properties": {
        "start_time_of_day": {
          "type": "integer",
          "format": "int32"
        },
        "end_time_of_day": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "engineOutboundResourceViewGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "strategy": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "communication": {
          "$ref": "#/definitions/engineLookup"
        }
      }
    },
    "enginePatchSkillAgentResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineSkillAgentItem"
          }
        }
      }
    },
    "enginePresetQuery": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "preset": {},
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "section": {
          "type": "string"
        }
      }
    },
    "engineQuestion": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/engineAuditQuestionType"
        },
        "required": {
          "type": "boolean"
        },
        "question": {
          "type": "string"
        },
        "min": {
          "type": "integer",
          "format": "int32"
        },
        "max": {
          "type": "integer",
          "format": "int32"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/QuestionOption"
          }
        },
        "description": {
          "type": "string"
        },
        "critical_violation": {
          "type": "boolean"
        }
      }
    },
    "engineQuestionAnswer": {
      "type": "object",
      "properties": {
        "score": {
          "type": "number",
          "format": "float"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "engineQueue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "strategy": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "payload": {},
        "calendar": {
          "$ref": "#/definitions/engineLookup"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "timeout": {
          "type": "integer",
          "format": "int32"
        },
        "dnc_list": {
          "$ref": "#/definitions/engineLookup"
        },
        "sec_locate_agent": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "type": "string"
        },
        "team": {
          "$ref": "#/definitions/engineLookup"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "waiting": {
          "type": "integer",
          "format": "int32"
        },
        "active": {
          "type": "integer",
          "format": "int32"
        },
        "ringtone": {
          "$ref": "#/definitions/engineLookup"
        },
        "do_schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "after_schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "sticky_agent": {
          "type": "boolean"
        },
        "processing": {
          "type": "boolean",
          "title": "deprecated"
        },
        "processing_sec": {
          "type": "integer",
          "format": "int64",
          "title": "deprecated"
        },
        "processing_renewal_sec": {
          "type": "integer",
          "format": "int64",
          "title": "deprecated"
        },
        "form_schema": {
          "$ref": "#/definitions/engineLookup",
          "title": "deprecated"
        },
        "task_processing": {
          "$ref": "#/definitions/engineTaskProcessing"
        },
        "grantee": {
          "$ref": "#/definitions/engineLookup"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineTag"
          }
        }
      }
    },
    "engineQueueBucket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "ratio": {
          "type": "integer",
          "format": "int32"
        },
        "bucket": {
          "$ref": "#/definitions/engineLookup"
        },
        "disabled": {
          "type": "boolean"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "engineQueueHook": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "event": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "properties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "engineQueueReportGeneral": {
      "type": "object",
      "properties": {
        "queue": {
          "$ref": "#/definitions/engineLookup"
        },
        "agent_status": {
          "$ref": "#/definitions/engineQueueReportGeneralAgentStatus"
        },
        "team": {
          "$ref": "#/definitions/engineLookup"
        },
        "missed": {
          "type": "integer",
          "format": "int64"
        },
        "processed": {
          "type": "integer",
          "format": "int64"
        },
        "waiting": {
          "type": "integer",
          "format": "int64"
        },
        "count": {
          "type": "string",
          "format": "uint64"
        },
        "transferred": {
          "type": "integer",
          "format": "int64"
        },
        "abandoned": {
          "type": "integer",
          "format": "int64"
        },
        "attempts": {
          "type": "integer",
          "format": "int64"
        },
        "sum_bill_sec": {
          "type": "number",
          "format": "float"
        },
        "avg_wrap_sec": {
          "type": "number",
          "format": "float"
        },
        "avg_awt_sec": {
          "type": "number",
          "format": "float"
        },
        "avg_asa_sec": {
          "type": "number",
          "format": "float"
        },
        "avg_aht_sec": {
          "type": "number",
          "format": "float"
        },
        "bridged": {
          "type": "number",
          "format": "float"
        },
        "sl20": {
          "type": "number",
          "format": "float"
        },
        "sl30": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "engineQueueReportGeneralAgentStatus": {
      "type": "object",
      "properties": {
        "online": {
          "type": "integer",
          "format": "int64"
        },
        "pause": {
          "type": "integer",
          "format": "int64"
        },
        "offline": {
          "type": "integer",
          "format": "int64"
        },
        "free": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "engineQueueResourceGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "resource_group": {
          "$ref": "#/definitions/engineLookup"
        },
        "communication": {
          "$ref": "#/definitions/engineLookup"
        }
      }
    },
    "engineQueueSkill": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "skill": {
          "$ref": "#/definitions/engineLookup"
        },
        "buckets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "lvl": {
          "type": "integer",
          "format": "int32"
        },
        "min_capacity": {
          "type": "integer",
          "format": "int32"
        },
        "max_capacity": {
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "engineQuickReply": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "name": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "teams": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        },
        "article": {
          "$ref": "#/definitions/engineLookup"
        },
        "queues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineLookup"
          }
        }
      }
    },
    "engineRegion": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "timezone": {
          "$ref": "#/definitions/engineLookup"
        }
      }
    },
    "engineResetActiveAttemptsRequest": {
      "type": "object",
      "properties": {
        "idle_for_minutes": {
          "type": "string",
          "format": "int64"
        },
        "attempt_type": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "result": {
          "type": "string"
        }
      }
    },
    "engineResetActiveAttemptsResponse": {
      "type": "object"
    },
    "engineResetMembersResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "engineResourceDisplay": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "display": {
          "type": "string"
        }
      }
    },
    "engineResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "engineRoutingOutboundCall": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "pattern": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "engineRoutingOutboundCallCompact": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "pattern": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "position": {
          "type": "integer",
          "format": "int32"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "engineRoutingSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/engineRoutingSchemaType"
        },
        "schema": {},
        "payload": {},
        "debug": {
          "type": "boolean"
        },
        "editor": {
          "type": "boolean"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineSchemaTag"
          }
        }
      }
    },
    "engineRoutingSchemaTag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "engineRoutingSchemaType": {
      "type": "string",
      "enum": [
        "default",
        "voice",
        "chat",
        "processing",
        "service"
      ],
      "default": "default"
    },
    "engineRoutingVariable": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "engineRunTeamTriggerResponse": {
      "type": "object",
      "properties": {
        "job_id": {
          "type": "string"
        }
      }
    },
    "engineSchemaTag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "engineSchemaVariable": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "encrypt": {
          "type": "boolean"
        },
        "value": {}
      }
    },
    "engineSchemaVersion": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "schema_id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "schema": {},
        "payload": {},
        "version": {
          "type": "string",
          "format": "uint64"
        },
        "note": {
          "type": "string"
        }
      }
    },
    "engineSearchHistoryCallRequest": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "q": {
          "type": "string"
        },
        "sort": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "created_at": {
          "$ref": "#/definitions/engineFilterBetween"
        },
        "user_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "agent_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "queue_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "team_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "member_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "gateway_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "duration": {
          "$ref": "#/definitions/engineFilterBetween"
        },
        "skip_parent": {
          "type": "boolean"
        },
        "parent_id": {
          "type": "string"
        },
        "cause": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "has_file": {
          "type": "boolean"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "number": {
          "type": "string"
        },
        "direction": {
          "type": "string"
        },
        "answered_at": {
          "$ref": "#/definitions/engineFilterBetween"
        },
        "missed": {
          "type": "boolean"
        },
        "stored_at": {
          "$ref": "#/definitions/engineFilterBetween"
        },
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "transfer_from": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "transfer_to": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dependency_id": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "variables[string]": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "amd_result": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fts": {
          "type": "string"
        },
        "directions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "has_transcript": {
          "type": "boolean"
        },
        "agent_description": {
          "type": "string"
        },
        "owner_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "grantee_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "amd_ai_result": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "talk": {
          "$ref": "#/definitions/engineFilterBetween"
        },
        "rated": {
          "type": "boolean"
        },
        "rated_by": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "score_required": {
          "$ref": "#/definitions/engineFilterBetween"
        },
        "score_optional": {
          "$ref": "#/definitions/engineFilterBetween"
        },
        "rated_user": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "contact_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "schema_id": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "has_transfer": {
          "type": "boolean"
        },
        "timeline": {
          "type": "boolean"
        }
      }
    },
    "engineSearchSchemaVersionResponse": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/engineSchemaVersion"
          }
        }
      }
    },
    "engineSendPushResponse": {
      "type": "object",
      "properties": {
        "send": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "engineSetVariablesCallResponse": {
      "type": "object"
    },
    "engineSkill": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "active_agents": {
          "type": "integer",
          "format": "int32"
        },
        "total_agents": {
          "type": "integer",
          "format": "int32"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/engineLookup"
        }
      }
    },
    "engineSkillAgentItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "skill": {
          "$ref": "#/definitions/engineLookup"
        },
        "capacity": {
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "type": "boolean"
        },
        "agent": {
          "$ref": "#/definitions/engineLookup"
        },
        "team": {
          "$ref": "#/definitions/engineLookup"
        }
      }
    },
    "engineSystemSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "$ref": "#/definitions/engineSystemSettingName"
        },
        "value": {}
      }
    },
    "engineSystemSettingName": {
      "type": "string",
      "enum": [
        "empty_system_settings_name",
        "enable_omnichannel",
        "member_chunk_size",
        "amd_cancel_not_human",
        "scheme_version_limit",
        "enable_2fa",
        "export_settings",
        "search_number_length",
        "chat_ai_connection",
        "password_reg_exp",
        "password_validation_text",
        "autolink_call_to_contact",
        "period_to_playback_records",
        "is_fulltext_search_enabled",
        "wbt_hide_contact",
        "show_full_contact",
        "call_end_sound_notification",
        "call_end_push_notification",
        "chat_end_sound_notification",
        "chat_end_push_notification",
        "task_end_sound_notification",
        "task_end_push_notification",
        "push_notification_timeout",
        "labels_to_limit_contacts"
      ],
      "default": "empty_system_settings_name"
    },
    "engineTag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "engineTaskProcessing": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "form_schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "sec": {
          "type": "integer",
          "format": "int64"
        },
        "renewal_sec": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "engineTeamHook": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "event": {
          "$ref": "#/definitions/engineTeamHookEvent"
        },
        "enabled": {
          "type": "boolean"
        },
        "properties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "engineTeamHookEvent": {
      "type": "string",
      "enum": [
        "teamHookEventUndefined",
        "agent_status"
      ],
      "default": "teamHookEventUndefined"
    },
    "engineTeamTrigger": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "engineTestEmailProfileResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        }
      }
    },
    "engineTimezone": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "offset": {
          "type": "string"
        }
      }
    },
    "engineTranscriptLookup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "locale": {
          "type": "string"
        },
        "file_id": {
          "type": "string",
          "format": "int64",
          "title": "deprecated"
        },
        "file": {
          "$ref": "#/definitions/engineLookup"
        }
      }
    },
    "engineTrigger": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/engineTriggerType"
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "expression": {
          "type": "string"
        },
        "timezone": {
          "$ref": "#/definitions/engineLookup"
        },
        "timeout": {
          "type": "integer",
          "format": "int32"
        },
        "object": {
          "$ref": "#/definitions/engineTriggerObjectType"
        },
        "event": {
          "$ref": "#/definitions/engineTriggerEventType"
        }
      }
    },
    "engineTriggerEventType": {
      "type": "string",
      "enum": [
        "empty_trigger_event",
        "create",
        "update",
        "remove",
        "resolution_time"
      ],
      "default": "empty_trigger_event"
    },
    "engineTriggerJob": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "trigger": {
          "$ref": "#/definitions/engineLookup"
        },
        "state": {
          "$ref": "#/definitions/engineTriggerJobState"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "started_at": {
          "type": "string",
          "format": "int64"
        },
        "stopped_at": {
          "type": "string",
          "format": "int64"
        },
        "parameters": {},
        "error": {
          "type": "string"
        },
        "result": {}
      }
    },
    "engineTriggerJobState": {
      "type": "string",
      "enum": [
        "idle",
        "active",
        "done",
        "error"
      ],
      "default": "idle"
    },
    "engineTriggerObjectType": {
      "type": "string",
      "enum": [
        "empty_trigger_object",
        "cases",
        "case_files",
        "case_comments",
        "case_links"
      ],
      "default": "empty_trigger_object"
    },
    "engineTriggerType": {
      "type": "string",
      "enum": [
        "default_trigger_type",
        "cron",
        "event"
      ],
      "default": "default_trigger_type"
    },
    "engineUpdateQuestionAnswerRequest": {
      "type": "object",
      "properties": {
        "score": {
          "type": "number",
          "format": "float"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "engineUserStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "extension": {
          "type": "string"
        },
        "presence": {
          "$ref": "#/definitions/engineUserStatusUserPresence"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "engineUserStatusUserPresence": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "engineWebHook": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "key": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "origin": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "schema": {
          "$ref": "#/definitions/engineLookup"
        },
        "enabled": {
          "type": "boolean"
        },
        "authorization": {
          "type": "string"
        }
      }
    },
    "fsBlindTransferResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/fsErrorExecute"
        }
      }
    },
    "fsBreakParkResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean"
        }
      }
    },
    "fsBridgeCallResponse": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/fsErrorExecute"
        }
      }
    },
    "fsBridgeResponse": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/fsErrorExecute"
        }
      }
    },
    "fsBroadcastResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/fsErrorExecute"
        }
      }
    },
    "fsConfirmPushResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/fsErrorExecute"
        }
      }
    },
    "fsErrorExecute": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/fsErrorExecuteType"
        }
      }
    },
    "fsErrorExecuteType": {
      "type": "string",
      "enum": [
        "ERROR",
        "USAGE"
      ],
      "default": "ERROR"
    },
    "fsExecuteResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/fsErrorExecute"
        }
      }
    },
    "fsHangupManyResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "fsHangupMatchingVarsResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "fsHangupResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/fsErrorExecute"
        }
      }
    },
    "fsHoldResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "fsOriginateResponse": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/fsErrorExecute"
        },
        "error_code": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "fsQueueResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/fsErrorExecute"
        }
      }
    },
    "fsSetEavesdropStateResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/fsErrorExecute"
        }
      }
    },
    "fsSetProfileVarResponse": {
      "type": "object"
    },
    "fsSetVariablesResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/fsErrorExecute"
        }
      }
    },
    "fsStopPlaybackResponse": {
      "type": "object"
    },
    "fsUnHoldResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ftsSearchData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "object_name": {
          "type": "string"
        },
        "text": {
          "type": "string"
        }
      }
    },
    "ftsSearchResponse": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ftsSearchData"
          }
        }
      }
    },
    "generalError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "detail": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "generalExtendedLookup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "generalLookup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of\n[google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized\nby the client."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "knowledgebaseArticle": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "READONLY. Operational attributes\nVersion of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelknowledgebaseLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelknowledgebaseLookup",
          "description": "The user who performed last Update."
        },
        "space_id": {
          "type": "string",
          "format": "int64",
          "description": "Space ID associated with."
        },
        "state": {
          "type": "boolean",
          "description": "Indicates the state of the article."
        },
        "text": {
          "type": "string",
          "description": "The text content of the article."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tags associated with the article."
        },
        "title": {
          "type": "string",
          "description": "The title of the article."
        },
        "parent_article": {
          "type": "string",
          "format": "int64",
          "description": "The parent article ID."
        },
        "has_children": {
          "type": "boolean",
          "description": "Indicates that the article has children."
        },
        "pinned": {
          "type": "boolean",
          "description": "Indicates that the article is pinned on the top of list."
        }
      }
    },
    "knowledgebaseArticleList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/knowledgebaseArticle"
          },
          "description": "Article dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      },
      "description": "Article dataset.\nNOTE: Edge represents connection between two nodes.\nSo this spaceArticles.data are always subordinate to some space.id."
    },
    "knowledgebaseArticleVersion": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "title": {
          "type": "string",
          "description": "The title of the article."
        },
        "text": {
          "type": "string",
          "description": "The text content of the article."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelknowledgebaseLookup",
          "description": "The user who loaded this attachment."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update."
        },
        "parent_article": {
          "type": "string",
          "format": "int64",
          "description": "The parent article ID."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tags associated with the article."
        },
        "space_id": {
          "type": "string",
          "format": "int64",
          "description": "Space ID associated with."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        }
      }
    },
    "knowledgebaseArticleVersionList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/knowledgebaseArticleVersion"
          }
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      }
    },
    "knowledgebaseAttachmentList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelknowledgebaseAttachment"
          },
          "description": "Attachment dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      }
    },
    "knowledgebaseCombined": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id of the record (article or space)"
        },
        "name": {
          "type": "string",
          "title": "Display name of the record (article or space)"
        },
        "type": {
          "type": "string",
          "title": "Type of the record: article/space"
        }
      }
    },
    "knowledgebaseCombinedList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/knowledgebaseCombined"
          }
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      }
    },
    "knowledgebaseInputArticle": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resource."
        },
        "space_id": {
          "type": "string",
          "format": "int64",
          "description": "[VALUE]: --------------------------------------\nSpace ID associated with."
        },
        "state": {
          "type": "boolean",
          "description": "Indicates if article is active and actual."
        },
        "text": {
          "type": "string",
          "description": "The text content of the article."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tags associated with the article."
        },
        "title": {
          "type": "string",
          "description": "The title of the article."
        },
        "parent_article": {
          "type": "string",
          "format": "int64",
          "description": "The parent article ID."
        },
        "pinned": {
          "type": "boolean",
          "description": "Indicates that the article is pinned on the top of list."
        }
      },
      "description": "An input of the Space's Articles.",
      "required": [
        "etag"
      ]
    },
    "knowledgebaseInputSpace": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of an existing resorce."
        },
        "name": {
          "type": "string",
          "description": "Represents the name of the knowledge base space."
        },
        "home_page": {
          "type": "string",
          "description": "BIO. Short description about the space.\nOPTIONAL. Multi-lined text."
        },
        "state": {
          "type": "boolean",
          "description": "The state of the space."
        }
      },
      "description": "The Space principal input."
    },
    "knowledgebaseSpace": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "READONLY. Operational attributes\nVersion of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "mode": {
          "type": "string",
          "description": "[R]ecord[b]ased[A]ccess[C]ontrol mode granted."
        },
        "domain": {
          "$ref": "#/definitions/webitelknowledgebaseLookup",
          "description": "READONLY. The space's metadata."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The timestamp when the space was created (in Unix time)."
        },
        "created_by": {
          "$ref": "#/definitions/webitelknowledgebaseLookup",
          "description": "The user who created the space."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "The timestamp when the space was last updated (in Unix time)."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelknowledgebaseLookup",
          "description": "The user who last updated the space."
        },
        "name": {
          "type": "string",
          "description": "The name of the space."
        },
        "home_page": {
          "type": "string",
          "description": "BIO. Short description about the space."
        },
        "state": {
          "type": "boolean",
          "description": "The state of the space."
        },
        "has_children": {
          "type": "boolean",
          "description": "Indicates if the space has children."
        }
      }
    },
    "knowledgebaseSpaceList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/knowledgebaseSpace"
          },
          "description": "Space(s) dataset page."
        },
        "page": {
          "type": "integer",
          "format": "int32",
          "description": "The page number of the partial result."
        },
        "next": {
          "type": "boolean",
          "title": "Indicates that this is a partial result.\nMore data available upon query: ?size=${data.len}\u0026page=${page++}"
        }
      }
    },
    "knowledgebaseTagsList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelknowledgebaseTag"
          }
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "next": {
          "type": "boolean"
        }
      }
    },
    "loggerAction": {
      "type": "string",
      "enum": [
        "default_no_action",
        "create",
        "update",
        "read",
        "delete"
      ],
      "default": "default_no_action"
    },
    "loggerAvailableSystemObjects": {
      "type": "string",
      "enum": [
        "cc_queue",
        "schema",
        "users",
        "devices",
        "calendars",
        "cc_list",
        "cc_team",
        "cc_agent",
        "cc_resource",
        "cc_resource_group",
        "chat_bots",
        "cases",
        "contacts",
        "cc_list_number",
        "case_comments",
        "record_file"
      ],
      "default": "cc_queue"
    },
    "loggerConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "object": {
          "$ref": "#/definitions/loggerLookup"
        },
        "enabled": {
          "type": "boolean"
        },
        "days_to_store": {
          "type": "integer",
          "format": "int32"
        },
        "period": {
          "type": "integer",
          "format": "int32"
        },
        "storage": {
          "$ref": "#/definitions/loggerLookup"
        },
        "description": {
          "type": "string"
        },
        "logs_size": {
          "type": "string"
        },
        "logs_count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "loggerConfigStatus": {
      "type": "object",
      "properties": {
        "is_enabled": {
          "type": "boolean"
        }
      }
    },
    "loggerConfigs": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/loggerConfig"
          }
        }
      }
    },
    "loggerCreateConfigRequest": {
      "type": "object",
      "properties": {
        "object": {
          "$ref": "#/definitions/loggerLookup"
        },
        "enabled": {
          "type": "boolean"
        },
        "days_to_store": {
          "type": "integer",
          "format": "int32"
        },
        "period": {
          "type": "integer",
          "format": "int32"
        },
        "storage": {
          "$ref": "#/definitions/loggerLookup"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "loggerEmpty": {
      "type": "object"
    },
    "loggerLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "action": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "int64"
        },
        "user": {
          "$ref": "#/definitions/loggerLookup"
        },
        "user_ip": {
          "type": "string"
        },
        "new_state": {
          "type": "string"
        },
        "config_id": {
          "type": "integer",
          "format": "int32"
        },
        "record": {
          "$ref": "#/definitions/loggerRecord"
        },
        "object": {
          "$ref": "#/definitions/loggerLookup"
        }
      }
    },
    "loggerLogs": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/loggerLog"
          }
        }
      }
    },
    "loggerLookup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "loggerRecord": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "loggerSystemObjects": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/loggerLookup"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "serverAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique IDentifier"
        },
        "channel": {
          "type": "string",
          "description": "e.g.: bot, user, phone, telegram, facebook, viber, skype ...",
          "title": "Channel communication type"
        },
        "contact": {
          "type": "string",
          "description": "optional: channel specific contact string",
          "title": "Channel specific contact string"
        },
        "first_name": {
          "type": "string",
          "title": "optional"
        },
        "last_name": {
          "type": "string",
          "title": "optional"
        },
        "username": {
          "type": "string",
          "title": "required"
        }
      },
      "title": "Account contact info to extend and replace legacy chat.Client message type"
    },
    "serverButtons": {
      "type": "object",
      "properties": {
        "button": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chatserverButton"
          }
        }
      }
    },
    "serverChatTransferResponse": {
      "type": "object"
    },
    "serverChatVariablesResponse": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string",
          "description": "Unique Chat Channel IDentifier."
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Result Chat Channel's Variables SET."
        }
      }
    },
    "serverCheckSessionResponse": {
      "type": "object",
      "properties": {
        "exists": {
          "type": "boolean"
        },
        "channel_id": {
          "type": "string"
        },
        "client_id": {
          "type": "string",
          "format": "int64"
        },
        "account": {
          "$ref": "#/definitions/serverAccount",
          "title": "Account for .this chat channel, end-user contact info"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "optional: extra context",
          "title": "Properties defined in .StartConversationRequest.message.variables"
        }
      }
    },
    "serverCloseConversationCause": {
      "type": "string",
      "enum": [
        "no_cause",
        "flow_end",
        "client_leave",
        "flow_err"
      ],
      "default": "no_cause",
      "title": "- no_cause: optional (no cause)"
    },
    "serverCloseConversationResponse": {
      "type": "object"
    },
    "serverConversation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "closed_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chatserverMember"
          }
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serverHistoryMessage"
          },
          "title": "string self_channel_id = 9;\n  int32 unread_messages = 10;"
        }
      }
    },
    "serverDeclineInvitationResponse": {
      "type": "object"
    },
    "serverGateway": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "serverGetConversationByIDResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/serverConversation"
        }
      }
    },
    "serverGetConversationsResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serverConversation"
          }
        }
      }
    },
    "serverGetHistoryMessagesResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int32",
          "title": "select: offset {page}"
        },
        "next": {
          "type": "boolean",
          "title": "search: has {next} page ?"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/serverHistoryMessage"
          }
        }
      }
    },
    "serverHistoryMessage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "channel_id": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "title": "int64 conversation_id = 3;\n// int64 from_user_id = 2;\n// string from_user_type = 3;"
        },
        "type": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "file": {
          "$ref": "#/definitions/chatserverFile"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "serverInviteToConversationResponse": {
      "type": "object",
      "properties": {
        "invite_id": {
          "type": "string"
        }
      }
    },
    "serverJoinConversationResponse": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string"
        }
      }
    },
    "serverLeaveConversationCause": {
      "type": "string",
      "enum": [
        "default_cause",
        "agent_timeout",
        "client_timeout",
        "agent_leave",
        "transfer",
        "silence_timeout"
      ],
      "default": "default_cause",
      "title": "- default_cause: optional (no cause)"
    },
    "serverLeaveConversationResponse": {
      "type": "object"
    },
    "serverSaveAgentJoinMessageResponse": {
      "type": "object"
    },
    "serverSaveMessageResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "serverSendUserActionResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "title": "Affected ?"
        }
      }
    },
    "serverStartConversationResponse": {
      "type": "object",
      "properties": {
        "conversation_id": {
          "type": "string"
        },
        "channel_id": {
          "type": "string"
        },
        "message": {
          "$ref": "#/definitions/chatserverMessage",
          "title": "Sent \"start\" message !"
        }
      }
    },
    "serverUpdateChannelResponse": {
      "type": "object"
    },
    "serverUserAction": {
      "type": "string",
      "enum": [
        "Typing",
        "Cancel"
      ],
      "default": "Typing",
      "description": "User actions. Use this to provide users with detailed info\nabout their chat partner's actions: typing or sending attachments of all kinds.\n\n - Typing: User is typing.\n - Cancel: Invalidate all previous action updates.\nE.g. when user deletes entered text or aborts a video upload."
    },
    "serverWaitMessageResponse": {
      "type": "object",
      "properties": {
        "timeout_sec": {
          "type": "string",
          "format": "int64"
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chatserverMessage"
          },
          "title": "Error error = 3;"
        }
      }
    },
    "storageBackendProfile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "data_size": {
          "type": "string",
          "format": "int64"
        },
        "data_count": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "expire_days": {
          "type": "integer",
          "format": "int32"
        },
        "max_size": {
          "type": "string",
          "format": "int64"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        }
      }
    },
    "storageBulkGenerateFileLinkResponse": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageGenerateFileLinkResponse"
          }
        }
      }
    },
    "storageCognitiveProfile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "provider": {
          "$ref": "#/definitions/storageProviderType"
        },
        "properties": {},
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/storageServiceType"
        },
        "default": {
          "type": "boolean"
        }
      }
    },
    "storageCognitiveProfileVoice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "storageCreateBackendProfileRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "expire_days": {
          "type": "integer",
          "format": "int32"
        },
        "max_size": {
          "type": "string",
          "format": "int64"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "storageCreateCognitiveProfileRequest": {
      "type": "object",
      "properties": {
        "provider": {
          "$ref": "#/definitions/storageProviderType"
        },
        "properties": {},
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/storageServiceType"
        },
        "default": {
          "type": "boolean"
        }
      },
      "description": "Create cognitive profile request body for TTS and TTS",
      "title": "Create cognitive profile request body",
      "required": [
        "name",
        "provider",
        "service",
        "properties"
      ]
    },
    "storageCreateFilePolicyRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "mime_types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "speed_download": {
          "type": "string",
          "format": "int64"
        },
        "speed_upload": {
          "type": "string",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageUploadFileChannel"
          }
        },
        "retention_days": {
          "type": "integer",
          "format": "int32"
        },
        "max_upload_size": {
          "type": "string",
          "format": "int64"
        },
        "encrypt": {
          "type": "boolean"
        }
      }
    },
    "storageCreateImportTemplateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "source_type": {
          "$ref": "#/definitions/storageImportSourceType"
        },
        "source_id": {
          "type": "string",
          "format": "int64"
        },
        "parameters": {
          "type": "object"
        },
        "source": {
          "$ref": "#/definitions/engineLookup"
        }
      },
      "description": "Create import template for CSV",
      "title": "Create import template request body",
      "required": [
        "name",
        "source_id",
        "parameters"
      ]
    },
    "storageDeleteFileTranscriptRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "uuid": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "storageDeleteFileTranscriptResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        }
      }
    },
    "storageDeleteFilesRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        }
      }
    },
    "storageDeleteFilesResponse": {
      "type": "object"
    },
    "storageFile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "uploaded_at": {
          "type": "string",
          "format": "int64"
        },
        "uploaded_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "name": {
          "type": "string"
        },
        "mime_type": {
          "type": "string"
        },
        "reference_id": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "format": "int64"
        },
        "sha256sum": {
          "type": "string"
        },
        "thumbnail": {
          "$ref": "#/definitions/storageThumbnail"
        },
        "view_name": {
          "type": "string"
        },
        "channel": {
          "$ref": "#/definitions/storageUploadFileChannel"
        },
        "retention_until": {
          "type": "string",
          "format": "int64"
        },
        "uuid": {
          "type": "string",
          "title": "deprecated use reference_id"
        }
      }
    },
    "storageFilePolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "mime_types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "speed_download": {
          "type": "string",
          "format": "int64"
        },
        "speed_upload": {
          "type": "string",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storageUploadFileChannel"
          }
        },
        "retention_days": {
          "type": "integer",
          "format": "int32"
        },
        "position": {
          "type": "integer",
          "format": "int32"
        },
        "max_upload_size": {
          "type": "string",
          "format": "int64"
        },
        "encrypt": {
          "type": "boolean"
        }
      }
    },
    "storageFilePolicyApplyResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "storageFileTranscriptSafeResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "file": {
          "$ref": "#/definitions/engineLookup"
        },
        "profile": {
          "$ref": "#/definitions/engineLookup"
        },
        "transcript": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "locale": {
          "type": "string"
        }
      }
    },
    "storageGenerateFileLinkRequest": {
      "type": "object",
      "properties": {
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "file_id": {
          "type": "string",
          "format": "int64"
        },
        "source": {
          "type": "string"
        },
        "action": {
          "type": "string"
        },
        "query": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "metadata": {
          "type": "boolean"
        }
      }
    },
    "storageGenerateFileLinkResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "title": "deprecated"
        },
        "base_url": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/storageGenerateFileLinkResponseMetadata"
        }
      }
    },
    "storageGenerateFileLinkResponseMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "mime_type": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "storageICEServers": {
      "type": "object",
      "properties": {
        "urls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "username": {
          "type": "string"
        },
        "credentialType": {
          "type": "integer",
          "format": "int32"
        },
        "credential": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "storageImportSourceType": {
      "type": "string",
      "enum": [
        "DefaultSourceType",
        "Dialer"
      ],
      "default": "DefaultSourceType"
    },
    "storageImportTemplate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "source_type": {
          "$ref": "#/definitions/storageImportSourceType"
        },
        "source_id": {
          "type": "string",
          "format": "int64"
        },
        "parameters": {
          "type": "object"
        },
        "source": {
          "$ref": "#/definitions/engineLookup"
        }
      }
    },
    "storageListBackendProfile": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageBackendProfile"
          }
        }
      }
    },
    "storageListCognitiveProfile": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageCognitiveProfile"
          }
        }
      }
    },
    "storageListCognitiveProfileVoices": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageCognitiveProfileVoice"
          }
        }
      }
    },
    "storageListFile": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageFile"
          }
        }
      }
    },
    "storageListFilePolicies": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageFilePolicy"
          }
        }
      }
    },
    "storageListImportTemplate": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageImportTemplate"
          }
        }
      }
    },
    "storageListMedia": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageMediaFile"
          }
        }
      }
    },
    "storageListPhrases": {
      "type": "object",
      "properties": {
        "next": {
          "type": "boolean"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageTranscriptPhrase"
          }
        }
      }
    },
    "storageMediaFile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/engineLookup"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "format": "int64"
        },
        "mime_type": {
          "type": "string"
        }
      }
    },
    "storageMovePositionFilePolicyResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "storageProviderType": {
      "type": "string",
      "enum": [
        "DefaultProvider",
        "Microsoft",
        "Google",
        "ElevenLabs"
      ],
      "default": "DefaultProvider"
    },
    "storagePutFileTranscriptRequest": {
      "type": "object",
      "properties": {
        "file_id": {
          "type": "string",
          "format": "int64"
        },
        "locale": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "phrases": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageTranscriptPhrase"
          }
        },
        "text": {
          "type": "string"
        }
      }
    },
    "storagePutFileTranscriptResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "storageSafeUploadFileRequestMetadata": {
      "type": "object",
      "properties": {
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "mime_type": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "stream_response": {
          "type": "boolean"
        },
        "profile_id": {
          "type": "string",
          "format": "int64"
        },
        "progress": {
          "type": "boolean"
        },
        "channel": {
          "$ref": "#/definitions/storageUploadFileChannel"
        },
        "generate_thumbnail": {
          "type": "boolean"
        }
      }
    },
    "storageSafeUploadFileResponse": {
      "type": "object",
      "properties": {
        "part": {
          "$ref": "#/definitions/SafeUploadFileResponsePart"
        },
        "metadata": {
          "$ref": "#/definitions/storageSafeUploadFileResponseMetadata"
        },
        "progress": {
          "$ref": "#/definitions/storageSafeUploadFileResponseProgress"
        }
      }
    },
    "storageSafeUploadFileResponseMetadata": {
      "type": "object",
      "properties": {
        "file_id": {
          "type": "string",
          "format": "int64"
        },
        "file_url": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "format": "int64"
        },
        "code": {
          "$ref": "#/definitions/storageUploadStatusCode"
        },
        "server": {
          "type": "string"
        },
        "sha256sum": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "mime_type": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "thumbnail": {
          "$ref": "#/definitions/storageThumbnail"
        }
      }
    },
    "storageSafeUploadFileResponseProgress": {
      "type": "object",
      "properties": {
        "uploaded": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "storageServiceType": {
      "type": "string",
      "enum": [
        "DefaultService",
        "STT",
        "TTS"
      ],
      "default": "DefaultService"
    },
    "storageStartFileTranscriptRequest": {
      "type": "object",
      "properties": {
        "file_id": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "locale": {
          "type": "string"
        },
        "profile": {
          "$ref": "#/definitions/engineLookup"
        },
        "uuid": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "storageStartFileTranscriptResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/StartFileTranscriptResponseTranscriptJob"
          }
        }
      }
    },
    "storageStreamFile": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/storageStreamFileMetadata"
        },
        "chunk": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "storageStreamFileMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "mime_type": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "format": "int64"
        },
        "sha256sum": {
          "type": "string"
        },
        "thumbnail": {
          "$ref": "#/definitions/storageThumbnail"
        }
      }
    },
    "storageThumbnail": {
      "type": "object",
      "properties": {
        "mime_type": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "format": "int64"
        },
        "scale": {
          "type": "string"
        }
      }
    },
    "storageTranscriptPhrase": {
      "type": "object",
      "properties": {
        "start_sec": {
          "type": "number",
          "format": "float"
        },
        "end_sec": {
          "type": "number",
          "format": "float"
        },
        "channel": {
          "type": "integer",
          "format": "int64"
        },
        "phrase": {
          "type": "string"
        }
      }
    },
    "storageUploadFileChannel": {
      "type": "string",
      "enum": [
        "UnknownChannel",
        "ChatChannel",
        "MailChannel",
        "CallChannel",
        "LogChannel",
        "MediaChannel",
        "KnowledgebaseChannel",
        "CasesChannel",
        "ScreenshotChannel",
        "ScreenSharingChannel"
      ],
      "default": "UnknownChannel"
    },
    "storageUploadFileRequestMetadata": {
      "type": "object",
      "properties": {
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "mime_type": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "stream_response": {
          "type": "boolean"
        },
        "profile_id": {
          "type": "string",
          "format": "int64"
        },
        "channel": {
          "$ref": "#/definitions/storageUploadFileChannel"
        },
        "generate_thumbnail": {
          "type": "boolean"
        }
      }
    },
    "storageUploadFileResponse": {
      "type": "object",
      "properties": {
        "file_id": {
          "type": "string",
          "format": "int64"
        },
        "file_url": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "format": "int64"
        },
        "code": {
          "$ref": "#/definitions/storageUploadStatusCode"
        },
        "server": {
          "type": "string"
        },
        "sha256sum": {
          "type": "string"
        },
        "thumbnail": {
          "$ref": "#/definitions/storageThumbnail"
        }
      }
    },
    "storageUploadFileUrlResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "url": {
          "type": "string"
        },
        "mime": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "format": "int64"
        },
        "code": {
          "$ref": "#/definitions/storageUploadStatusCode"
        },
        "sha256sum": {
          "type": "string"
        },
        "thumbnail": {
          "$ref": "#/definitions/storageThumbnail"
        },
        "server": {
          "type": "string"
        }
      }
    },
    "storageUploadP2PVideoResponse": {
      "type": "object",
      "properties": {
        "sdp_answer": {
          "type": "string"
        }
      }
    },
    "storageUploadStatusCode": {
      "type": "string",
      "enum": [
        "Unknown",
        "Ok",
        "Failed"
      ],
      "default": "Unknown"
    },
    "webitelcasesAttachment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "url": {
          "type": "string"
        },
        "mime": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "webitelcasesCallEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "closed_at": {
          "type": "string",
          "format": "int64"
        },
        "duration": {
          "type": "string",
          "format": "int64"
        },
        "is_inbound": {
          "type": "boolean"
        },
        "is_missed": {
          "type": "boolean"
        },
        "participants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/generalLookup"
          }
        },
        "gateway": {
          "$ref": "#/definitions/generalLookup"
        },
        "flow_scheme": {
          "$ref": "#/definitions/generalLookup"
        },
        "queue": {
          "$ref": "#/definitions/generalLookup"
        },
        "is_detailed": {
          "type": "boolean"
        },
        "files": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcasesCallFile"
          }
        },
        "transcripts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcasesTranscriptLookup"
          }
        },
        "total_duration": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "webitelcasesCallFile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "format": "int64"
        },
        "mime_type": {
          "type": "string"
        },
        "start_at": {
          "type": "string",
          "format": "int64"
        },
        "stop_at": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "webitelcasesChatEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "closed_at": {
          "type": "string",
          "format": "int64"
        },
        "duration": {
          "type": "string",
          "format": "int64"
        },
        "is_inbound": {
          "type": "boolean"
        },
        "is_missed": {
          "type": "boolean"
        },
        "participants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/generalLookup"
          }
        },
        "gateway": {
          "$ref": "#/definitions/generalExtendedLookup"
        },
        "flow_scheme": {
          "$ref": "#/definitions/generalLookup"
        },
        "queue": {
          "$ref": "#/definitions/generalLookup"
        },
        "is_detailed": {
          "type": "boolean"
        }
      }
    },
    "webitelcasesDayTimeline": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcasesEvent"
          }
        },
        "day_timestamp": {
          "type": "string",
          "format": "int64"
        },
        "chats_count": {
          "type": "string",
          "format": "int64"
        },
        "calls_count": {
          "type": "string",
          "format": "int64"
        },
        "emails_count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "webitelcasesEmailEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "from": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "array of senders (email addresses)"
        },
        "to": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "array of receivers (email addresses)"
        },
        "sender": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "array of receivers (email addresses)"
        },
        "cc": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "array of ccs (email addresses)"
        },
        "is_inbound": {
          "type": "boolean",
          "title": "inbound/outbound email"
        },
        "subject": {
          "type": "string"
        },
        "body": {
          "type": "string",
          "title": "plain text of email"
        },
        "html": {
          "type": "string",
          "title": "html body of email"
        },
        "owner": {
          "$ref": "#/definitions/generalLookup",
          "title": "Agent who sent/accepted"
        },
        "attachments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcasesAttachment"
          }
        },
        "profile": {
          "$ref": "#/definitions/generalLookup",
          "title": "email profile"
        },
        "is_detailed": {
          "type": "boolean",
          "title": "reserved for the open"
        }
      }
    },
    "webitelcasesEvent": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/casesCaseTimelineEventType"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "chat": {
          "$ref": "#/definitions/webitelcasesChatEvent"
        },
        "call": {
          "$ref": "#/definitions/webitelcasesCallEvent"
        },
        "email": {
          "$ref": "#/definitions/webitelcasesEmailEvent"
        }
      }
    },
    "webitelcasesFile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "Storage file ID."
        },
        "created_by": {
          "$ref": "#/definitions/generalLookup",
          "description": "Creator of the file."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "Creation timestamp in Unix milliseconds."
        },
        "size": {
          "type": "string",
          "format": "int64",
          "description": "File size in bytes."
        },
        "mime": {
          "type": "string",
          "description": "MIME type of the file."
        },
        "name": {
          "type": "string",
          "description": "File name."
        },
        "author": {
          "$ref": "#/definitions/generalLookup"
        },
        "url": {
          "type": "string"
        }
      },
      "description": "Metadata for a file associated with a case."
    },
    "webitelcasesGetTimelineCounterResponse": {
      "type": "object",
      "properties": {
        "date_from": {
          "type": "string",
          "format": "int64",
          "title": "filter dates"
        },
        "date_to": {
          "type": "string",
          "format": "int64"
        },
        "chats_count": {
          "type": "string",
          "format": "int64",
          "title": "defined event types"
        },
        "calls_count": {
          "type": "string",
          "format": "int64"
        },
        "emails_count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "webitelcasesGetTimelineResponse": {
      "type": "object",
      "properties": {
        "days": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcasesDayTimeline"
          }
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "next": {
          "type": "boolean"
        }
      }
    },
    "webitelcasesStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique identifier of the close reason"
        },
        "name": {
          "type": "string",
          "title": "Name of the close reason"
        },
        "description": {
          "type": "string",
          "title": "Description of the close reason"
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "CreatedAt timestamp of the close reason"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "UpdatedAt timestamp of the close reason"
        },
        "created_by": {
          "$ref": "#/definitions/generalLookup",
          "title": "CreatedBy user of the close reason"
        },
        "updated_by": {
          "$ref": "#/definitions/generalLookup",
          "title": "UpdatedBy user of the close reason"
        }
      },
      "title": "Status message represents a status entity with metadata"
    },
    "webitelcasesTranscriptLookup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "locale": {
          "type": "string"
        },
        "file": {
          "$ref": "#/definitions/generalLookup"
        }
      }
    },
    "webitelchatBroadcastMessageRequest": {
      "type": "object",
      "properties": {
        "peers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chatInputPeer"
          }
        },
        "message": {
          "$ref": "#/definitions/chatInputMessage"
        },
        "timeout": {
          "type": "string",
          "format": "int64"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "webitelchatBroadcastMessageResponse": {
      "type": "object",
      "properties": {
        "failure": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chatBroadcastError"
          }
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "webitelchatButton": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "Caption to display."
        },
        "url": {
          "type": "string",
          "description": "URL to navigate to .."
        },
        "code": {
          "type": "string",
          "description": "Postback/Callback data."
        },
        "share": {
          "$ref": "#/definitions/chatButtonRequest",
          "description": "Request to share contact info."
        }
      }
    },
    "webitelchatCustomer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Customer unique **ID**entifier.\nAccount **type**-specific string."
        },
        "type": {
          "type": "string",
          "description": "Customer account **type**."
        },
        "name": {
          "type": "string",
          "description": "Customer account **name**."
        },
        "via": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chatPeer"
          },
          "description": "[VIA] Text gateway associations."
        }
      },
      "description": "Customer is external chat contact."
    },
    "webitelchatEmptyResponse": {
      "type": "object"
    },
    "webitelchatFile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "File location"
        },
        "size": {
          "type": "string",
          "format": "int64",
          "title": "Size in bytes"
        },
        "type": {
          "type": "string",
          "title": "MIME media type"
        },
        "name": {
          "type": "string",
          "title": "Filename"
        },
        "url": {
          "type": "string",
          "title": "File url (optional)"
        }
      },
      "description": "Media File."
    },
    "webitelchatInputFile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "source": {
          "type": "string"
        }
      }
    },
    "webitelchatLookup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "webitelchatMessage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "Unique message identifier inside this chat."
        },
        "date": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp when this message was sent (published)."
        },
        "from": {
          "$ref": "#/definitions/chatPeer",
          "description": "Sender of the message."
        },
        "chat": {
          "$ref": "#/definitions/chatChat",
          "description": "Conversation the message belongs to .."
        },
        "sender": {
          "$ref": "#/definitions/chatChat",
          "description": "Chat Sender of the message, sent on behalf of a chat (member)."
        },
        "edit": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp when this message was last edited."
        },
        "kind": {
          "type": "string",
          "title": "Kind of the message. Custom type classifier. Optional. Default: empty.\nMay be used by the client UI to extend set of general message.type(s): [ text | file ]"
        },
        "text": {
          "type": "string",
          "description": "Message Text."
        },
        "file": {
          "$ref": "#/definitions/webitelchatFile",
          "description": "Message Media. Attachment."
        },
        "context": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Context. Variables. Environment."
        },
        "keyboard": {
          "$ref": "#/definitions/chatReplyMarkup",
          "description": "Keyboard. Buttons. Quick Replies."
        },
        "postback": {
          "$ref": "#/definitions/webitelchatPostback",
          "description": "Postback. Reply Button Click[ed]."
        }
      },
      "description": "Chat Message."
    },
    "webitelchatPostback": {
      "type": "object",
      "properties": {
        "mid": {
          "type": "string",
          "format": "int64",
          "description": "Message ID of the button."
        },
        "code": {
          "type": "string",
          "description": "Data associated with the Button."
        },
        "text": {
          "type": "string",
          "description": "Button's display caption."
        }
      },
      "description": "Postback. Reply Button Click[ed]."
    },
    "webitelcontactsAttachment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "url": {
          "type": "string"
        },
        "mime": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "webitelcontactsCallEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "closed_at": {
          "type": "string",
          "format": "int64"
        },
        "duration": {
          "type": "string",
          "format": "int64"
        },
        "is_inbound": {
          "type": "boolean"
        },
        "is_missed": {
          "type": "boolean"
        },
        "participants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcontactsLookup"
          }
        },
        "gateway": {
          "$ref": "#/definitions/webitelcontactsLookup"
        },
        "flow_scheme": {
          "$ref": "#/definitions/webitelcontactsLookup"
        },
        "queue": {
          "$ref": "#/definitions/webitelcontactsLookup"
        },
        "is_detailed": {
          "type": "boolean"
        },
        "files": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcontactsCallFile"
          }
        },
        "transcripts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcontactsTranscriptLookup"
          }
        },
        "total_duration": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "webitelcontactsCallFile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "format": "int64"
        },
        "mime_type": {
          "type": "string"
        },
        "start_at": {
          "type": "string",
          "format": "int64"
        },
        "stop_at": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "webitelcontactsChatEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "closed_at": {
          "type": "string",
          "format": "int64"
        },
        "duration": {
          "type": "string",
          "format": "int64"
        },
        "is_inbound": {
          "type": "boolean"
        },
        "is_missed": {
          "type": "boolean"
        },
        "participants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcontactsLookup"
          }
        },
        "gateway": {
          "$ref": "#/definitions/webitelcontactsLookup"
        },
        "flow_scheme": {
          "$ref": "#/definitions/webitelcontactsLookup"
        },
        "queue": {
          "$ref": "#/definitions/webitelcontactsLookup"
        },
        "is_detailed": {
          "type": "boolean"
        }
      }
    },
    "webitelcontactsContact": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "READONLY. Operational attributes\nVersion of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "mode": {
          "type": "string",
          "description": "[R]ecord[b]ased[A]ccess[C]ontrol mode granted."
        },
        "domain": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "READONLY. The contact's metadata."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "title": "user"
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "title": "unix"
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "title": "user"
        },
        "user": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "title": "user connected to the contact"
        },
        "name": {
          "$ref": "#/definitions/contactsName",
          "description": "The Contact's name.\nThis field is a singleton for Contact sources."
        },
        "about": {
          "type": "string",
          "description": "BIO. Short description about the Contact person.\nOPTIONAL. Multi-lined text."
        },
        "labels": {
          "$ref": "#/definitions/contactsLabelList",
          "description": "The Contact's associated tag(s)."
        },
        "emails": {
          "$ref": "#/definitions/contactsEmailList",
          "description": "The Contact's email address(es)."
        },
        "phones": {
          "$ref": "#/definitions/contactsPhoneList",
          "description": "The Contact's phone numbers."
        },
        "photos": {
          "$ref": "#/definitions/contactsPhotoList",
          "description": "Output only. The Contact's photo(s).",
          "readOnly": true
        },
        "managers": {
          "$ref": "#/definitions/contactsManagerList",
          "description": "The Contact's internal manager(s)."
        },
        "comments": {
          "$ref": "#/definitions/contactsCommentList",
          "description": "The Contact's internal comment(s)."
        },
        "languages": {
          "$ref": "#/definitions/contactsLanguageList",
          "description": "A Contact's locale preference(s)."
        },
        "timezones": {
          "$ref": "#/definitions/contactsTimezoneList",
          "description": "The Contact's timezone preference(s)."
        },
        "groups": {
          "$ref": "#/definitions/contactsContactGroupList",
          "description": "The Contact's associated group(s)."
        },
        "imclients": {
          "$ref": "#/definitions/contactsIMClientList",
          "description": "The contact's [I]nstant[M]essaging clients."
        },
        "variables": {
          "$ref": "#/definitions/contactsVariableList",
          "description": "Arbitrary client data that is populated by clients.\nDuplicate keys and values are allowed."
        }
      },
      "description": "The Contact principal source.\nOUTPUT purpose only."
    },
    "webitelcontactsDayTimeline": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcontactsEvent"
          }
        },
        "day_timestamp": {
          "type": "string",
          "format": "int64"
        },
        "chats_count": {
          "type": "string",
          "format": "int64"
        },
        "calls_count": {
          "type": "string",
          "format": "int64"
        },
        "emails_count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "webitelcontactsEmailEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "from": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "array of senders (email addresses)"
        },
        "to": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "array of receivers (email addresses)"
        },
        "sender": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "array of receivers (email addresses)"
        },
        "cc": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "array of ccs (email addresses)"
        },
        "is_inbound": {
          "type": "boolean",
          "title": "inbound/outbound email"
        },
        "subject": {
          "type": "string"
        },
        "body": {
          "type": "string",
          "title": "plain text of email"
        },
        "html": {
          "type": "string",
          "title": "html body of email"
        },
        "owner": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "title": "Agent who sent/accepted"
        },
        "attachments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcontactsAttachment"
          }
        },
        "profile": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "title": "email profile"
        },
        "is_detailed": {
          "type": "boolean",
          "title": "reserved for the open"
        }
      }
    },
    "webitelcontactsEmptyResponse": {
      "type": "object"
    },
    "webitelcontactsEvent": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/contactsTimelineEventType"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "chat": {
          "$ref": "#/definitions/webitelcontactsChatEvent"
        },
        "call": {
          "$ref": "#/definitions/webitelcontactsCallEvent"
        },
        "email": {
          "$ref": "#/definitions/webitelcontactsEmailEvent"
        }
      }
    },
    "webitelcontactsGetTimelineCounterResponse": {
      "type": "object",
      "properties": {
        "date_from": {
          "type": "string",
          "format": "int64",
          "title": "filter dates"
        },
        "date_to": {
          "type": "string",
          "format": "int64"
        },
        "chats_count": {
          "type": "string",
          "format": "int64",
          "title": "defined event types"
        },
        "calls_count": {
          "type": "string",
          "format": "int64"
        },
        "emails_count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "webitelcontactsGetTimelineResponse": {
      "type": "object",
      "properties": {
        "days": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/webitelcontactsDayTimeline"
          }
        },
        "page": {
          "type": "string",
          "format": "int64"
        },
        "next": {
          "type": "boolean"
        }
      }
    },
    "webitelcontactsGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the group. Never changes."
        },
        "name": {
          "type": "string",
          "description": "The name of the group."
        },
        "description": {
          "type": "string",
          "description": "The description of the group."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the group's creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last group update."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who created this group."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed the last update."
        },
        "enabled": {
          "type": "boolean"
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsDynamicCondition"
          },
          "description": "List of dynamic conditions associated with the group."
        },
        "default_group": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Default static group to be assigned if no conditions are met."
        },
        "type": {
          "$ref": "#/definitions/contactsGroupType"
        },
        "contactsSize": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "Group of Contacts"
    },
    "webitelcontactsLabel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "label": {
          "type": "string",
          "description": "REQUIRED. Tag value;\nNOTE: Keep in mind, hashtags are not case-sensitive,\nbut adding capital letters does make them easier to read:\n#MakeAWish vs. #makeawish."
        }
      },
      "description": "A Contact's associated Tag.\nOutput purpose only."
    },
    "webitelcontactsLookup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Reference Object unique ID."
        },
        "type": {
          "type": "string",
          "description": "Reference Object well-known type."
        },
        "name": {
          "type": "string",
          "description": "Reference Object display name."
        }
      },
      "description": "Lookup reference information.\nSimplified search filter to uniquely identify related object."
    },
    "webitelcontactsMediaFile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "File unique ID"
        },
        "date": {
          "type": "string",
          "format": "int64",
          "title": "Creation date; timestamp(milli)"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "title": "Size in bytes"
        },
        "type": {
          "type": "string",
          "title": "MIME type"
        },
        "data": {
          "type": "string",
          "format": "byte",
          "title": "Binary content"
        },
        "hash": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "md5, sha256, ..",
          "title": "Check sum, dependent on unique ID"
        },
        "meta": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsMediaAttribute"
          },
          "title": "File attributes metadata"
        },
        "thumb": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsImageSize"
          },
          "title": "Thumbnails"
        },
        "video_thumb": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/contactsVideoSize"
          },
          "title": "Video Thumbnails"
        }
      }
    },
    "webitelcontactsTimezone": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "ver": {
          "type": "integer",
          "format": "int32",
          "description": "Version of the latest update. Numeric sequence."
        },
        "etag": {
          "type": "string",
          "description": "Unique ID of the latest version of the update.\nThis ID changes after any update to the underlying value(s)."
        },
        "created_at": {
          "type": "string",
          "format": "int64",
          "description": "The user who created this Field."
        },
        "created_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timestamp(milli) of the Field creation."
        },
        "updated_at": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp(milli) of the last Field update.\nTake part in Etag generation."
        },
        "updated_by": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "The user who performed last Update."
        },
        "primary": {
          "type": "boolean",
          "description": "Indicates whether this association is the default\namong others of the same type."
        },
        "timezone": {
          "$ref": "#/definitions/webitelcontactsLookup",
          "description": "Timezone dictionary reference value associated."
        }
      },
      "description": "A Contact's timezone preference."
    },
    "webitelcontactsTranscriptLookup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "locale": {
          "type": "string"
        },
        "file": {
          "$ref": "#/definitions/webitelcontactsLookup"
        }
      }
    },
    "webitelknowledgebaseAttachment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the association. Never changes."
        },
        "title": {
          "type": "string",
          "description": "The title of the article."
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the attachment."
        },
        "uploaded_by": {
          "$ref": "#/definitions/webitelknowledgebaseLookup",
          "description": "The user who loaded this attachment."
        }
      }
    },
    "webitelknowledgebaseLookup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Reference Object unique ID."
        },
        "type": {
          "type": "string",
          "description": "Reference Object well-known type."
        },
        "name": {
          "type": "string",
          "description": "Reference Object display name."
        }
      },
      "description": "Lookup reference information.\nSimplified search filter to uniquely identify related object."
    },
    "webitelknowledgebaseTag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the tag."
        }
      }
    },
    "wfmAbsence": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "type_id": {
          "$ref": "#/definitions/wfmAbsenceType"
        },
        "absent_at": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "wfmAbsenceType": {
      "type": "string",
      "enum": [
        "ABSENCE_TYPE_UNSPECIFIED",
        "ABSENCE_TYPE_DAYOFF",
        "ABSENCE_TYPE_VACATION",
        "ABSENCE_TYPE_SICKDAY"
      ],
      "default": "ABSENCE_TYPE_UNSPECIFIED"
    },
    "wfmAgentAbsences": {
      "type": "object",
      "properties": {
        "agent": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "absences": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmAbsence"
          }
        }
      }
    },
    "wfmAgentSchedule": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "int64"
        },
        "locked": {
          "type": "boolean"
        },
        "absence": {
          "$ref": "#/definitions/wfmAbsenceType"
        },
        "shift": {
          "$ref": "#/definitions/wfmAgentScheduleShift"
        }
      }
    },
    "wfmAgentScheduleShift": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "start": {
          "type": "string",
          "format": "int64"
        },
        "end": {
          "type": "string",
          "format": "int64"
        },
        "pauses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmAgentScheduleShiftPause"
          }
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmAgentScheduleShiftSkill"
          }
        }
      }
    },
    "wfmAgentScheduleShiftPause": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "start": {
          "type": "string",
          "format": "int64"
        },
        "end": {
          "type": "string",
          "format": "int64"
        },
        "cause": {
          "$ref": "#/definitions/wfmLookupEntity"
        }
      }
    },
    "wfmAgentScheduleShiftSkill": {
      "type": "object",
      "properties": {
        "skill": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "wfmAgentWorkingConditions": {
      "type": "object",
      "properties": {
        "working_condition": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "pause_template": {
          "$ref": "#/definitions/wfmLookupEntity"
        }
      }
    },
    "wfmAgentWorkingSchedule": {
      "type": "object",
      "properties": {
        "agent": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "schedule": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmAgentSchedule"
          }
        }
      }
    },
    "wfmCreateAgentAbsenceResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmAbsence"
        }
      }
    },
    "wfmCreateAgentsAbsencesRequest": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CreateAgentsAbsencesRequestabsentType"
          }
        },
        "agent_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        }
      }
    },
    "wfmCreateAgentsAbsencesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmAgentAbsences"
          }
        }
      }
    },
    "wfmCreateAgentsWorkingScheduleShiftsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmAgentWorkingSchedule"
          }
        }
      }
    },
    "wfmCreateForecastCalculationRequest": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmForecastCalculation"
        }
      }
    },
    "wfmCreateForecastCalculationResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmForecastCalculation"
        }
      }
    },
    "wfmCreatePauseTemplateRequest": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmPauseTemplate"
        }
      }
    },
    "wfmCreatePauseTemplateResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmPauseTemplate"
        }
      }
    },
    "wfmCreateShiftTemplateRequest": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmShiftTemplate"
        }
      }
    },
    "wfmCreateShiftTemplateResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmShiftTemplate"
        }
      }
    },
    "wfmCreateWorkingConditionRequest": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmWorkingCondition"
        }
      }
    },
    "wfmCreateWorkingConditionResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmWorkingCondition"
        }
      }
    },
    "wfmCreateWorkingScheduleRequest": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmWorkingSchedule"
        }
      }
    },
    "wfmCreateWorkingScheduleResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmWorkingSchedule"
        }
      }
    },
    "wfmDeleteAgentAbsenceResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "wfmDeleteForecastCalculationResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "wfmDeletePauseTemplateResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "wfmDeleteShiftTemplateResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "wfmDeleteWorkingConditionResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "wfmDeleteWorkingScheduleResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "wfmExecuteForecastCalculationResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmExecuteForecastCalculationResponseForecast"
          }
        }
      }
    },
    "wfmExecuteForecastCalculationResponseForecast": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64"
        },
        "agents": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "wfmFilterBetween": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string",
          "format": "int64"
        },
        "to": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "wfmForecastCalculation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "procedure": {
          "type": "string"
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "wfmHoliday": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "wfmLookupEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "wfmPauseTemplate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "causes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmPauseTemplateCause"
          }
        }
      }
    },
    "wfmPauseTemplateCause": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "string",
          "format": "int64"
        },
        "cause": {
          "$ref": "#/definitions/wfmLookupEntity"
        }
      }
    },
    "wfmReadAgentAbsenceResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmAbsence"
        }
      }
    },
    "wfmReadAgentWorkingConditionsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmAgentWorkingConditions"
        }
      }
    },
    "wfmReadForecastCalculationResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmForecastCalculation"
        }
      }
    },
    "wfmReadPauseTemplateResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmPauseTemplate"
        }
      }
    },
    "wfmReadShiftTemplateResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmShiftTemplate"
        }
      }
    },
    "wfmReadWorkingConditionResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmWorkingCondition"
        }
      }
    },
    "wfmReadWorkingScheduleForecastResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/wfmWorkingScheduleForecast"
          }
        }
      }
    },
    "wfmReadWorkingScheduleResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmWorkingSchedule"
        }
      }
    },
    "wfmSearchAgentAbsenceResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmAbsence"
          }
        }
      }
    },
    "wfmSearchAgentsAbsencesResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmAgentAbsences"
          }
        },
        "next": {
          "type": "boolean"
        }
      }
    },
    "wfmSearchAgentsWorkingScheduleResponse": {
      "type": "object",
      "properties": {
        "holidays": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmHoliday"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmAgentWorkingSchedule"
          }
        },
        "total": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "wfmSearchForecastCalculationResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmForecastCalculation"
          }
        },
        "next": {
          "type": "boolean"
        }
      }
    },
    "wfmSearchPauseTemplateResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmPauseTemplate"
          }
        },
        "next": {
          "type": "boolean"
        }
      }
    },
    "wfmSearchShiftTemplateResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmShiftTemplate"
          }
        },
        "next": {
          "type": "boolean"
        }
      }
    },
    "wfmSearchWorkingConditionResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmWorkingCondition"
          }
        },
        "next": {
          "type": "boolean"
        }
      }
    },
    "wfmSearchWorkingScheduleResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmWorkingSchedule"
          }
        },
        "next": {
          "type": "boolean"
        }
      }
    },
    "wfmShiftTemplate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "times": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmShiftTemplateTime"
          }
        }
      }
    },
    "wfmShiftTemplateTime": {
      "type": "object",
      "properties": {
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "end": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "wfmUpdateAgentAbsenceResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmAbsence"
        }
      }
    },
    "wfmUpdateAgentWorkingConditionsResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmAgentWorkingConditions"
        }
      }
    },
    "wfmUpdateForecastCalculationResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmForecastCalculation"
        }
      }
    },
    "wfmUpdatePauseTemplateResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmPauseTemplate"
        }
      }
    },
    "wfmUpdateShiftTemplateResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmShiftTemplate"
        }
      }
    },
    "wfmUpdateWorkingConditionResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmWorkingCondition"
        }
      }
    },
    "wfmUpdateWorkingScheduleAddAgentsResponse": {
      "type": "object",
      "properties": {
        "agents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmLookupEntity"
          }
        }
      }
    },
    "wfmUpdateWorkingScheduleRemoveAgentResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "wfmUpdateWorkingScheduleResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/wfmWorkingSchedule"
        }
      }
    },
    "wfmWorkingCondition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "workday_hours": {
          "type": "integer",
          "format": "int32"
        },
        "workdays_per_month": {
          "type": "integer",
          "format": "int32"
        },
        "vacation": {
          "type": "integer",
          "format": "int32"
        },
        "sick_leaves": {
          "type": "integer",
          "format": "int32"
        },
        "days_off": {
          "type": "integer",
          "format": "int32"
        },
        "pause_duration": {
          "type": "integer",
          "format": "int32"
        },
        "pause_template": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "shift_template": {
          "$ref": "#/definitions/wfmLookupEntity"
        }
      }
    },
    "wfmWorkingSchedule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "domain_id": {
          "type": "string",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "created_by": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_by": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/wfmWorkingScheduleState"
        },
        "team": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "calendar": {
          "$ref": "#/definitions/wfmLookupEntity"
        },
        "start_date_at": {
          "type": "string",
          "format": "int64"
        },
        "end_date_at": {
          "type": "string",
          "format": "int64"
        },
        "start_time_at": {
          "type": "string",
          "format": "int64"
        },
        "end_time_at": {
          "type": "string",
          "format": "int64"
        },
        "extra_skills": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmLookupEntity"
          }
        },
        "block_outside_activity": {
          "type": "boolean"
        },
        "agents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmLookupEntity"
          }
        },
        "total_agents": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "wfmWorkingScheduleForecast": {
      "type": "object",
      "properties": {
        "forecast": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/wfmWorkingScheduleForecastForecast"
          }
        }
      }
    },
    "wfmWorkingScheduleForecastForecast": {
      "type": "object",
      "properties": {
        "hour": {
          "type": "string",
          "format": "int64"
        },
        "agents": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "wfmWorkingScheduleState": {
      "type": "string",
      "enum": [
        "WORKING_SCHEDULE_STATE_UNSPECIFIED",
        "WORKING_SCHEDULE_STATE_ACTIVE",
        "WORKING_SCHEDULE_STATE_PENDING",
        "WORKING_SCHEDULE_STATE_DRAFT",
        "WORKING_SCHEDULE_STATE_ARCHIVED"
      ],
      "default": "WORKING_SCHEDULE_STATE_UNSPECIFIED"
    },
    "workflowBreakBridgeResponse": {
      "type": "object"
    },
    "workflowBreakResponse": {
      "type": "object"
    },
    "workflowCancelProcessingResponse": {
      "type": "object"
    },
    "workflowComponentActionResponse": {
      "type": "object"
    },
    "workflowConfirmationMessageResponse": {
      "type": "object"
    },
    "workflowDistributeAttemptResponse": {
      "type": "object",
      "properties": {
        "cancel": {
          "$ref": "#/definitions/DistributeAttemptResponseCancel"
        },
        "confirm": {
          "$ref": "#/definitions/DistributeAttemptResponseConfirm"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        }
      }
    },
    "workflowErrorForm": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "workflowFlowScope": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "workflowForm": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "app_id": {
          "type": "string"
        },
        "form": {
          "type": "string",
          "format": "byte"
        },
        "timeout": {
          "type": "string",
          "format": "uint64"
        },
        "stop": {
          "type": "boolean"
        },
        "error": {
          "$ref": "#/definitions/workflowErrorForm"
        }
      }
    },
    "workflowResultAttemptResponse": {
      "type": "object",
      "properties": {
        "success": {
          "$ref": "#/definitions/ResultAttemptResponseSuccess"
        },
        "abandoned": {
          "$ref": "#/definitions/ResultAttemptResponseAbandoned"
        },
        "retry": {
          "$ref": "#/definitions/ResultAttemptResponseRetry"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        }
      }
    },
    "workflowStartFlowResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "workflowStartResponse": {
      "type": "object"
    },
    "workflowStartSyncFlowResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "workflowTransferChatPlanResponse": {
      "type": "object"
    }
  },
  "securityDefinitions": {
    "AccessToken": {
      "type": "apiKey",
      "name": "X-Webitel-Access",
      "in": "header"
    }
  },
  "security": [
    {
      "AccessToken": []
    }
  ]
}
