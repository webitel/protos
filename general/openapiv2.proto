syntax = "proto3";

package general;

import "protoc-gen-openapiv2/options/annotations.proto";
import "error.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  // Specifies the OpenAPI Specification version being used.
  // The value MUST be "2.0".
  swagger: "2.0",

  // The host (name or ip) serving the API. This MUST be the host only and does
  // not include the scheme nor sub-paths. It MAY include a port.
  schemes: HTTPS;
  host: "dev.webitel.com";
  base_path: "/api";

  // Provides metadata about the API.
  info: {
    title: "Webitel API";
    version: "v25.6-dev";
    contact: {
      name: "Webitel";
      email: "support@webitel.com";
      url: "https://webitel.com";
    };

    license: {
      name: "MIT"
    };
  };

  consumes: "application/json";
  produces: "application/json";

  security_definitions: {
    security: {
      key: "AccessToken";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "X-Webitel-Access";
      }
    }
  }

  security: {
    security_requirement: {
      key: "AccessToken";
      value: {};
    }
  }

  responses: {
    key: "400";
    value: {
      description: "Bad Request - Invalid request arguments";
      schema: {
        json_schema: {ref: ".general.Error"}
      }
    }
  }

  responses: {
    key: "401";
    value: {
      description: "Unauthorized - Authentication required";
      schema: {
        json_schema: {ref: ".general.Error"}
      }
    }
  }

  responses: {
    key: "403";
    value: {
      description: "Forbidden - Insufficient permissions";
      schema: {
        json_schema: {ref: ".general.Error"}
      }
    }
  }

  responses: {
    key: "404";
    value: {
      description: "Not Found - Resource does not exist";
      schema: {
        json_schema: {ref: ".general.Error"}
      }
    }
  }

  responses: {
    key: "409";
    value: {
      description: "Conflict - Resource already exists or conflict detected";
      schema: {
        json_schema: {ref: ".general.Error"}
      }
    }
  }

  responses: {
    key: "500";
    value: {
      description: "Internal Server Error";
      schema: {
        json_schema: {ref: ".general.Error"}
      }
    }
  }

  responses: {
    key: "default";
    value: {
      description: "Unexpected error";
      schema: {
        json_schema: {ref: ".general.Error"}
      }
    }
  }
};